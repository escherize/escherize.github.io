{"version":3,"sources":["re_frame/fx.cljc"],"mappings":"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","names":["re-frame.fx/kind","js/Error","re-frame.registrar/kinds","re-frame.fx/reg-fx","id","handler","re-frame.registrar/register-handler","re-frame.fx/do-fx","re_frame.interceptor.__GT_interceptor","context","re-frame.trace/is-trace-enabled?","*current-trace*-orig-val__45237","re-frame.trace/*current-trace*","*current-trace*-temp-val__45238","re-frame.trace/start-trace","end__44815__auto__","re-frame.interop/now","duration__44816__auto__","cljs.core.swap_BANG_","re-frame.trace/traces","cljs.core/conj","cljs.core.assoc","re-frame.trace/run-tracing-callbacks!","seq__45242","cljs.core/seq","chunk__45243","count__45244","i__45245","vec__45258","cljs.core.nth","temp__5753__auto__","cljs.core/chunked-seq?","c__4638__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__45262","cljs.core/first","cljs.core/next","seq__45270","chunk__45271","count__45272","i__45273","vec__45290","vec__45298","effect-key","effect-value","temp__5751__auto__","effect-fn","re_frame.registrar.get_handler","re_frame.loggers.console","value","seq__45302","chunk__45303","count__45304","i__45305","map__45311","cljs.core/--destructure-map","cljs.core.get","map__45313","ms","dispatch","effect","cljs.core.remove","cljs.core/nil?","cljs.core/empty?","re-frame.interop/set-timeout!","re-frame.router/dispatch","cljs.core/vector?","cljs.core/sequential?","seq__45314","chunk__45315","count__45316","i__45317","event","clear-event","cljs.core.partial","re-frame.registrar/clear-handlers","re-frame.events/kind","seq__45319","chunk__45320","count__45321","i__45322","cljs.core/deref","re-frame.db/app-db","cljs.core/reset!"],"sourcesContent":["(ns re-frame.fx\n  (:require\n    [re-frame.router      :as router]\n    [re-frame.db          :refer [app-db]]\n    [re-frame.interceptor :refer [->interceptor]]\n    [re-frame.interop     :refer [set-timeout!]]\n    [re-frame.events      :as events]\n    [re-frame.registrar   :refer [get-handler clear-handlers register-handler]]\n    [re-frame.loggers     :refer [console]]\n    [re-frame.trace :as trace :include-macros true]))\n\n\n;; -- Registration ------------------------------------------------------------\n\n(def kind :fx)\n(assert (re-frame.registrar/kinds kind))\n\n(defn reg-fx\n  \"Register the given effect `handler` for the given `id`.\n\n  `id` is keyword, often namespaced.\n  `handler` is a side-effecting function which takes a single argument and whose return\n  value is ignored.\n\n  Example Use\n  -----------\n\n  First, registration ... associate `:effect2` with a handler.\n\n  (reg-fx\n     :effect2\n     (fn [value]\n        ... do something side-effect-y))\n\n  Then, later, if an event handler were to return this effects map ...\n\n  {...\n   :effect2  [1 2]}\n\n   ... then the `handler` `fn` we registered previously, using `reg-fx`, will be\n   called with an argument of `[1 2]`.\"\n  [id handler]\n  (register-handler kind id handler))\n\n;; -- Interceptor -------------------------------------------------------------\n\n(def do-fx\n  \"An interceptor whose `:after` actions the contents of `:effects`. As a result,\n  this interceptor is Domino 3.\n\n  This interceptor is silently added (by reg-event-db etc) to the front of\n  interceptor chains for all events.\n\n  For each key in `:effects` (a map), it calls the registered `effects handler`\n  (see `reg-fx` for registration of effect handlers).\n\n  So, if `:effects` was:\n      {:dispatch  [:hello 42]\n       :db        {...}\n       :undo      \\\"set flag\\\"}\n\n  it will call the registered effect handlers for each of the map's keys:\n  `:dispatch`, `:undo` and `:db`. When calling each handler, provides the map\n  value for that key - so in the example above the effect handler for :dispatch\n  will be given one arg `[:hello 42]`.\n\n  You cannot rely on the ordering in which effects are executed.\"\n  (->interceptor\n    :id :do-fx\n    :after (fn do-fx-after\n             [context]\n             (trace/with-trace\n               {:op-type :event/do-fx}\n               (doseq [[effect-key effect-value] (:effects context)]\n                 (if-let [effect-fn (get-handler kind effect-key false)]\n                   (effect-fn effect-value)\n                   (console :error \"re-frame: no handler registered for effect:\" effect-key \". Ignoring.\")))))))\n\n;; -- Builtin Effect Handlers  ------------------------------------------------\n\n;; :dispatch-later\n;;\n;; `dispatch` one or more events after given delays. Expects a collection\n;; of maps with two keys:  :`ms` and `:dispatch`\n;;\n;; usage:\n;;\n;;    {:dispatch-later [{:ms 200 :dispatch [:event-id \"param\"]}    ;;  in 200ms do this: (dispatch [:event-id \"param\"])\n;;                      {:ms 100 :dispatch [:also :this :in :100ms]}]}\n;;\n;; Note: nil entries in the collection are ignored which means events can be added\n;; conditionally:\n;;    {:dispatch-later [ (when (> 3 5) {:ms 200 :dispatch [:conditioned-out]})\n;;                       {:ms 100 :dispatch [:another-one]}]}\n;;\n(reg-fx\n  :dispatch-later\n  (fn [value]\n    (doseq [{:keys [ms dispatch] :as effect} (remove nil? value)]\n        (if (or (empty? dispatch) (not (number? ms)))\n          (console :error \"re-frame: ignoring bad :dispatch-later value:\" effect)\n          (set-timeout! #(router/dispatch dispatch) ms)))))\n\n\n;; :dispatch\n;;\n;; `dispatch` one event. Expects a single vector.\n;;\n;; usage:\n;;   {:dispatch [:event-id \"param\"] }\n\n(reg-fx\n  :dispatch\n  (fn [value]\n    (if-not (vector? value)\n      (console :error \"re-frame: ignoring bad :dispatch value. Expected a vector, but got:\" value)\n      (router/dispatch value))))\n\n\n;; :dispatch-n\n;;\n;; `dispatch` more than one event. Expects a list or vector of events. Something for which\n;; sequential? returns true.\n;;\n;; usage:\n;;   {:dispatch-n (list [:do :all] [:three :of] [:these])}\n;;\n;; Note: nil events are ignored which means events can be added\n;; conditionally:\n;;    {:dispatch-n (list (when (> 3 5) [:conditioned-out])\n;;                       [:another-one])}\n;;\n(reg-fx\n  :dispatch-n\n  (fn [value]\n    (if-not (sequential? value)\n      (console :error \"re-frame: ignoring bad :dispatch-n value. Expected a collection, but got:\" value)\n      (doseq [event (remove nil? value)] (router/dispatch event)))))\n\n\n;; :deregister-event-handler\n;;\n;; removes a previously registered event handler. Expects either a single id (\n;; typically a namespaced keyword), or a seq of ids.\n;;\n;; usage:\n;;   {:deregister-event-handler :my-id)}\n;; or:\n;;   {:deregister-event-handler [:one-id :another-id]}\n;;\n(reg-fx\n  :deregister-event-handler\n  (fn [value]\n    (let [clear-event (partial clear-handlers events/kind)]\n      (if (sequential? value)\n        (doseq [event value] (clear-event event))\n        (clear-event value)))))\n\n\n;; :db\n;;\n;; reset! app-db with a new value. `value` is expected to be a map.\n;;\n;; usage:\n;;   {:db  {:key1 value1 key2 value2}}\n;;\n(reg-fx\n  :db\n  (fn [value]\n    (if-not (identical? @app-db value)\n      (reset! app-db value))))\n\n"]}