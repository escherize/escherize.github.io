{"version":3,"sources":["reitit/exception.cljc"],"mappings":";AAGA,AAAA,8BAAA,sCAAAA,pEAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,0DAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,0DAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,4DAAA,5DAAMD,uEACFE;AADJ,AAEG,sEAAA,/DAACC,0DAAMD;;;AAFV,CAAA,4DAAA,5DAAMF,uEAGFE,KAAKE;AAHT,AAIG,MAAO,kGAAA,2CAAA,0DAAA,vMAACC,gDAAQ,4CAAKH,sGAAaA,0DAAYE;;;AAJjD,CAAA,sDAAA,tDAAMJ;;AAAN,AAMA,+BAAA,/BAAMM,sEAAaC;AAAnB,AAC2C,OAACC,qBAAWD;;AAEvD,GAAA,QAAAE,mCAAAC,6CAAAC;AAAA;AAAA,AAAA,oCAAA,iBAAAC,6BAAA,AAAAC,6CAAA,/HAAUS;IAAVR,6BAAA,AAAAD,6CAAA;IAAAE,6BAAA,AAAAF,6CAAA;IAAAG,iCAAA,AAAAH,6CAAA;IAAAI,0BAAA,AAAAC,4CAAA,mCAAA,gEAAA,iBAAAC,eAAA;AAAA,AAAA,QAAAA,6CAAAA,+CAAAA;;AAAA,AAAA,YAAAC,kBAAA,AAAAC,+CAAA,mBAAA,oBAA2B,WAAKnB,KAAKqB,EAAEA;AAAZ,AAAerB;GAA1C,4DAAAe,wBAAAL,2BAAAE,2BAAAC,2BAAAC;;;AAEA,6BAAA,7BAAMQ,kEAAWjB;AAAjB,AACE,IAAMH,OAAK,AAACqB,kBAAQlB;IACdmB,UAAQ,AAACJ,gEAAiB,AAAA,mFAAOlB,MAAM,AAACE,6BAAYC,GAAG,AAAA,mFAAOH;AADpE,AAGE,OAACC,gDAAQqB,QAAQ,AAACC,8CAAM,iBAAAC,mBAAIxB;AAAJ,AAAA,oBAAAwB;AAAAA;;AAAA;;KAAP,sFAA4BrB;;AAMjD,AAAAe,8EAAA,4DAAA,WAAsCC,EAAEG,QAAQtB;AAAhD,AACE,oDAAKsB,SAAQ,6JAAA,3IAAItB,MAAK,CAAA,OAAY,AAACyB,wGAAOzB;;AAE5C,AAAAkB,8EAAA,0EAAA,WAA6CC,EAAEA,MAAEO;AAAjD,AACE,mEAAA,5DAACC,8CAAMC,6DACA,AAACC,6CACC,WAAAC;AAAA,AAAA,IAAAC,aAAAD;IAAAE,aAAA,AAAAC,4CAAAF,WAAA,IAAA;WAAA,AAAAE,4CAAAD,WAAA,IAAA,lEAAOE;WAAP,AAAAD,4CAAAF,WAAA,IAAA,lEAAaI;AAAb,AACE,QAAA,wDAAA,sIAAA,5IAAWD,cAAa,kDAAA,lDAACE,0DAAiB,AAACP,6CAAKQ,gBAAMF;GACxDT;;AAEX,AAAAR,8EAAA,0EAAA,WAA6CC,EAAEA,MAAEO;AAAjD,AACE,mEAAA,5DAACC,8CAAMC,6DACA,AAACC,6CACC,WAAAS;AAAA,AAAA,IAAAC,aAAAD;WAAA,AAAAL,4CAAAM,WAAA,IAAA,lEAAMC;WAAN,AAAAP,4CAAAM,WAAA,IAAA,lEAAWJ;AAAX,AACE,0DAAA,sIAAA,5IAAKK,cAAa,kDAAA,lDAACJ,0DAAiB,AAACP,6CAAKQ,gBAAMF;GAClDT;;AAEX,AAAAR,8EAAA,sFAAA,WAAqDC,EAAEA,MAAEnB;AAAzD,AACE,QAAA,+BAAoC,AAACyB,wGAAOzB","names":["var_args","G__46387","reitit.exception/fail!","js/Error","type","reitit.exception.fail_BANG_","data","cljs.core.ex_info","reitit.exception/get-message","e","cljs.core/ex-message","js/reitit","js/reitit.exception","js/reitit.exception.format-exception","method-table__4701__auto__","cljs.core.atom","prefer-table__4702__auto__","method-cache__4703__auto__","cached-hierarchy__4704__auto__","hierarchy__4705__auto__","cljs.core.get","fexpr__46388","cljs.core/MultiFn","cljs.core.symbol","reitit.exception/format-exception","_","reitit.exception/exception","cljs.core/ex-data","message","cljs.core.assoc","or__4212__auto__","cljs.core.pr_str","conflicts","cljs.core.apply","cljs.core/str","cljs.core.mapv","p__46389","vec__46390","vec__46393","cljs.core.nth","path","vals","clojure.string.join","cljs.core/first","p__46396","vec__46397","name"],"sourcesContent":["(ns reitit.exception\n  (:require [clojure.string :as str]))\n\n(defn fail!\n  ([type]\n   (fail! type nil))\n  ([type data]\n   (throw (ex-info (str type) {:type type, :data data}))))\n\n(defn get-message [e]\n  #?(:clj (.getMessage ^Exception e) :cljs (ex-message e)))\n\n(defmulti format-exception (fn [type _ _] type))\n\n(defn exception [e]\n  (let [data (ex-data e)\n        message (format-exception (:type data) (get-message e) (:data data))]\n    ;; there is a 3-arity version (+cause) of ex-info, but the default repl error message is taken from the cause\n    (ex-info message (assoc (or data {}) ::cause e))))\n\n;;\n;; Formatters\n;;\n\n(defmethod format-exception :default [_ message data]\n  (str message (if data (str \"\\n\\n\" (pr-str data)))))\n\n(defmethod format-exception :path-conflicts [_ _ conflicts]\n  (apply str \"Router contains conflicting route paths:\\n\\n\"\n         (mapv\n           (fn [[[path] vals]]\n             (str \"   \" path \"\\n-> \" (str/join \"\\n-> \" (mapv first vals)) \"\\n\\n\"))\n           conflicts)))\n\n(defmethod format-exception :name-conflicts [_ _ conflicts]\n  (apply str \"Router contains conflicting route names:\\n\\n\"\n         (mapv\n           (fn [[name vals]]\n             (str name \"\\n-> \" (str/join \"\\n-> \" (mapv first vals)) \"\\n\"))\n           conflicts)))\n\n(defmethod format-exception :reitit.impl/merge-data [_ _ data]\n  (str \"Error merging route-data\\n\\n\" (pr-str data)))\n"]}