{"version":3,"sources":["reagent/dom.cljs"],"mappings":"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","names":["js/reagent","js/reagent.dom","js/reagent.dom.roots","reagent.dom/roots","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","reagent.dom/unmount-comp","container","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/dissoc","js/module$node_modules$react_dom$index.unmountComponentAtNode","reagent.dom/render-comp","comp","callback","*always-update*-orig-val__41668","*always-update*-temp-val__41669","reagent.impl.util/*always-update*","G__41670","G__41671","G__41672","js/module$node_modules$react_dom$index.render","*always-update*-orig-val__41673","*always-update*-temp-val__41674","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","reagent.impl.batching/flush-after-render","reagent.dom/re-render-component","var_args","G__41676","reagent.dom/render","js/Error","reagent.dom.render.cljs$core$IFn$_invoke$arity$3","reagent.impl.template/default-compiler","callback-or-compiler","reagent.ratom/flush!","vec__41677","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","compiler","cljs.core/fn?","f","reagent.impl.protocols/as-element","reagent.dom/unmount-component-at-node","reagent.dom/dom-node","this","js/module$node_modules$react_dom$index.findDOMNode","reagent.dom/force-update-all","seq__41680","cljs.core/seq","cljs.core/deref","chunk__41681","count__41682","i__41683","vec__41690","temp__5735__auto__","cljs.core/chunked-seq?","c__4609__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__41693","cljs.core/first","cljs.core/next"],"sourcesContent":["(ns reagent.dom\n  (:require [react-dom :as react-dom]\n            [reagent.impl.util :as util]\n            [reagent.impl.template :as tmpl]\n            [reagent.impl.input :as input]\n            [reagent.impl.batching :as batch]\n            [reagent.impl.protocols :as p]\n            [reagent.ratom :as ratom]))\n\n(defonce ^:private roots (atom {}))\n\n(defn- unmount-comp [container]\n  (swap! roots dissoc container)\n  (react-dom/unmountComponentAtNode container))\n\n(defn- render-comp [comp container callback]\n  (binding [util/*always-update* true]\n    (react-dom/render (comp) container\n      (fn []\n        (binding [util/*always-update* false]\n          (swap! roots assoc container comp)\n          (batch/flush-after-render)\n          (if (some? callback)\n            (callback)))))))\n\n(defn- re-render-component [comp container]\n  (render-comp comp container nil))\n\n(defn render\n  \"Render a Reagent component into the DOM. The first argument may be\n  either a vector (using Reagent's Hiccup syntax), or a React element.\n  The second argument should be a DOM node.\n\n  Optionally takes a callback that is called when the component is in place.\n\n  Returns the mounted component instance.\"\n  ([comp container]\n   (render comp container tmpl/default-compiler))\n  ([comp container callback-or-compiler]\n   (ratom/flush!)\n   (let [[compiler callback] (if (fn? callback-or-compiler)\n                               [tmpl/default-compiler callback-or-compiler]\n                               ;; TODO: Callback option doesn't make sense now that\n                               ;; val is compiler object, not map.\n                               [callback-or-compiler (:callback callback-or-compiler)])\n         f (fn []\n             (p/as-element compiler (if (fn? comp) (comp) comp)))]\n     (render-comp f container callback))))\n\n(defn unmount-component-at-node\n  \"Remove a component from the given DOM node.\"\n  [container]\n  (unmount-comp container))\n\n(defn dom-node\n  \"Returns the root DOM node of a mounted component.\"\n  [this]\n  (react-dom/findDOMNode this))\n\n(defn force-update-all\n  \"Force re-rendering of all mounted Reagent components. This is\n  probably only useful in a development environment, when you want to\n  update components in response to some dynamic changes to code.\n\n  Note that force-update-all may not update root components. This\n  happens if a component 'foo' is mounted with `(render [foo])` (since\n  functions are passed by value, and not by reference, in\n  ClojureScript). To get around this you'll have to introduce a layer\n  of indirection, for example by using `(render [#'foo])` instead.\"\n  []\n  (ratom/flush!)\n  (doseq [[container comp] @roots]\n    (re-render-component comp container))\n  (batch/flush-after-render))\n"]}