{"version":3,"sources":["reagent/impl/template.cljs"],"mappings":"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","names":["reagent.impl.template/re-tag","this__4428__auto__","writer__4429__auto__","opt__4430__auto__","cljs.core/-write","reagent.impl.template/NativeWrapper","reagent.impl.template/->NativeWrapper","tag","id","className","reagent.impl.template/adapt-react-class","c","reagent.impl.template/hiccup-tag?","x","reagent.impl.util/named?","reagent.impl.template/valid-tag?","cljs.core/ifn?","reagent.impl.template/prop-name-cache","reagent.impl.template/cache-get","o","k","goog.object/get","reagent.impl.template/cached-prop-name","temp__5737__auto__","k'","cljs.core/name","v","reagent.impl.util/dash-to-prop-name","G__39740","G__39741","G__39742","goog.object/set","reagent.impl.template/kv-conv","G__39743","G__39744","G__39745","G__39746","reagent.impl.template/convert-prop-value","reagent.impl.util/js-val?","cljs.core/map?","cljs.core/reduce-kv","cljs.core/coll?","cljs.core/clj->js","args","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","reagent.impl.template/custom-prop-name-cache","reagent.impl.template/cached-custom-prop-name","G__39752","G__39753","G__39754","reagent.impl.template/custom-kv-conv","G__39755","G__39758","G__39759","G__39760","reagent.impl.template/convert-custom-prop-value","reagent.impl.template/set-id-class","props","id-class","class","G__39761","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","reagent.impl.util.class_names.cljs$core$IFn$_invoke$arity$2","or__4185__auto__","reagent.impl.template/convert-props","G__39762","reagent.impl.util.class_names.cljs$core$IFn$_invoke$arity$1","reagent.impl.template/make-element","this","argv","component","jsprops","first-child","G__39763","cljs.core/count","js/module$node_modules$react$index.createElement","G__39764","G__39765","G__39766","reagent.impl.protocols/as-element","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","a","reagent.impl.template/HiccupTag","reagent.impl.template/->HiccupTag","custom","reagent.impl.template/parse-tag","hiccup-tag","vec__39767","cljs.core/re-matches","cljs.core/next","clojure.string/replace","js/Error","reagent.impl.component/comp-name","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","reagent.impl.template/reag-element","compiler","reagent.impl.component/as-class","temp__5739__auto__","key","reagent.impl.util/react-key-from-vec","reagent.impl.template/function-element","first-arg","cljs.core.subvec.cljs$core$IFn$_invoke$arity$2","G__39770","G__39771","reagent.impl.component/functional-render-fn","reagent.impl.template/maybe-function-element","reagent.impl.component/react-class?","reagent.impl.template/fragment-element","hasprops","reagent.impl.protocols/make-element","js/module$node_modules$react$index.Fragment","reagent.impl.template/tag-name-cache","reagent.impl.template/cached-parse","s","reagent.impl.template/native-element","parsed","first","reagent.impl.input/input-component?","input-class","reagent.impl.component/create-class","reagent.impl.input/input-spec","cljs.core/with-meta","cljs.core/meta","reagent.impl.util/get-react-key","reagent.impl.template/raw-element","comp","reagent.impl.template/expand-seq","cljs.core.into_array.cljs$core$IFn$_invoke$arity$1","p1__39772#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","reagent.impl.template/expand-seq-dev","val","cljs.core/vector?","reagent.impl.template/expand-seq-check","vec__39773","ctx","res","derefed","reagent.ratom/check-derefs","reagent.debug/has-console","reagent.debug/tracking","reagent.debug/track-console","js/console","reagent.impl.util.hiccup_err.cljs$core$IFn$_invoke$arity$variadic","reagent.impl.template/hiccup-element","n","pos","G__39776","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","reagent.impl.template/vec-to-elem","fn-to-element","js/console.error","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","G__39777","cljs.core/Keyword","reagent.impl.template/as-element","cljs.core/seq?","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","cljs.core/IPrintWithWriter","reagent.impl.template/create-compiler","opts","cljs.core.gensym.cljs$core$IFn$_invoke$arity$0","js/reagent","js/reagent.impl","js/reagent.impl.template","js/reagent.impl.template.t_reagent$impl$template39779","reagent.impl.template/t_reagent$impl$template39779","_39781","meta39780","reagent.impl.template/->t_reagent$impl$template39779","reagent.impl.template/default-compiler*","reagent.impl.template/default-compiler","reagent.impl.template/set-default-compiler!"],"sourcesContent":["(ns reagent.impl.template\n  (:require [react :as react]\n            [clojure.string :as string]\n            [reagent.impl.util :as util :refer [named?]]\n            [reagent.impl.component :as comp]\n            [reagent.impl.batching :as batch]\n            [reagent.impl.input :as input]\n            [reagent.impl.protocols :as p]\n            [reagent.ratom :as ratom]\n            [reagent.debug :refer-macros [dev? warn]]\n            [goog.object :as gobj]))\n\n;; From Weavejester's Hiccup, via pump:\n(def ^{:doc \"Regular expression that parses a CSS-style id and class\n             from a tag name.\"}\n  re-tag #\"([^\\s\\.#]+)(?:#([^\\s\\.#]+))?(?:\\.([^\\s#]+))?\")\n\n(deftype NativeWrapper [tag id className])\n\n(defn adapt-react-class\n  [c]\n  (->NativeWrapper c nil nil))\n\n;;; Common utilities\n\n(defn ^boolean hiccup-tag? [x]\n  (or (named? x)\n      (string? x)))\n\n(defn ^boolean valid-tag? [x]\n  (or (hiccup-tag? x)\n      (ifn? x)\n      (instance? NativeWrapper x)))\n\n;;; Props conversion\n\n;; TODO: Move prop-name caches to the compiler object, if this\n;; conversion can be configured.\n\n(def prop-name-cache #js{:class \"className\"\n                         :for \"htmlFor\"\n                         :charset \"charSet\"})\n\n(defn cache-get [o k]\n  (when ^boolean (.hasOwnProperty o k)\n    (gobj/get o k)))\n\n(defn cached-prop-name [k]\n  (if (named? k)\n    (if-some [k' (cache-get prop-name-cache (name k))]\n      k'\n      (let [v (util/dash-to-prop-name k)]\n        (gobj/set prop-name-cache (name k) v)\n        v))\n    k))\n\n(declare convert-prop-value)\n\n(defn kv-conv [o k v]\n  (doto o\n    (gobj/set (cached-prop-name k) (convert-prop-value v))))\n\n(defn convert-prop-value [x]\n  (cond (util/js-val? x) x\n        (named? x) (name x)\n        (map? x) (reduce-kv kv-conv #js{} x)\n        (coll? x) (clj->js x)\n        (ifn? x) (fn [& args]\n                   (apply x args))\n        :else (clj->js x)))\n\n;; Previous few functions copied for custom elements,\n;; without mapping from class to className etc.\n\n(def custom-prop-name-cache #js{})\n\n(defn cached-custom-prop-name [k]\n  (if (named? k)\n    (if-some [k' (cache-get custom-prop-name-cache (name k))]\n      k'\n      (let [v (util/dash-to-prop-name k)]\n        (gobj/set custom-prop-name-cache (name k) v)\n        v))\n    k))\n\n(defn custom-kv-conv [o k v]\n  (doto o\n    (gobj/set (cached-custom-prop-name k) (convert-prop-value v))))\n\n(defn convert-custom-prop-value [x]\n  (cond (util/js-val? x) x\n        (named? x) (name x)\n        (map? x) (reduce-kv custom-kv-conv #js{} x)\n        (coll? x) (clj->js x)\n        (ifn? x) (fn [& args]\n                   (apply x args))\n        :else (clj->js x)))\n\n(defn set-id-class\n  \"Takes the id and class from tag keyword, and adds them to the\n  other props. Parsed tag is JS object with :id and :class properties.\"\n  [props id-class]\n  (let [id (.-id id-class)\n        class (.-className id-class)]\n    (cond-> props\n      ;; Only use ID from tag keyword if no :id in props already\n      (and (some? id)\n           (nil? (:id props)))\n      (assoc :id id)\n\n      ;; Merge classes\n      class\n      ;; Note: someone might use React-style :className property,\n      ;; this is the only place where that needs special case. Using\n      ;; :class and :className together is not supported.\n      (assoc :class (util/class-names class (or (:class props) (:className props)))))))\n\n(defn convert-props [props ^clj id-class]\n  (let [class (:class props)\n        props (-> props\n                  (cond-> class (assoc :class (util/class-names class)))\n                  (set-id-class id-class))]\n    (if (.-custom id-class)\n      (convert-custom-prop-value props)\n      (convert-prop-value props))))\n\n;;; Conversion from Hiccup forms\n\n(defn make-element [this argv component jsprops first-child]\n  (case (- (count argv) first-child)\n    ;; Optimize cases of zero or one child\n    0 (react/createElement component jsprops)\n\n    1 (react/createElement component jsprops\n                           (p/as-element this (nth argv first-child nil)))\n\n    (.apply react/createElement nil\n            (reduce-kv (fn [a k v]\n                         (when (>= k first-child)\n                          (.push a (p/as-element this v)))\n                         a)\n                       #js [component jsprops] argv))))\n\n(deftype HiccupTag [tag id className custom])\n\n(defn parse-tag [hiccup-tag]\n  (let [[tag id className] (->> hiccup-tag name (re-matches re-tag) next)\n        className (when-not (nil? className)\n                    (string/replace className #\"\\.\" \" \"))]\n    (assert tag (str \"Invalid tag: '\" hiccup-tag \"'\" (comp/comp-name)))\n    (->HiccupTag tag\n                 id\n                 className\n                 ;; Custom element names must contain hyphen\n                 ;; https://www.w3.org/TR/custom-elements/#custom-elements-core-concepts\n                 (not= -1 (.indexOf tag \"-\")))))\n\n(defn reag-element [tag v compiler]\n  (let [c (comp/as-class tag compiler)\n        jsprops #js {}]\n    (set! (.-argv jsprops) v)\n    (when-some [key (util/react-key-from-vec v)]\n      (set! (.-key jsprops) key))\n    (react/createElement c jsprops)))\n\n(defn function-element [tag v first-arg compiler]\n  (let [jsprops #js {}]\n    (set! (.-reagentRender jsprops) tag)\n    (set! (.-argv jsprops) (subvec v first-arg))\n    ; (set! (.-opts jsprops) opts)\n    (when-some [key (util/react-key-from-vec v)]\n      (set! (.-key jsprops) key))\n    (react/createElement (comp/functional-render-fn compiler tag) jsprops)))\n\n(defn maybe-function-element\n  \"If given tag is a Class, use it as a class,\n  else wrap in Reagent function wrapper.\"\n  [tag v compiler]\n  (if (comp/react-class? tag)\n    (reag-element tag v compiler)\n    (function-element tag v 1 compiler)))\n\n(defn fragment-element [argv compiler]\n  (let [props (nth argv 1 nil)\n        hasprops (or (nil? props) (map? props))\n        jsprops (or (convert-prop-value (if hasprops props))\n                    #js {})\n        first-child (+ 1 (if hasprops 1 0))]\n    (when-some [key (util/react-key-from-vec argv)]\n      (set! (.-key jsprops) key))\n    (p/make-element compiler argv react/Fragment jsprops first-child)))\n\n(def tag-name-cache #js {})\n\n(defn cached-parse [x]\n  (if-some [s (cache-get tag-name-cache x)]\n    s\n    (let [v (parse-tag x)]\n      (gobj/set tag-name-cache x v)\n      v)))\n\n(defn native-element [parsed argv first compiler]\n  (let [component (.-tag parsed)\n        props (nth argv first nil)\n        hasprops (or (nil? props) (map? props))\n        jsprops (or (convert-props (if hasprops props) parsed)\n                    #js {})\n        first-child (+ first (if hasprops 1 0))]\n    (if (input/input-component? component)\n      (let [input-class (or (.-reagentInput compiler)\n                            (let [x (comp/create-class input/input-spec compiler)]\n                              (set! (.-reagentInput compiler) x)\n                              x))]\n        (-> [input-class argv component jsprops first-child compiler]\n            (with-meta (meta argv))\n            (->> (p/as-element compiler))))\n      (do\n        (when-some [key (-> (meta argv) util/get-react-key)]\n          (set! (.-key jsprops) key))\n        (p/make-element compiler argv component jsprops first-child)))))\n\n(defn raw-element [comp argv compiler]\n  (let [props (nth argv 2 nil)\n        jsprops (or props #js {})]\n    (when-some [key (-> (meta argv) util/get-react-key)]\n      (set! (.-key jsprops) key))\n    (p/make-element compiler argv comp jsprops 3)))\n\n(defn expand-seq [s compiler]\n  (into-array (map #(p/as-element compiler %) s)))\n\n(defn expand-seq-dev [s ^clj o compiler]\n  (into-array (map (fn [val]\n                     (when (and (vector? val)\n                                (nil? (util/react-key-from-vec val)))\n                       (set! (.-no-key o) true))\n                     (p/as-element compiler val))\n                   s)))\n\n(defn expand-seq-check [x compiler]\n  (let [ctx #js {}\n        [res derefed] (ratom/check-derefs #(expand-seq-dev x ctx compiler))]\n    (when derefed\n      (warn (util/hiccup-err x (comp/comp-name) \"Reactive deref not supported in lazy seq, \"\n                        \"it should be wrapped in doall\")))\n    (when (.-no-key ctx)\n      (warn (util/hiccup-err x (comp/comp-name) \"Every element in a seq should have a unique :key\")))\n    res))\n\n(defn hiccup-element [v compiler]\n  (let [tag (nth v 0 nil)\n        n (name tag)\n        pos (.indexOf n \">\")]\n    (case pos\n      -1 (native-element (cached-parse n) v 1 compiler)\n      0 (assert (= \">\" n) (util/hiccup-err v (comp/comp-name) \"Invalid Hiccup tag\"))\n      ;; Support extended hiccup syntax, i.e :div.bar>a.foo\n      ;; Apply metadata (e.g. :key) to the outermost element.\n      ;; Metadata is probably used only with sequeneces, and in that case\n      ;; only the key of the outermost element matters.\n      (recur (with-meta [(subs n 0 pos)\n                         (assoc (with-meta v nil) 0 (subs n (inc pos)))]\n                        (meta v))\n             compiler))))\n\n(defn vec-to-elem [v compiler fn-to-element]\n  (when (nil? compiler)\n    (js/console.error \"vec-to-elem\" (pr-str v)))\n  (assert (pos? (count v)) (util/hiccup-err v (comp/comp-name) \"Hiccup form should not be empty\"))\n  (let [tag (nth v 0 nil)]\n    (assert (valid-tag? tag) (util/hiccup-err v (comp/comp-name) \"Invalid Hiccup form\"))\n    (case tag\n      :> (native-element (->HiccupTag (nth v 1 nil) nil nil nil) v 2 compiler)\n      :r> (raw-element (nth v 1 nil) v compiler)\n      :f> (function-element (nth v 1 nil) v 2 compiler)\n      :<> (fragment-element v compiler)\n      (cond\n       (hiccup-tag? tag)\n       (hiccup-element v compiler)\n\n       (instance? NativeWrapper tag)\n       (native-element tag v 1 compiler)\n\n       :else (fn-to-element tag v compiler)))))\n\n(defn as-element [this x fn-to-element]\n  (cond (util/js-val? x) x\n        (vector? x) (vec-to-elem x this fn-to-element)\n        (seq? x) (if (dev?)\n                   (expand-seq-check x this)\n                   (expand-seq x this))\n        (named? x) (name x)\n        (satisfies? IPrintWithWriter x) (pr-str x)\n        :else x))\n\n(defn create-compiler [opts]\n  (let [id (gensym)\n        fn-to-element (if (:function-components opts)\n                        maybe-function-element\n                        reag-element)]\n    (reify p/Compiler\n      ;; This is used to as cache key to cache component fns per compiler\n      (get-id [this] id)\n      (as-element [this x]\n        (as-element this x fn-to-element))\n      (make-element [this argv component jsprops first-child]\n        (make-element this argv component jsprops first-child)))))\n\n(def default-compiler* (create-compiler {}))\n(def ^:dynamic default-compiler default-compiler*)\n\n(defn set-default-compiler! [compiler]\n  (set! default-compiler compiler))\n"]}