{:paths ["scripts"]
 :tasks {:requires ([babashka.fs :as fs]
                    [clojure.string :as str])
         :init (do (def log (Object.))
                   (defn s [c]
                     (println "shell: '" c "'")
                     (shell c)))
         :enter (locking log (println
                               (str "Running: "
                                    (:name (current-task)) ":")
                               (java.util.Date.)))

         ;; -clj-files (map str (fs/glob "." "**{.clj,cljc}"))

         ;; -bump-count {:requires ([fileatom])
         ;;              :task (fileatom/swap! release-counter (fnil inc 0))}

         ;; all-env {:doc "Prints environment var"
         ;;          :task (clojure.pprint/pprint (System/env))}
         ;; env {:doc "Prints environment var"
         ;;      :task (System/getenv (first *command-line-args*))}
         -prod-build (shell "shadow-cljs release :app")
         -push-code (let [date (str/trim (:out (deref (shell {:out :string} "date"))))] (shell "git add -A")
                         (s (str "git commit -am 'commited at:" date "'"))
                         (s "git push"))
         inject-service-worker (do (spit "./works/rp/index.html"
                                         (str/replace (slurp "./works/rp/roguelite_platformer.html")
                                                      "<script src=\"roguelite_platformer.js\"></script>"
                                                      (str "<script src=\"roguelite_platformer.js\"></script>" "\n
                                            <script>
                                              if ('serviceWorker' in navigator) {
                                                navigator.serviceWorker.register('service-worker.js');
                                              }
                                            </script>")))
                                   (spit "./works/rp/service-worker.js"
                                         "// service-worker.js
                          self.addEventListener('install', function(event) {
                            self.skipWaiting();
                          });

                          self.addEventListener('activate', function(event) {
                            event.waitUntil(self.clients.claim());
                          });

                          self.addEventListener('fetch', function(event) {
                            event.respondWith(
                              fetch(event.request).then(function(response) {
                                const newHeaders = new Headers(response.headers);
                                newHeaders.set('Cross-Origin-Opener-Policy', 'same-origin');
                                newHeaders.set('Cross-Origin-Embedder-Policy', 'require-corp');

                                return new Response(response.body, {
                                  status: response.status,
                                  statusText: response.statusText,
                                  headers: newHeaders
                                });
                              })
                            );
                          });"))
         deploy-rp (do
                     (println "Deploying roguelite_platformer")
                     (println "make sure you just exported the game.")
                     (s "cp -r /Users/bcm/dv/roguelite_platformer/out ./works/rp")
                     (run "inject-service-worker")
                     (run "no-build-release"))
         release (do (run "-prod-build") (run "-push-code"))
         no-build-release (run "-push-code")}}
