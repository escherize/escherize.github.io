["^ ","~:output",["^ ","~:js","goog.provide('re_frame.fx');\ngoog.require('cljs.core');\ngoog.require('re_frame.router');\ngoog.require('re_frame.db');\ngoog.require('re_frame.interceptor');\ngoog.require('re_frame.interop');\ngoog.require('re_frame.events');\ngoog.require('re_frame.registrar');\ngoog.require('re_frame.loggers');\ngoog.require('re_frame.trace');\nre_frame.fx.kind = new cljs.core.Keyword(null,\"fx\",\"fx\",-1237829572);\nif(cljs.core.truth_((re_frame.registrar.kinds.cljs$core$IFn$_invoke$arity$1 ? re_frame.registrar.kinds.cljs$core$IFn$_invoke$arity$1(re_frame.fx.kind) : re_frame.registrar.kinds.call(null,re_frame.fx.kind)))){\n} else {\nthrow (new Error(\"Assert failed: (re-frame.registrar/kinds kind)\"));\n}\n/**\n * Register the given effect `handler` for the given `id`.\n * \n *   `id` is keyword, often namespaced.\n *   `handler` is a side-effecting function which takes a single argument and whose return\n *   value is ignored.\n * \n *   Example Use\n *   -----------\n * \n *   First, registration ... associate `:effect2` with a handler.\n * \n *   (reg-fx\n *   :effect2\n *   (fn [value]\n *      ... do something side-effect-y))\n * \n *   Then, later, if an event handler were to return this effects map ...\n * \n *   {...\n * :effect2  [1 2]}\n * \n * ... then the `handler` `fn` we registered previously, using `reg-fx`, will be\n * called with an argument of `[1 2]`.\n */\nre_frame.fx.reg_fx = (function re_frame$fx$reg_fx(id,handler){\nreturn re_frame.registrar.register_handler(re_frame.fx.kind,id,handler);\n});\n/**\n * An interceptor whose `:after` actions the contents of `:effects`. As a result,\n *   this interceptor is Domino 3.\n * \n *   This interceptor is silently added (by reg-event-db etc) to the front of\n *   interceptor chains for all events.\n * \n *   For each key in `:effects` (a map), it calls the registered `effects handler`\n *   (see `reg-fx` for registration of effect handlers).\n * \n *   So, if `:effects` was:\n *    {:dispatch  [:hello 42]\n *     :db        {...}\n *     :undo      \"set flag\"}\n * \n *   it will call the registered effect handlers for each of the map's keys:\n *   `:dispatch`, `:undo` and `:db`. When calling each handler, provides the map\n *   value for that key - so in the example above the effect handler for :dispatch\n *   will be given one arg `[:hello 42]`.\n * \n *   You cannot rely on the ordering in which effects are executed.\n */\nre_frame.fx.do_fx = re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"do-fx\",\"do-fx\",1194163050),new cljs.core.Keyword(null,\"after\",\"after\",594996914),(function re_frame$fx$do_fx_after(context){\nif(re_frame.trace.is_trace_enabled_QMARK_()){\nvar _STAR_current_trace_STAR__orig_val__27721 = re_frame.trace._STAR_current_trace_STAR_;\nvar _STAR_current_trace_STAR__temp_val__27722 = re_frame.trace.start_trace(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"op-type\",\"op-type\",-1636141668),new cljs.core.Keyword(\"event\",\"do-fx\",\"event/do-fx\",1357330452)], null));\nre_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__temp_val__27722;\n\ntry{try{var seq__27723 = cljs.core.seq(new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292).cljs$core$IFn$_invoke$arity$1(context));\nvar chunk__27724 = null;\nvar count__27725 = (0);\nvar i__27726 = (0);\nwhile(true){\nif((i__27726 < count__27725)){\nvar vec__27733 = chunk__27724.cljs$core$IIndexed$_nth$arity$2(null,i__27726);\nvar effect_key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__27733,(0),null);\nvar effect_value = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__27733,(1),null);\nvar temp__5718__auto___27775 = re_frame.registrar.get_handler.cljs$core$IFn$_invoke$arity$3(re_frame.fx.kind,effect_key,false);\nif(cljs.core.truth_(temp__5718__auto___27775)){\nvar effect_fn_27776 = temp__5718__auto___27775;\n(effect_fn_27776.cljs$core$IFn$_invoke$arity$1 ? effect_fn_27776.cljs$core$IFn$_invoke$arity$1(effect_value) : effect_fn_27776.call(null,effect_value));\n} else {\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: no handler registered for effect:\",effect_key,\". Ignoring.\"], 0));\n}\n\n\nvar G__27777 = seq__27723;\nvar G__27778 = chunk__27724;\nvar G__27779 = count__27725;\nvar G__27780 = (i__27726 + (1));\nseq__27723 = G__27777;\nchunk__27724 = G__27778;\ncount__27725 = G__27779;\ni__27726 = G__27780;\ncontinue;\n} else {\nvar temp__5720__auto__ = cljs.core.seq(seq__27723);\nif(temp__5720__auto__){\nvar seq__27723__$1 = temp__5720__auto__;\nif(cljs.core.chunked_seq_QMARK_(seq__27723__$1)){\nvar c__4550__auto__ = cljs.core.chunk_first(seq__27723__$1);\nvar G__27781 = cljs.core.chunk_rest(seq__27723__$1);\nvar G__27782 = c__4550__auto__;\nvar G__27783 = cljs.core.count(c__4550__auto__);\nvar G__27784 = (0);\nseq__27723 = G__27781;\nchunk__27724 = G__27782;\ncount__27725 = G__27783;\ni__27726 = G__27784;\ncontinue;\n} else {\nvar vec__27736 = cljs.core.first(seq__27723__$1);\nvar effect_key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__27736,(0),null);\nvar effect_value = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__27736,(1),null);\nvar temp__5718__auto___27785 = re_frame.registrar.get_handler.cljs$core$IFn$_invoke$arity$3(re_frame.fx.kind,effect_key,false);\nif(cljs.core.truth_(temp__5718__auto___27785)){\nvar effect_fn_27786 = temp__5718__auto___27785;\n(effect_fn_27786.cljs$core$IFn$_invoke$arity$1 ? effect_fn_27786.cljs$core$IFn$_invoke$arity$1(effect_value) : effect_fn_27786.call(null,effect_value));\n} else {\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: no handler registered for effect:\",effect_key,\". Ignoring.\"], 0));\n}\n\n\nvar G__27787 = cljs.core.next(seq__27723__$1);\nvar G__27788 = null;\nvar G__27789 = (0);\nvar G__27790 = (0);\nseq__27723 = G__27787;\nchunk__27724 = G__27788;\ncount__27725 = G__27789;\ni__27726 = G__27790;\ncontinue;\n}\n} else {\nreturn null;\n}\n}\nbreak;\n}\n}finally {if(re_frame.trace.is_trace_enabled_QMARK_()){\nvar end__26580__auto___27791 = re_frame.interop.now();\nvar duration__26581__auto___27792 = (end__26580__auto___27791 - new cljs.core.Keyword(null,\"start\",\"start\",-355208981).cljs$core$IFn$_invoke$arity$1(re_frame.trace._STAR_current_trace_STAR_));\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(re_frame.trace.traces,cljs.core.conj,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"duration\",\"duration\",1444101068),duration__26581__auto___27792,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"end\",\"end\",-268185958),re_frame.interop.now()], 0)));\n\nre_frame.trace.run_tracing_callbacks_BANG_(end__26580__auto___27791);\n} else {\n}\n}}finally {re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__orig_val__27721;\n}} else {\nvar seq__27739 = cljs.core.seq(new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292).cljs$core$IFn$_invoke$arity$1(context));\nvar chunk__27740 = null;\nvar count__27741 = (0);\nvar i__27742 = (0);\nwhile(true){\nif((i__27742 < count__27741)){\nvar vec__27749 = chunk__27740.cljs$core$IIndexed$_nth$arity$2(null,i__27742);\nvar effect_key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__27749,(0),null);\nvar effect_value = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__27749,(1),null);\nvar temp__5718__auto___27793 = re_frame.registrar.get_handler.cljs$core$IFn$_invoke$arity$3(re_frame.fx.kind,effect_key,false);\nif(cljs.core.truth_(temp__5718__auto___27793)){\nvar effect_fn_27794 = temp__5718__auto___27793;\n(effect_fn_27794.cljs$core$IFn$_invoke$arity$1 ? effect_fn_27794.cljs$core$IFn$_invoke$arity$1(effect_value) : effect_fn_27794.call(null,effect_value));\n} else {\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: no handler registered for effect:\",effect_key,\". Ignoring.\"], 0));\n}\n\n\nvar G__27795 = seq__27739;\nvar G__27796 = chunk__27740;\nvar G__27797 = count__27741;\nvar G__27798 = (i__27742 + (1));\nseq__27739 = G__27795;\nchunk__27740 = G__27796;\ncount__27741 = G__27797;\ni__27742 = G__27798;\ncontinue;\n} else {\nvar temp__5720__auto__ = cljs.core.seq(seq__27739);\nif(temp__5720__auto__){\nvar seq__27739__$1 = temp__5720__auto__;\nif(cljs.core.chunked_seq_QMARK_(seq__27739__$1)){\nvar c__4550__auto__ = cljs.core.chunk_first(seq__27739__$1);\nvar G__27800 = cljs.core.chunk_rest(seq__27739__$1);\nvar G__27801 = c__4550__auto__;\nvar G__27802 = cljs.core.count(c__4550__auto__);\nvar G__27803 = (0);\nseq__27739 = G__27800;\nchunk__27740 = G__27801;\ncount__27741 = G__27802;\ni__27742 = G__27803;\ncontinue;\n} else {\nvar vec__27752 = cljs.core.first(seq__27739__$1);\nvar effect_key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__27752,(0),null);\nvar effect_value = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__27752,(1),null);\nvar temp__5718__auto___27805 = re_frame.registrar.get_handler.cljs$core$IFn$_invoke$arity$3(re_frame.fx.kind,effect_key,false);\nif(cljs.core.truth_(temp__5718__auto___27805)){\nvar effect_fn_27806 = temp__5718__auto___27805;\n(effect_fn_27806.cljs$core$IFn$_invoke$arity$1 ? effect_fn_27806.cljs$core$IFn$_invoke$arity$1(effect_value) : effect_fn_27806.call(null,effect_value));\n} else {\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: no handler registered for effect:\",effect_key,\". Ignoring.\"], 0));\n}\n\n\nvar G__27807 = cljs.core.next(seq__27739__$1);\nvar G__27808 = null;\nvar G__27809 = (0);\nvar G__27810 = (0);\nseq__27739 = G__27807;\nchunk__27740 = G__27808;\ncount__27741 = G__27809;\ni__27742 = G__27810;\ncontinue;\n}\n} else {\nreturn null;\n}\n}\nbreak;\n}\n}\n})], 0));\nre_frame.fx.reg_fx(new cljs.core.Keyword(null,\"dispatch-later\",\"dispatch-later\",291951390),(function (value){\nvar seq__27755 = cljs.core.seq(cljs.core.remove.cljs$core$IFn$_invoke$arity$2(cljs.core.nil_QMARK_,value));\nvar chunk__27756 = null;\nvar count__27757 = (0);\nvar i__27758 = (0);\nwhile(true){\nif((i__27758 < count__27757)){\nvar map__27763 = chunk__27756.cljs$core$IIndexed$_nth$arity$2(null,i__27758);\nvar map__27763__$1 = (((((!((map__27763 == null))))?(((((map__27763.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__27763.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__27763):map__27763);\nvar effect = map__27763__$1;\nvar ms = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__27763__$1,new cljs.core.Keyword(null,\"ms\",\"ms\",-1152709733));\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__27763__$1,new cljs.core.Keyword(null,\"dispatch\",\"dispatch\",1319337009));\nif(((cljs.core.empty_QMARK_(dispatch)) || ((!(typeof ms === 'number'))))){\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: ignoring bad :dispatch-later value:\",effect], 0));\n} else {\nre_frame.interop.set_timeout_BANG_(((function (seq__27755,chunk__27756,count__27757,i__27758,map__27763,map__27763__$1,effect,ms,dispatch){\nreturn (function (){\nreturn re_frame.router.dispatch(dispatch);\n});})(seq__27755,chunk__27756,count__27757,i__27758,map__27763,map__27763__$1,effect,ms,dispatch))\n,ms);\n}\n\n\nvar G__27812 = seq__27755;\nvar G__27813 = chunk__27756;\nvar G__27814 = count__27757;\nvar G__27815 = (i__27758 + (1));\nseq__27755 = G__27812;\nchunk__27756 = G__27813;\ncount__27757 = G__27814;\ni__27758 = G__27815;\ncontinue;\n} else {\nvar temp__5720__auto__ = cljs.core.seq(seq__27755);\nif(temp__5720__auto__){\nvar seq__27755__$1 = temp__5720__auto__;\nif(cljs.core.chunked_seq_QMARK_(seq__27755__$1)){\nvar c__4550__auto__ = cljs.core.chunk_first(seq__27755__$1);\nvar G__27817 = cljs.core.chunk_rest(seq__27755__$1);\nvar G__27818 = c__4550__auto__;\nvar G__27819 = cljs.core.count(c__4550__auto__);\nvar G__27820 = (0);\nseq__27755 = G__27817;\nchunk__27756 = G__27818;\ncount__27757 = G__27819;\ni__27758 = G__27820;\ncontinue;\n} else {\nvar map__27765 = cljs.core.first(seq__27755__$1);\nvar map__27765__$1 = (((((!((map__27765 == null))))?(((((map__27765.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__27765.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__27765):map__27765);\nvar effect = map__27765__$1;\nvar ms = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__27765__$1,new cljs.core.Keyword(null,\"ms\",\"ms\",-1152709733));\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__27765__$1,new cljs.core.Keyword(null,\"dispatch\",\"dispatch\",1319337009));\nif(((cljs.core.empty_QMARK_(dispatch)) || ((!(typeof ms === 'number'))))){\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: ignoring bad :dispatch-later value:\",effect], 0));\n} else {\nre_frame.interop.set_timeout_BANG_(((function (seq__27755,chunk__27756,count__27757,i__27758,map__27765,map__27765__$1,effect,ms,dispatch,seq__27755__$1,temp__5720__auto__){\nreturn (function (){\nreturn re_frame.router.dispatch(dispatch);\n});})(seq__27755,chunk__27756,count__27757,i__27758,map__27765,map__27765__$1,effect,ms,dispatch,seq__27755__$1,temp__5720__auto__))\n,ms);\n}\n\n\nvar G__27821 = cljs.core.next(seq__27755__$1);\nvar G__27822 = null;\nvar G__27823 = (0);\nvar G__27824 = (0);\nseq__27755 = G__27821;\nchunk__27756 = G__27822;\ncount__27757 = G__27823;\ni__27758 = G__27824;\ncontinue;\n}\n} else {\nreturn null;\n}\n}\nbreak;\n}\n}));\nre_frame.fx.reg_fx(new cljs.core.Keyword(null,\"dispatch\",\"dispatch\",1319337009),(function (value){\nif((!(cljs.core.vector_QMARK_(value)))){\nreturn re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: ignoring bad :dispatch value. Expected a vector, but got:\",value], 0));\n} else {\nreturn re_frame.router.dispatch(value);\n}\n}));\nre_frame.fx.reg_fx(new cljs.core.Keyword(null,\"dispatch-n\",\"dispatch-n\",-504469236),(function (value){\nif((!(cljs.core.sequential_QMARK_(value)))){\nreturn re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: ignoring bad :dispatch-n value. Expected a collection, but got:\",value], 0));\n} else {\nvar seq__27767 = cljs.core.seq(cljs.core.remove.cljs$core$IFn$_invoke$arity$2(cljs.core.nil_QMARK_,value));\nvar chunk__27768 = null;\nvar count__27769 = (0);\nvar i__27770 = (0);\nwhile(true){\nif((i__27770 < count__27769)){\nvar event = chunk__27768.cljs$core$IIndexed$_nth$arity$2(null,i__27770);\nre_frame.router.dispatch(event);\n\n\nvar G__27827 = seq__27767;\nvar G__27828 = chunk__27768;\nvar G__27829 = count__27769;\nvar G__27830 = (i__27770 + (1));\nseq__27767 = G__27827;\nchunk__27768 = G__27828;\ncount__27769 = G__27829;\ni__27770 = G__27830;\ncontinue;\n} else {\nvar temp__5720__auto__ = cljs.core.seq(seq__27767);\nif(temp__5720__auto__){\nvar seq__27767__$1 = temp__5720__auto__;\nif(cljs.core.chunked_seq_QMARK_(seq__27767__$1)){\nvar c__4550__auto__ = cljs.core.chunk_first(seq__27767__$1);\nvar G__27831 = cljs.core.chunk_rest(seq__27767__$1);\nvar G__27832 = c__4550__auto__;\nvar G__27833 = cljs.core.count(c__4550__auto__);\nvar G__27834 = (0);\nseq__27767 = G__27831;\nchunk__27768 = G__27832;\ncount__27769 = G__27833;\ni__27770 = G__27834;\ncontinue;\n} else {\nvar event = cljs.core.first(seq__27767__$1);\nre_frame.router.dispatch(event);\n\n\nvar G__27835 = cljs.core.next(seq__27767__$1);\nvar G__27836 = null;\nvar G__27837 = (0);\nvar G__27838 = (0);\nseq__27767 = G__27835;\nchunk__27768 = G__27836;\ncount__27769 = G__27837;\ni__27770 = G__27838;\ncontinue;\n}\n} else {\nreturn null;\n}\n}\nbreak;\n}\n}\n}));\nre_frame.fx.reg_fx(new cljs.core.Keyword(null,\"deregister-event-handler\",\"deregister-event-handler\",-1096518994),(function (value){\nvar clear_event = cljs.core.partial.cljs$core$IFn$_invoke$arity$2(re_frame.registrar.clear_handlers,re_frame.events.kind);\nif(cljs.core.sequential_QMARK_(value)){\nvar seq__27771 = cljs.core.seq(value);\nvar chunk__27772 = null;\nvar count__27773 = (0);\nvar i__27774 = (0);\nwhile(true){\nif((i__27774 < count__27773)){\nvar event = chunk__27772.cljs$core$IIndexed$_nth$arity$2(null,i__27774);\n(clear_event.cljs$core$IFn$_invoke$arity$1 ? clear_event.cljs$core$IFn$_invoke$arity$1(event) : clear_event.call(null,event));\n\n\nvar G__27839 = seq__27771;\nvar G__27840 = chunk__27772;\nvar G__27841 = count__27773;\nvar G__27842 = (i__27774 + (1));\nseq__27771 = G__27839;\nchunk__27772 = G__27840;\ncount__27773 = G__27841;\ni__27774 = G__27842;\ncontinue;\n} else {\nvar temp__5720__auto__ = cljs.core.seq(seq__27771);\nif(temp__5720__auto__){\nvar seq__27771__$1 = temp__5720__auto__;\nif(cljs.core.chunked_seq_QMARK_(seq__27771__$1)){\nvar c__4550__auto__ = cljs.core.chunk_first(seq__27771__$1);\nvar G__27843 = cljs.core.chunk_rest(seq__27771__$1);\nvar G__27844 = c__4550__auto__;\nvar G__27845 = cljs.core.count(c__4550__auto__);\nvar G__27846 = (0);\nseq__27771 = G__27843;\nchunk__27772 = G__27844;\ncount__27773 = G__27845;\ni__27774 = G__27846;\ncontinue;\n} else {\nvar event = cljs.core.first(seq__27771__$1);\n(clear_event.cljs$core$IFn$_invoke$arity$1 ? clear_event.cljs$core$IFn$_invoke$arity$1(event) : clear_event.call(null,event));\n\n\nvar G__27847 = cljs.core.next(seq__27771__$1);\nvar G__27848 = null;\nvar G__27849 = (0);\nvar G__27850 = (0);\nseq__27771 = G__27847;\nchunk__27772 = G__27848;\ncount__27773 = G__27849;\ni__27774 = G__27850;\ncontinue;\n}\n} else {\nreturn null;\n}\n}\nbreak;\n}\n} else {\nreturn (clear_event.cljs$core$IFn$_invoke$arity$1 ? clear_event.cljs$core$IFn$_invoke$arity$1(value) : clear_event.call(null,value));\n}\n}));\nre_frame.fx.reg_fx(new cljs.core.Keyword(null,\"db\",\"db\",993250759),(function (value){\nif((!((cljs.core.deref(re_frame.db.app_db) === value)))){\nreturn cljs.core.reset_BANG_(re_frame.db.app_db,value);\n} else {\nreturn null;\n}\n}));\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","re_frame/fx.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",16],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$re-frame.fx","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$re-frame.interop","^M","~$re-frame.interceptor","^N","~$re-frame.events","^O","~$re-frame.trace","^P","~$re-frame.registrar","^Q","~$cljs.core","^R","~$goog","^S","~$router","~$re-frame.router","^U","^U","~$trace","^P","~$events","^O","~$re-frame.loggers","^X","~$re-frame.db","^Y"],"~:seen",["^F",["~:require"]],"~:uses",["^ ","~$app-db","^Y","~$->interceptor","^N","~$set-timeout!","^M","~$get-handler","^Q","~$clear-handlers","^Q","~$register-handler","^Q","~$console","^X"],"~:require-macros",["^ ","^P","^P","^V","^P","^R","^R"],"~:form",["~#list",["~$ns","^H",["^1:",["^[",["^U","~:as","^T"],["^Y","~:refer",["^11"]],["^N","^1=",["^12"]],["^M","^1=",["^13"]],["^O","^1<","^W"],["^Q","^1=",["^14","^15","^16"]],["^X","^1=",["^17"]],["^P","^1<","^V","~:include-macros",true]]]]],"~:flags",["^ ","^[",["^F",[]]],"~:js-deps",["^ "],"~:deps",["^S","^R","^U","^Y","^N","^M","^O","^Q","^X","^P"]],"^J","^H","~:resource-id",["~:shadow.build.classpath/resource","re_frame/fx.cljc"],"~:compiled-at",1567403427514,"~:resource-name","re_frame/fx.cljc","~:warnings",[],"~:source","(ns re-frame.fx\n  (:require\n    [re-frame.router      :as router]\n    [re-frame.db          :refer [app-db]]\n    [re-frame.interceptor :refer [->interceptor]]\n    [re-frame.interop     :refer [set-timeout!]]\n    [re-frame.events      :as events]\n    [re-frame.registrar   :refer [get-handler clear-handlers register-handler]]\n    [re-frame.loggers     :refer [console]]\n    [re-frame.trace :as trace :include-macros true]))\n\n\n;; -- Registration ------------------------------------------------------------\n\n(def kind :fx)\n(assert (re-frame.registrar/kinds kind))\n\n(defn reg-fx\n  \"Register the given effect `handler` for the given `id`.\n\n  `id` is keyword, often namespaced.\n  `handler` is a side-effecting function which takes a single argument and whose return\n  value is ignored.\n\n  Example Use\n  -----------\n\n  First, registration ... associate `:effect2` with a handler.\n\n  (reg-fx\n     :effect2\n     (fn [value]\n        ... do something side-effect-y))\n\n  Then, later, if an event handler were to return this effects map ...\n\n  {...\n   :effect2  [1 2]}\n\n   ... then the `handler` `fn` we registered previously, using `reg-fx`, will be\n   called with an argument of `[1 2]`.\"\n  [id handler]\n  (register-handler kind id handler))\n\n;; -- Interceptor -------------------------------------------------------------\n\n(def do-fx\n  \"An interceptor whose `:after` actions the contents of `:effects`. As a result,\n  this interceptor is Domino 3.\n\n  This interceptor is silently added (by reg-event-db etc) to the front of\n  interceptor chains for all events.\n\n  For each key in `:effects` (a map), it calls the registered `effects handler`\n  (see `reg-fx` for registration of effect handlers).\n\n  So, if `:effects` was:\n      {:dispatch  [:hello 42]\n       :db        {...}\n       :undo      \\\"set flag\\\"}\n\n  it will call the registered effect handlers for each of the map's keys:\n  `:dispatch`, `:undo` and `:db`. When calling each handler, provides the map\n  value for that key - so in the example above the effect handler for :dispatch\n  will be given one arg `[:hello 42]`.\n\n  You cannot rely on the ordering in which effects are executed.\"\n  (->interceptor\n    :id :do-fx\n    :after (fn do-fx-after\n             [context]\n             (trace/with-trace\n               {:op-type :event/do-fx}\n               (doseq [[effect-key effect-value] (:effects context)]\n                 (if-let [effect-fn (get-handler kind effect-key false)]\n                   (effect-fn effect-value)\n                   (console :error \"re-frame: no handler registered for effect:\" effect-key \". Ignoring.\")))))))\n\n;; -- Builtin Effect Handlers  ------------------------------------------------\n\n;; :dispatch-later\n;;\n;; `dispatch` one or more events after given delays. Expects a collection\n;; of maps with two keys:  :`ms` and `:dispatch`\n;;\n;; usage:\n;;\n;;    {:dispatch-later [{:ms 200 :dispatch [:event-id \"param\"]}    ;;  in 200ms do this: (dispatch [:event-id \"param\"])\n;;                      {:ms 100 :dispatch [:also :this :in :100ms]}]}\n;;\n;; Note: nil entries in the collection are ignored which means events can be added\n;; conditionally:\n;;    {:dispatch-later [ (when (> 3 5) {:ms 200 :dispatch [:conditioned-out]})\n;;                       {:ms 100 :dispatch [:another-one]}]}\n;;\n(reg-fx\n  :dispatch-later\n  (fn [value]\n    (doseq [{:keys [ms dispatch] :as effect} (remove nil? value)]\n        (if (or (empty? dispatch) (not (number? ms)))\n          (console :error \"re-frame: ignoring bad :dispatch-later value:\" effect)\n          (set-timeout! #(router/dispatch dispatch) ms)))))\n\n\n;; :dispatch\n;;\n;; `dispatch` one event. Expects a single vector.\n;;\n;; usage:\n;;   {:dispatch [:event-id \"param\"] }\n\n(reg-fx\n  :dispatch\n  (fn [value]\n    (if-not (vector? value)\n      (console :error \"re-frame: ignoring bad :dispatch value. Expected a vector, but got:\" value)\n      (router/dispatch value))))\n\n\n;; :dispatch-n\n;;\n;; `dispatch` more than one event. Expects a list or vector of events. Something for which\n;; sequential? returns true.\n;;\n;; usage:\n;;   {:dispatch-n (list [:do :all] [:three :of] [:these])}\n;;\n;; Note: nil events are ignored which means events can be added\n;; conditionally:\n;;    {:dispatch-n (list (when (> 3 5) [:conditioned-out])\n;;                       [:another-one])}\n;;\n(reg-fx\n  :dispatch-n\n  (fn [value]\n    (if-not (sequential? value)\n      (console :error \"re-frame: ignoring bad :dispatch-n value. Expected a collection, but got:\" value)\n      (doseq [event (remove nil? value)] (router/dispatch event)))))\n\n\n;; :deregister-event-handler\n;;\n;; removes a previously registered event handler. Expects either a single id (\n;; typically a namespaced keyword), or a seq of ids.\n;;\n;; usage:\n;;   {:deregister-event-handler :my-id)}\n;; or:\n;;   {:deregister-event-handler [:one-id :another-id]}\n;;\n(reg-fx\n  :deregister-event-handler\n  (fn [value]\n    (let [clear-event (partial clear-handlers events/kind)]\n      (if (sequential? value)\n        (doseq [event value] (clear-event event))\n        (clear-event value)))))\n\n\n;; :db\n;;\n;; reset! app-db with a new value. `value` is expected to be a map.\n;;\n;; usage:\n;;   {:db  {:key1 value1 key2 value2}}\n;;\n(reg-fx\n  :db\n  (fn [value]\n    (if-not (identical? @app-db value)\n      (reset! app-db value))))\n\n","~:reader-features",["^F",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["re-frame.fx/kind","js/Error","re-frame.registrar/kinds","re-frame.fx/reg-fx","id","handler","re-frame.registrar/register-handler","re-frame.fx/do-fx","re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic","context","re-frame.trace/is-trace-enabled?","*current-trace*-orig-val__27721","re-frame.trace/*current-trace*","*current-trace*-temp-val__27722","re-frame.trace/start-trace","end__26580__auto__","re-frame.interop/now","duration__26581__auto__","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","re-frame.trace/traces","cljs.core/conj","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","re-frame.trace/run-tracing-callbacks!","seq__27723","cljs.core/seq","chunk__27724","count__27725","i__27726","vec__27733","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","temp__5720__auto__","cljs.core/chunked-seq?","c__4550__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__27736","cljs.core/first","cljs.core/next","seq__27739","chunk__27740","count__27741","i__27742","vec__27749","vec__27752","effect-key","effect-value","temp__5718__auto__","effect-fn","re_frame.registrar.get_handler.cljs$core$IFn$_invoke$arity$3","re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic","value","seq__27755","chunk__27756","count__27757","i__27758","map__27763","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","map__27765","ms","dispatch","effect","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","cljs.core/nil?","cljs.core/empty?","re-frame.interop/set-timeout!","re-frame.router/dispatch","cljs.core/vector?","cljs.core/sequential?","seq__27767","chunk__27768","count__27769","i__27770","event","clear-event","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","re-frame.registrar/clear-handlers","re-frame.events/kind","seq__27771","chunk__27772","count__27773","i__27774","cljs.core/deref","re-frame.db/app-db","cljs.core/reset!"]]],"~:cache-keys",["~#cmap",[["~:shadow.build.npm/resource","node_modules/react-dom/index.js"],[1553268784000,1553268784000,499162500000,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^F",[]],"~:deps-syms",["~$shadow.js","~$module$node_modules$react_dom$cjs$react_dom_production_min","~$module$node_modules$react_dom$cjs$react_dom_development"]]],["^1C","reagent/impl/batching.cljs"],[1543639330000,"^1Q",["^ ","^1R",null,"^1S",["^F",[]],"^1T",["^S","^R","~$reagent.debug","~$reagent.interop","~$reagent.impl.util","~$clojure.string"]]],["^1C","goog/dom/tagname.js"],[1553268783000,"^1Q",["^ ","^1R",null,"^1S",["^F",[]],"^1T",["^S","~$goog.dom.HtmlElement"]]],["~:macro","^R"],[1553268783000],["^1C","goog/math/math.js"],[1553268783000,"^1Q",["^ ","^1R",null,"^1S",["^F",[]],"^1T",["^S","~$goog.array","~$goog.asserts"]]],["^1C","goog/labs/useragent/browser.js"],[1553268783000,"^1Q",["^ ","^1R",null,"^1S",["^F",[]],"^1T",["^S","^22","~$goog.labs.userAgent.util","~$goog.object","~$goog.string.internal"]]],["^1C","re_frame/loggers.cljc"],[1567403372000,"^1Q",["^ ","^1R",null,"^1S",["^F",[]],"^1T",["^S","^R","~$clojure.set"]]],["^21","^1X"],[1543639330000],["^1C","goog/array/array.js"],[1553268783000,"^1Q",["^ ","^1R",null,"^1S",["^F",[]],"^1T",["^S","^23"]]],["^1P","node_modules/prop-types/checkPropTypes.js"],[1553268784000,1553268784000,1549836454000,"^1Q",["^ ","^1R",null,"^1S",["^F",[]],"^1T",["^1U","~$module$node_modules$prop_types$lib$ReactPropTypesSecret"]]],["^1C","reagent/impl/util.cljs"],[1543639330000,"^1Q",["^ ","^1R",null,"^1S",["^F",[]],"^1T",["^S","^R","^1X","^1Y","^1["]]],["^1C","re_frame/router.cljc"],[1567403372000,"^1Q",["^ ","^1R",null,"^1S",["^F",[]],"^1T",["^S","^R","^O","^M","^X","^P"]]],["^21","~$net.cgrand.macrovich"],[1567403372000],["^1P","node_modules/fbjs/lib/emptyFunction.js"],[1553268784000,1553268784000,1528785402000,"^1Q",["^ ","^1R",null,"^1S",["^F",[]],"^1T",["^1U"]]],["^1C","goog/debug/error.js"],[1553268783000,"^1Q",["^ ","^1R",null,"^1S",["^F",[]],"^1T",["^S"]]],["^1C","re_frame/registrar.cljc"],[1567403372000,"^1Q",["^ ","^1R",null,"^1S",["^F",[]],"^1T",["^S","^R","^M","^X"]]],["^1P","node_modules/fbjs/lib/emptyObject.js"],[1553268784000,1553268784000,1528785402000,"^1Q",["^ ","^1R",null,"^1S",["^F",[]],"^1T",["^1U"]]],["^1C","goog/dom/nodetype.js"],[1553268783000,"^1Q",["^ ","^1R",null,"^1S",["^F",[]],"^1T",["^S"]]],["^21","~$reagent.core"],[1543639330000],["^1P","node_modules/scheduler/cjs/scheduler.development.js"],[1553268784000,1553268784000,499162500000,"^1Q",["^ ","^1R",null,"^1S",["^F",[]],"^1T",["^1U"]]],["^1C","reagent/ratom.cljs"],[1543639330000,"^1Q",["^ ","^1R",null,"^1S",["^F",[]],"^1T",["^S","^R","^1Z","^1X","~$reagent.impl.batching","^27"]]],["^1P","node_modules/scheduler/cjs/scheduler.production.min.js"],[1553268784000,1553268784000,499162500000,"^1Q",["^ ","^1R",null,"^1S",["^F",[]],"^1T",["^1U"]]],["^1C","re_frame/interop.cljs"],[1567403372000,"^1Q",["^ ","^1R",null,"^1S",["^F",[]],"^1T",["^S","^R","~$goog.async.nextTick","^2:","~$reagent.ratom"]]],["^1P","node_modules/scheduler/cjs/scheduler-tracing.production.min.js"],[1553268784000,1553268784000,499162500000,"^1Q",["^ ","^1R",null,"^1S",["^F",[]],"^1T",["^1U"]]],["^1P","node_modules/create-react-class/factory.js"],[1553268784000,1553268784000,1517346959000,"^1Q",["^ ","^1R",null,"^1S",["^F",[]],"^1T",["^1U","~$module$node_modules$object_assign$index","~$module$node_modules$fbjs$lib$emptyObject","~$module$node_modules$fbjs$lib$invariant","~$module$node_modules$fbjs$lib$warning"]]],["^1P","node_modules/react/index.js"],[1553268784000,1553268784000,499162500000,"^1Q",["^ ","^1R",null,"^1S",["^F",[]],"^1T",["^1U","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"]]],["^1C","shadow/js.js"],[1553268784000,"^1Q",["^ ","^1R",null,"^1S",["^F",[]],"^1T",["^S"]]],["^1C","goog/object/object.js"],[1553268783000,"^1Q",["^ ","^1R",null,"^1S",["^F",[]],"^1T",["^S"]]],["^1C","reagent/impl/template.cljs"],[1543639330000,"^1Q",["^ ","^1R",null,"^1S",["^F",[]],"^1T",["^S","^R","^?","^1[","~$clojure.walk","^1Z","~$reagent.impl.component","^2;","^2=","^1Y","^1X"]]],["^1P","node_modules/react-dom/cjs/react-dom.production.min.js"],[1553268784000,1553268784000,499162500000,"^1Q",["^ ","^1R",null,"^1S",["^F",[]],"^1T",["^1U","^?","^2>","~$module$node_modules$scheduler$index"]]],"~:SHADOW-TIMESTAMP",[1553268784000,1553268783000],["^1P","node_modules/react/cjs/react.development.js"],[1553268784000,1553268784000,499162500000,"^1Q",["^ ","^1R",null,"^1S",["^F",[]],"^1T",["^1U","^2>","~$module$node_modules$prop_types$checkPropTypes"]]],["^21","^2="],[1543639330000],["^1C","re_frame/events.cljc"],[1567403372000,"^1Q",["^ ","^1R",null,"^1S",["^F",[]],"^1T",["^S","^R","^Y","~$re-frame.utils","^M","^Q","^X","^N","^P"]]],["^1C","goog/math/long.js"],[1553268783000,"^1Q",["^ ","^1R",null,"^1S",["^F",[]],"^1T",["^S","^23","~$goog.reflect"]]],["^21","^1Y"],[1543639330000],["^1C","goog/string/internal.js"],[1553268783000,"^1Q",["^ ","^1R",null,"^1S",["^F",[]],"^1T",["^S"]]],["^1P","node_modules/scheduler/cjs/scheduler-tracing.development.js"],[1553268784000,1553268784000,499162500000,"^1Q",["^ ","^1R",null,"^1S",["^F",[]],"^1T",["^1U"]]],["^1P","node_modules/fbjs/lib/warning.js"],[1553268784000,1553268784000,1528785401000,"^1Q",["^ ","^1R",null,"^1S",["^F",[]],"^1T",["^1U","~$module$node_modules$fbjs$lib$emptyFunction"]]],["^1C","goog/functions/functions.js"],[1553268783000,"^1Q",["^ ","^1R",null,"^1S",["^F",[]],"^1T",["^S"]]],["^1C","reagent/impl/component.cljs"],[1543639330000,"^1Q",["^ ","^1R",null,"^1S",["^F",[]],"^1T",["^S","^R","^A","^?","^1Z","^2;","^2=","^1Y","^1X"]]],["^1C","clojure/walk.cljs"],[1553268783000,"^1Q",["^ ","^1R",null,"^1S",["^F",[]],"^1T",["^S","^R"]]],["^1C","goog/structs/map.js"],[1553268783000,"^1Q",["^ ","^1R",null,"^1S",["^F",[]],"^1T",["^S","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1P","node_modules/scheduler/index.js"],[1553268784000,1553268784000,499162500000,"^1Q",["^ ","^1R",null,"^1S",["^F",[]],"^1T",["^1U","~$module$node_modules$scheduler$cjs$scheduler_production_min","~$module$node_modules$scheduler$cjs$scheduler_development"]]],["^1C","goog/labs/useragent/engine.js"],[1553268783000,"^1Q",["^ ","^1R",null,"^1S",["^F",[]],"^1T",["^S","^22","^24","~$goog.string"]]],["^1C","goog/asserts/asserts.js"],[1553268783000,"^1Q",["^ ","^1R",null,"^1S",["^F",[]],"^1T",["^S","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^1C","goog/uri/uri.js"],[1553268783000,"^1Q",["^ ","^1R",null,"^1S",["^F",[]],"^1T",["^S","^22","^23","^2P","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1P","node_modules/object-assign/index.js"],[1553268784000,1553268784000,1484580833000,"^1Q",["^ ","^1R",null,"^1S",["^F",[]],"^1T",["^1U"]]],["^1C","re_frame/db.cljc"],[1567403372000,"^1Q",["^ ","^1R",null,"^1S",["^F",[]],"^1T",["^S","^R","^M"]]],["^1C","goog/base.js"],[1553268783000,"^1Q",["^ ","^1R",null,"^1S",["^F",[]],"^1T",[]]],["^1C","goog/structs/structs.js"],[1553268783000,"^1Q",["^ ","^1R",null,"^1S",["^F",[]],"^1T",["^S","^22","^25"]]],["^1C","clojure/string.cljs"],[1553268783000,"^1Q",["^ ","^1R",null,"^1S",["^F",[]],"^1T",["^S","^R","^2P","~$goog.string.StringBuffer"]]],["^1P","node_modules/create-react-class/index.js"],[1553268784000,1553268784000,1517346956000,"^1Q",["^ ","^1R",null,"^1S",["^F",[]],"^1T",["^1U","^?","~$module$node_modules$create_react_class$factory"]]],["^1P","node_modules/react/cjs/react.production.min.js"],[1553268784000,1553268784000,499162500000,"^1Q",["^ ","^1R",null,"^1S",["^F",[]],"^1T",["^1U","^2>"]]],["^1C","goog/debug/entrypointregistry.js"],[1553268783000,"^1Q",["^ ","^1R",null,"^1S",["^F",[]],"^1T",["^S","^23"]]],["^1C","goog/string/string.js"],[1553268783000,"^1Q",["^ ","^1R",null,"^1S",["^F",[]],"^1T",["^S","^26"]]],["^1C","re_frame/interceptor.cljc"],[1567403372000,"^1Q",["^ ","^1R",null,"^1S",["^F",[]],"^1T",["^S","^R","^X","^M","^P","^27"]]],["^1C","goog/reflect/reflect.js"],[1553268783000,"^1Q",["^ ","^1R",null,"^1S",["^F",[]],"^1T",["^S"]]],["^1C","goog/labs/useragent/util.js"],[1553268783000,"^1Q",["^ ","^1R",null,"^1S",["^F",[]],"^1T",["^S","^26"]]],["^1C","reagent/core.cljs"],[1543639330000,"^1Q",["^ ","^1R",null,"^1S",["^F",[]],"^1T",["^S","^R","^?","~$reagent.impl.template","^2E","^1Z","^2;","^2=","^1X","^1Y","~$reagent.dom"]]],["^1C","goog/string/stringbuffer.js"],[1553268783000,"^1Q",["^ ","^1R",null,"^1S",["^F",[]],"^1T",["^S"]]],["^1C","goog/iter/iter.js"],[1553268783000,"^1Q",["^ ","^1R",null,"^1S",["^F",[]],"^1T",["^S","^22","^23","~$goog.functions","~$goog.math"]]],["^1C","goog/async/nexttick.js"],[1553268783000,"^1Q",["^ ","^1R",null,"^1S",["^F",[]],"^1T",["^S","~$goog.debug.entryPointRegistry","~$goog.dom.TagName","^30","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine"]]],["^1C","re_frame/utils.cljc"],[1567403372000,"^1Q",["^ ","^1R",null,"^1S",["^F",[]],"^1T",["^S","^R","^X"]]],["^1C","reagent/dom.cljs"],[1543639330000,"^1Q",["^ ","^1R",null,"^1S",["^F",[]],"^1T",["^S","^R","^C","^1Z","^2Z","^2;","^2=","^1X","^1Y"]]],["^1C","re_frame/fx.cljc"],[1567403372000,"^1Q",["^ ","^1R",null,"^1S",["^F",[]],"^1T",["^S","^R","^U","^Y","^N","^M","^O","^Q","^X","^P"]]],["^1P","node_modules/prop-types/lib/ReactPropTypesSecret.js"],[1553268784000,1553268784000,1549571078000,"^1Q",["^ ","^1R",null,"^1S",["^F",[]],"^1T",["^1U"]]],["^1C","reagent/interop.cljs"],[1543639330000,"^1Q",["^ ","^1R",null,"^1S",["^F",[]],"^1T",["^S","^R"]]],["^1C","goog/dom/htmlelement.js"],[1553268783000,"^1Q",["^ ","^1R",null,"^1S",["^F",[]],"^1T",["^S"]]],["^1C","cljs/core.cljs"],[1553268783000,"^1Q",["^ ","^1R",null,"^1S",["^F",[]],"^1T",["~$goog.math.Long","~$goog.math.Integer","^2P","^25","^22","~$goog.Uri","^2X"]]],["^1C","reagent/debug.cljs"],[1543639330000,"^1Q",["^ ","^1R",null,"^1S",["^F",[]],"^1T",["^S","^R"]]],["^21","^P"],[1567403372000],["^1C","goog/math/integer.js"],[1553268783000,"^1Q",["^ ","^1R",null,"^1S",["^F",[]],"^1T",["^S"]]],["^1P","node_modules/scheduler/tracing.js"],[1553268784000,1553268784000,499162500000,"^1Q",["^ ","^1R",null,"^1S",["^F",[]],"^1T",["^1U","~$module$node_modules$scheduler$cjs$scheduler_tracing_production_min","~$module$node_modules$scheduler$cjs$scheduler_tracing_development"]]],["^1P","node_modules/react-dom/cjs/react-dom.development.js"],[1553268784000,1553268784000,499162500000,"^1Q",["^ ","^1R",null,"^1S",["^F",[]],"^1T",["^1U","^?","^2>","^2H","^2F","~$module$node_modules$scheduler$tracing"]]],["^1C","clojure/set.cljs"],[1553268783000,"^1Q",["^ ","^1R",null,"^1S",["^F",[]],"^1T",["^S","^R"]]],["^1C","goog/uri/utils.js"],[1553268783000,"^1Q",["^ ","^1R",null,"^1S",["^F",[]],"^1T",["^S","^22","^23","^2P"]]],["^1P","node_modules/fbjs/lib/invariant.js"],[1553268784000,1553268784000,1528785400000,"^1Q",["^ ","^1R",null,"^1S",["^F",[]],"^1T",["^1U"]]],["^1C","re_frame/trace.cljc"],[1567403372000,"^1Q",["^ ","^1R",null,"^1S",["^F",[]],"^1T",["^S","^R","^M","^X","^30"]]]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","re_frame/fx.cljc","^7",1,"^8",5,"^9",1,"^:",16],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C"],"^D",null,"^E",["^F",[]],"^G","^H","^K",null,"^L",["^ ","^M","^M","^N","^N","^O","^O","^P","^P","^Q","^Q","^R","^R","^S","^S","^T","^U","^U","^U","^V","^P","^W","^O","^X","^X","^Y","^Y"],"^Z",["^F",["^["]],"~:shadow/js-access-global",["^F",["Error"]],"^10",["^ ","^11","^Y","^12","^N","^13","^M","^14","^Q","^15","^Q","^16","^Q","^17","^X"],"~:defs",["^ ","~$kind",["^ ","^G","~$re-frame.fx/kind","^6","re_frame/fx.cljc","^7",15,"^8",1,"^9",15,"^:",10,"^5",["^ ","^6","re_frame/fx.cljc","^7",15,"^8",6,"^9",15,"^:",10],"~:tag","~$cljs.core/Keyword"],"~$reg-fx",["^ ","~:protocol-inline",null,"^5",["^ ","^6","re_frame/fx.cljc","^7",18,"^8",7,"^9",18,"^:",13,"~:arglists",["^1:",["~$quote",["^1:",[["~$id","~$handler"]]]]],"~:doc","Register the given effect `handler` for the given `id`.\n\n  `id` is keyword, often namespaced.\n  `handler` is a side-effecting function which takes a single argument and whose return\n  value is ignored.\n\n  Example Use\n  -----------\n\n  First, registration ... associate `:effect2` with a handler.\n\n  (reg-fx\n     :effect2\n     (fn [value]\n        ... do something side-effect-y))\n\n  Then, later, if an event handler were to return this effects map ...\n\n  {...\n   :effect2  [1 2]}\n\n   ... then the `handler` `fn` we registered previously, using `reg-fx`, will be\n   called with an argument of `[1 2]`."],"^G","~$re-frame.fx/reg-fx","^6","re_frame/fx.cljc","^:",13,"~:method-params",["^1:",[["^3G","^3H"]]],"~:protocol-impl",null,"~:arglists-meta",["^1:",[null,null]],"^8",1,"~:variadic?",false,"^7",18,"~:ret-tag","~$any","^9",18,"~:max-fixed-arity",2,"~:fn-var",true,"^3E",["^1:",["^3F",["^1:",[["^3G","^3H"]]]]],"^3I","Register the given effect `handler` for the given `id`.\n\n  `id` is keyword, often namespaced.\n  `handler` is a side-effecting function which takes a single argument and whose return\n  value is ignored.\n\n  Example Use\n  -----------\n\n  First, registration ... associate `:effect2` with a handler.\n\n  (reg-fx\n     :effect2\n     (fn [value]\n        ... do something side-effect-y))\n\n  Then, later, if an event handler were to return this effects map ...\n\n  {...\n   :effect2  [1 2]}\n\n   ... then the `handler` `fn` we registered previously, using `reg-fx`, will be\n   called with an argument of `[1 2]`."],"~$do-fx",["^ ","^5",["^ ","^6","re_frame/fx.cljc","^7",47,"^8",6,"^9",47,"^:",11],"^G","~$re-frame.fx/do-fx","^6","re_frame/fx.cljc","^:",11,"^8",1,"^7",47,"^9",47,"^3A","~$cljs.core/IMap","^3I","An interceptor whose `:after` actions the contents of `:effects`. As a result,\n  this interceptor is Domino 3.\n\n  This interceptor is silently added (by reg-event-db etc) to the front of\n  interceptor chains for all events.\n\n  For each key in `:effects` (a map), it calls the registered `effects handler`\n  (see `reg-fx` for registration of effect handlers).\n\n  So, if `:effects` was:\n      {:dispatch  [:hello 42]\n       :db        {...}\n       :undo      \"set flag\"}\n\n  it will call the registered effect handlers for each of the map's keys:\n  `:dispatch`, `:undo` and `:db`. When calling each handler, provides the map\n  value for that key - so in the example above the effect handler for :dispatch\n  will be given one arg `[:hello 42]`.\n\n  You cannot rely on the ordering in which effects are executed."]],"^18",["^ ","^P","^P","^V","^P","^R","^R"],"~:cljs.analyzer/constants",["^ ","^Z",["^F",["~:db","~:do-fx","~:start","~:dispatch-n","~:duration","~:deregister-event-handler","~:dispatch","~:after","~:event/do-fx","~:id","~:effects","~:error","~:end","~:ms","~:fx","~:op-type","~:dispatch-later"]],"~:order",["^49","^44","^3X","^42","^4:","^43","^3Y","^3[","^47","^45","^46","^4;","^48","^41","^3Z","^40","^3W"]],"^1?",["^ ","^[",["^F",[]]],"^1@",["^ "],"^1A",["^S","^R","^U","^Y","^N","^M","^O","^Q","^X","^P"]],"^J","^H","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1O",[["^4?","~:static-fns"],true,["^4?","~:elide-asserts"],false,["^4?","~:optimize-constants"],null,["^4?","^1F"],null,["^4?","~:external-config"],null,["^4?","~:tooling-config"],null,["^4?","~:emit-constants"],null,["^4?","~:load-tests"],null,["^4?","~:infer-externs"],true,["^4?","^1H"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^4?","~:fn-invoke-direct"],null,["^4?","~:source-map"],"/dev/null"]]]