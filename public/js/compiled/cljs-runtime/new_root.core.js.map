{"version":3,"sources":["new_root/core.cljs"],"mappings":"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","names":["js/new_root","js/new_root.core","js/new_root.core.app-state","new_root.core/app-state","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","new_root.core/link","text","id","reitit.frontend.easy.href.cljs$core$IFn$_invoke$arity$2","new_root.core/post-0","p1__33300#","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/update","new_root.core/post-1","new-root.paint-snake-two.core/view","new_root.core/post-2","new-root.mindustry/view","new_root.core/post-3","new-root.paint/view","new_root.core/post-4","new-root.gen-art/view","new_root.core/scratch","new-root.scratch/view","new_root.core/post-5","new-root.neumorph/view","new_root.core/posts","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core.juxt.cljs$core$IFn$_invoke$arity$2","cljs.core/identity","cljs.core.into.cljs$core$IFn$_invoke$arity$2","new_root.core/nav","cljs.core.into.cljs$core$IFn$_invoke$arity$1","reitit.frontend.easy.href.cljs$core$IFn$_invoke$arity$1","cljs.core.repeat.cljs$core$IFn$_invoke$arity$2","cljs.core/deref","new_root.core/blog","page","p__33314","map__33315","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","new_root.core/teaser","_","title","preview","content","release","p__33322","map__33323","new_root.core/shadow-teaser","new_root.neumorph.shadow_box.cljs$core$IFn$_invoke$arity$1","new_root.core/footer","new_root.core/sorter","id1","id2","G__33334","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","js/Error","cljs.core/first","cljs.core.sort.cljs$core$IFn$_invoke$arity$1","new_root.core/home","new-root.neumorph/wrap-shadow-container","iter__4582__auto__","s__33341","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","cljs.core/count","b__33343","cljs.core/chunk-buffer","i__33342","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__33340","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","p","cljs.core/reverse","cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2","cljs.core.distinct.cljs$core$IFn$_invoke$arity$1","cljs.core/vals","new_root.core/projects","s__33349","b__33351","i__33350","iter__33348","project","clojure.string/capitalize","new_root.core/post","match","temp__5733__auto__","map__33365","post","or__4185__auto__","js/parseInt","pure?","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","new_root.core/routes","cljs.core/int?","new_root.core/current-page","view","new_root.core/start","G__33379","G__33380","reagent.core/render-component","js/document","new_root.core/init","reitit.frontend.easy/start!","reitit.frontend.router.cljs$core$IFn$_invoke$arity$1","m","cljs.core/assoc","new-root.paint-snake-two.core/init","new_root.core/stop","js/console.log","cljs.core/chunk-first"],"sourcesContent":["(ns new_root.core\n  (:require\n   [reagent.core :as r :refer [atom]]\n   [reitit.frontend :as rfe]\n   [reitit.frontend.easy :as rfee]\n   [new-root.paint-snake-two.core :as ps-two]\n   [new-root.paint :as paint]\n   [new-root.mindustry :as mind]\n   [clojure.string :as str]\n   [new-root.gen-art :as gen-art]\n   [new-root.scratch :as scratch]\n   [new-root.neumorph :as neumorph]))\n\n(defonce app-state (atom {:thingies 1}))\n\n(defn link [text id]\n  [:a {:href (rfee/href ::post {:id id})} text])\n\n(def post-0\n  {:id \"hello-world\"\n   :sorder 0\n   :title \"Hello World\"\n   :preview (fn []\n              [:div\n               [:p \"Welcome to my blog!\"]\n               [:p \"It's built as a single page app using\n               Clojurescript and reagent, which means the entire thing is\n               completely programmable. Visit my contents \" (link \"here.\" \"hello-world\")]\n               [:button\n                {:style {:cursor :pointer}\n                 :on-click (fn [] (swap! app-state update :thingies #(* 2 %)))}\n                \"Click here to see stuff happen\"]])\n   :content (fn []\n              [:div\n               [:h1 \"I'm here, and im post 0.\"]\n               [:p \"Here's \" (link \"Post 1\" \"snake-game\") \".\"]\n               [:p \"Its a game I'm working on!\"]])})\n(def post-1\n  {:id \"snake-game\"\n   :sorder 1\n   :title \"Adding goals and a way to die\"\n   :preview (fn [] [:div \"This is a riff on snake\"])\n   :content ps-two/view})\n\n(def post-2\n  {:id \"force-graph\"\n   :sorder 2\n   :title \"Force Directed Graph\"\n   :preview (fn [] [:div \"An updatable d3 Force Directed Graph.\"])\n   :content mind/view})\n\n(def post-3\n  {:id \"paint\"\n   :sorder 3\n   :title \"Paint fill game\"\n   :pure true\n   :preview (fn []\n              [:div\n               [:p \"Inspired by a python game I found on my raspberry pi\"]\n               [:p \"Flood the canvas from the top left\"]])\n   :content paint/view})\n\n(def post-4\n  {:id \"gen-art\"\n   :sorder 4\n   :title \"Generative Art\"\n   :pure true\n   :preview (fn [] [:div \"Just getting warmed up\"])\n   :content gen-art/view})\n\n(def scratch\n  {:id \"scratch\"\n   :title \"scratch\"\n   :exclude-post? true\n   :pure true\n   :preview (fn [] [:div])\n   :content scratch/view})\n\n(def post-5\n  {:id \"neumorph\"\n   :sorder 5\n   :title \"Dynamic Neumorphism\"\n   :pure false\n   :preview (fn [] [:div \"Yeah.. it's \"(link \"trendy\" \"neumorph\") \".\"])\n   :content neumorph/view})\n\n(def posts\n  (->> [post-1 post-2 post-3 post-4 post-5]\n       (map (juxt :id identity))\n       (into {})))\n\n(defn nav []\n  [:div.nav\n   (into\n    [:span\n     [:span [:a {:href (rfee/href ::home)} \"Home\"]]\n     (repeat (:thingies @app-state) \"  |  \")\n     [:span [:a {:href (rfee/href ::projects)} \"Projects\"]]])])\n\n(defn blog [page]\n  (into\n   [:div.container\n    [:div.row [nav]]\n    [:div.row page]]))\n\n(defn teaser [{:as _ :keys [id title preview content release]}]\n  [:div.teaser-card\n   {:style {:border \"none\"\n            :padding \"10px 20px 20px 30px\"\n            :margin \"60px\"}}\n   [:h3 (link title id)]\n   [:div.row (cond preview [preview]\n                   content [content]\n                   :else [:h2 title])]])\n\n(defn shadow-teaser [{:as _ :keys [id title preview content release]}]\n  (neumorph/shadow-box\n   [:div\n    {:style {:border \"none\"\n             :padding \"10px 20px 20px 30px\"\n             :margin \"60px\"}}\n    [:h3 (link title id)]\n    [:div.row (cond preview [preview]\n                    content [content]\n                    :else [:h2 title])]]))\n\n(defn footer []\n  [:div {:style {:float :right}}\n   [:p \"Copyright Bryan Maass 2019\"]])\n\n(defn sorter [id1 id2]\n  (case [(string? id1) (string? id2)]\n    [false true] id2\n    [true false] id1\n    [true true] (first (sort [id1 id2]))\n    [false false] (first (sort [id1 id2]))))\n\n(defn home [_]\n  (neumorph/wrap-shadow-container\n   [:div\n    [:h1 \"Escherize Zone\"]\n    [blog\n     (into [:div {:style {:display \"flex\" :flex-flow \"wrap\"}}]\n           (for [p (reverse (sort-by sorter (distinct (vals posts))))]\n             (teaser p)))]\n    [footer]]))\n\n(defn projects []\n  [:div\n   [:h3 \"Here are some projects and toys going back to 2012.\"]\n   (into [:ul]\n         (for [project [\"blindfold\" \"catan\" \"circles\" \"cljsfiddle\"\n                        \"colors\" \"dnd5\" \"hiccup.space\" \"looper\"\n                        \"magic\" \"santorini\" \"transpose\"]]\n           [:li>a {:href (str \"/works/\" project)}\n            (str/capitalize project)]))])\n\n(defn post [match]\n  (if-let [id (-> match :parameters :path :id)]\n    (let [{:keys [content title] :as post} (or (get posts id)\n                                               (get posts (js/parseInt id)))\n          pure? (:pure post)]\n      (if pure?\n        [content]\n        [:div\n         [:div.row\n          [:div [:span \"[\" [:a {:href (rfee/href ::home)} \"Home\"] \"]\"]]\n          [:div [:h1 title]]]\n         [:hr]\n         [content]]))\n    [:pre (pr-str match)]))\n\n(def routes\n  [[\"/\" {:name ::home :view home}]\n   [\"/projects\" {:name ::projects :view projects}]\n   [\"/post/:id\" {:name ::post\n                 :view post\n                 :parameters {:path {:id int?}}}]])\n\n(defn current-page []\n  [:div\n   (if (:match @app-state)\n     (let [view (:view (:data (:match @app-state)))]\n       [view (:match @app-state)]))])\n\n(defn start []\n  (r/render-component [current-page] (. js/document (getElementById \"app\"))))\n\n(defn ^:export init []\n  ;; init is called ONCE when the page loads\n  ;; this is called in the index.html and must be exported\n  ;; so it is available even in :advanced release builds\n  (rfee/start!\n   (rfe/router routes)\n   (fn [m] (swap! app-state assoc :match m))\n   ;; set to false to enable HistoryAPI\n   {:use-fragment true})\n  ;;(ps/init)\n  (ps-two/init)\n  (start))\n\n(defn stop []\n  ;; stop is called before any code is reloaded\n  ;; this is controlled by :before-load in the config\n  (js/console.log \"stop\"))\n"]}