{"version":3,"sources":["new_root/core.cljs"],"mappings":"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","names":["js/new-root","js/new-root.core","js/new-root.core.*pointer","new-root.core/*pointer","reagent.core.atom","js/new-root.core.app-state","new-root.core/app-state","new-root.core/link","text","post-id","reitit.frontend.easy.href","new-root.core/post-0","new-root.core/post-1","new-root.paint-snake-two.core/view","new-root.core/post-2","new-root.simple-dag/view","new-root.core/post-3","new-root.paint/view","new-root.core/post-4","new-root.gen-art/view","new-root.core/scratch","new-root.scratch/view","new-root.core/post-5","new-root.neumorph/view","new-root.core/post-6","new-root.gen-art-2/view","new-root.core/post-7","new-root.gen-art-3/view","new-root.core/post-8","new-root.core/post-9","new-root.leds/view","new-root.core/post-10","new-root.weight/view","new-root.core/posts","cljs.core.map","cljs.core.juxt","cljs.core/identity","cljs.core.into","new-root.core/nav","new-root.core/blog","page","p__47983","map__47984","cljs.core/--destructure-map","cljs.core.get","new-root.core/teaser","_","id","title","preview","content","no-content","release","new-root.core/btn-style","new-root.core/squirt","x","Math/sqrt","Math/abs","new-root.core/clamp","lo","n","hi","x__4295__auto__","y__4296__auto__","x__4298__auto__","y__4299__auto__","p__47985","map__47986","new-root.core/style-fn","y","h","dist","new-root.core/shadow-box","*pointer","*my-position","reagent.core.create_class","this","cljs.core/reset!","new-root.neumorph/find-location","reagent.dom/dom-node","cljs.core.merge","cljs.core/deref","new-root.neumorph/p1+p2->box-shadow-main","p__47987","map__47988","new-root.core/shadow-teaser","new-root.core/footer","new-root.core/width","js/window.innerWidth","new-root.core/height","js/window.innerHeight","js/console.log","new-root.core/to-scale","range","new-root.core/home-posts","cljs.core/vals","cljs.core.distinct","cljs.core.sort_by","cljs.core/reverse","new-root.core/home","with-let47990","reagent.ratom/with-let-values","temp__5757__auto__","reagent.ratom/*ratom-context*","c__42553__auto__","reagent.debug/has-console","reagent.debug/tracking","reagent.debug/track-console","js/console","init47991","p1__47989#","res__42554__auto__","destroy__42552__auto__","reagent.ratom/reactive?","handler","js/document","iter__4611__auto__","s__47993","cljs.core/LazySeq","temp__5753__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4609__auto__","size__4610__auto__","cljs.core/count","b__47995","cljs.core/chunk-buffer","i__47994","map__47996","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__47992","cljs.core/chunk-rest","map__47997","cljs.core/first","cljs.core/cons","cljs.core/rest","exclude-post?","p","new-root.core/projects","s__47999","b__48001","i__48000","iter__47998","project","clojure.string/capitalize","new-root.core/post","match","temp__5751__auto__","map__48002","posts","post","or__4212__auto__","js/parseInt","pure?","cljs.core.pr_str","new-root.core/about","new-root.core/routes","cljs.core/int?","new-root.core/current-page","view","new-root.core/start","reagent.dom.render","new-root.core/init","reitit.frontend.easy/start!","reitit.frontend.router","m","cljs.core.swap_BANG_","cljs.core/assoc","new-root.paint-snake-two.core/init","new-root.core/stop","cljs.core/chunk-first"],"sourcesContent":["(ns new-root.core\n  (:require [clojure.string :as str]\n            [new-root.gen-art :as gen-art]\n            [new-root.gen-art-2 :as gen-art2]\n            [new-root.gen-art-3 :as gen-art3]\n            [new-root.leds :as leds]\n            [new-root.weight :as weight]\n            [new-root.neumorph :as neumorph]\n            [new-root.paint :as paint]\n            [new-root.paint-snake-two.core :as ps-two]\n            [new-root.scratch :as scratch]\n            [new-root.simple-dag :as simple-dag]\n            [new-root.relations-grouping :as grouping]\n            [reagent.core :as r]\n            [reagent.dom :as rd]\n            [reitit.frontend :as rfe]\n            [reitit.frontend.easy :as rfee]))\n\n(defonce *pointer (r/atom [301 301]))\n(defonce app-state (r/atom {:thingies 1}))\n\n(defn link [text post-id]\n  [:a {:href (rfee/href ::post {:id post-id})} text])\n\n(def post-0\n  {:id \"hello-world\"\n   :sorder 0\n   :title \"Hello World\"\n   :preview (fn []\n              [:div\n               [:p \"Welcome to my blog!\"]\n               [:p \"It's built as a single page app using\n               Clojurescript and reagent, which means the entire thing is\n               completely programmable. Visit my contents \" (link \"here.\" \"hello-world\")]])\n   :content (fn []\n              [:div\n               [:h1 \"I'm here, and im post 0.\"]\n               [:p \"Here's \" (link \"Post 1\" \"snake-game\") \".\"]\n               [:p \"Its a game I'm working on!\"]])})\n(def post-1\n  {:id \"snake-game\"\n   :sorder 1\n   :title \"Adding goals and a way to die\"\n   :preview (fn [] [:div \"This is a riff on snake\"])\n   :content ps-two/view})\n\n(def post-2\n  {:id \"force-graph\"\n   :sorder 2\n   :title \"Force Directed Graph\"\n   :preview (fn [] [:div \"An updatable d3 Force Directed Graph.\"])\n   :content simple-dag/view})\n\n(def post-3\n  {:id \"paint\"\n   :sorder 3\n   :title \"Paint fill game\"\n   :pure true\n   :preview (fn []\n              [:div\n               [:p \"Inspired by a python game I found on my raspberry pi\"]\n               [:p \"Flood the canvas from the top left\"]])\n   :content paint/view})\n\n(def post-4\n  {:id \"gen-art\"\n   :sorder 4\n   :title \"Generative Art\"\n   :pure true\n   :preview (fn [] [:div \"Just getting warmed up\"])\n   :content gen-art/view})\n\n(def scratch\n  {:id \"scratch\"\n   :title \"scratch\"\n   :exclude-post? true\n   :pure true\n   :preview (fn [] [:div])\n   :content scratch/view})\n\n(def post-5\n  {:id \"neumorph\"\n   :sorder 5\n   :title \"Dynamic Neumorphism\"\n   :pure false\n   :preview (fn [] [:div \"Yeah.. it's \"(link \"trendy\" \"neumorph\") \".\"])\n   :content neumorph/view})\n\n(def post-6\n  {:id \"gen-art-2\"\n   :sorder 6\n   :title \"More Art\"\n   :pure true\n   :preview (fn [] [:div \"Where circles don't overlap\"])\n   :content gen-art2/view})\n\n(def post-7\n  {:id \"gen-art-3\"\n   :sorder 7\n   :title \"Even More Art\"\n   :pure true\n   :preview (fn [] [:div \"Vector Fields 101\"])\n   :content gen-art3/view})\n\n(def post-8\n  {:id \"pico8\"\n   :sorder 8\n   :title \"Pico-8\"\n   :pure true\n   :no-content true\n   :preview (fn []\n              [:div\n               \"To play, use the arrow keys and z, and x. \"\n               \"They also work on mobile.\"\n               [:ul\n                [:li>a {:style {:font-size 20}\n                        :href \"/works/pico8/tetris_attack\"} \"Tetris Attack v1.1\"]\n                [:li>a {:style {:font-size 18}\n                        :href \"/works/pico8/ammo_thruster\"} \"Ammo Thruster v0.9\"]\n                [:li>a {:style {:font-size 16}\n                        :href \"/works/pico8/sliding_tiles\"} \"Sliding Tiles v0.4\"]\n                [:li>a {:style {:font-size 14}\n                        :href \"/works/pico8/gunner_men\"} \"Gunner Men 0.1\"]]])})\n\n(def post-9\n  {:id \"light-strips\"\n   :sorder 9\n   :title \"Working with LED Strips\"\n   :pure true\n   :preview (fn [] \"Setting up a low-fi LED display, and accessing 2d arrays\")\n   :content leds/view})\n\n(def post-10\n  {:id \"weights\"\n   :sorder 10\n   :title \"Barbell Calculator\"\n   :pure true\n   :preview (fn [] \"Quickly visualize what to put on your bar\")\n   :content weight/view})\n\n(defn posts []\n  (->> [post-0 post-1 post-2 post-3 post-4 post-5 post-6\n        ;; fucked up idk why :D\n        ;; post-7\n        post-8\n        post-9\n        post-10\n        scratch]\n       (map (juxt :id identity))\n       (into {})))\n\n(defn nav []\n  [:div {:style {:width \"200px\" :margin \"auto\"}}\n   [:span {:key \"home\"\n           :style {:margin-right \"20px\"}} [:a {:href (rfee/href ::home)} \"Home\"]]\n   [:span {:key \"projects\"}\n    [:a {:href (rfee/href ::projects)} \"Projects\"]]\n   #_(repeat (:thingies @app-state) \"  |  \")\n   #_[:span [:a {:href (rfee/href ::about)} \"About\"]]])\n\n(defn blog [page]\n  (into\n   [:div.container\n    [:div.row [nav]]\n    [:div.row page]]))\n\n(defn teaser [{:as _ :keys [id title preview content no-content release]}]\n  [:div.teaser-card\n   {:style {:margin \"30px\"\n            :padding \"10px 20px 20px 30px\"}}\n   [:h3 (if no-content\n          title\n          (link title id))]\n   [:div.row (cond preview [preview]\n                   content [content]\n                   :else [:h2 title])]])\n\n(def btn-style\n  {:margin \"25px\"\n   :background-color \"#dde\"\n   :text-align \"center\"\n   :border \"5px rgb(12, 112, 160) solid\"\n   :border-radius 10\n   :padding \"30px\"})\n\n(defn squirt [x]\n  (if (> x 0)\n    (Math/sqrt (Math/abs x))\n    (* -1 (Math/sqrt (Math/abs x)))))\n\n(defn clamp [lo n hi]\n  (->> n (max lo) (min hi)))\n\n(defn style-fn [{:keys [x y h #_unit-x #_unit-y]}]\n  (let [dist (Math/sqrt (+ (* x x) (* y y)))]\n    {:box-shadow (str (* 0.8 (squirt x)) \"px \"\n                      (* 0.8 (squirt y)) \"px \"\n                      (/ h 100) \"px \" ;; blur\n                      (/ h 80) \"px \" ;; spread\n                      \"#aab\"\n                      ;; changing colors like:\n                      #_(str \"hsl(\" (/ h 5) \",50%,65%)\"))\n     ;; changing colors?\n     ;; get brigher when mouse closer\n     :background-color (str \"hsl(-130,40%,\" (max (- 95 (/ h 100)) 85) \"%)\")}))\n\n(defn shadow-box [*pointer content]\n  (let [*my-position (r/atom [])]\n    (r/create-class\n     {:component-did-mount\n      (fn [this] (reset! *my-position (neumorph/find-location (rd/dom-node this))))\n      :reagent-render\n      (fn [*pointer content]\n        [:div\n         {:style (merge\n                  btn-style\n                  (when @*my-position\n                    (style-fn\n                     (neumorph/p1+p2->box-shadow-main\n                      @*pointer\n                      @*my-position))))}\n         content\n         #_[:<>\n            [:p \"origin: \" (pr-str @*pointer)]\n            [:p \"my position: \" (pr-str @*my-position)]]])})))\n\n(defn shadow-teaser\n  [*pointer\n   {:as _ :keys [id title preview no-content content release]}]\n  (let [*my-position (r/atom [])]\n    (r/create-class\n     {:component-did-mount\n      (fn [this] (reset! *my-position (neumorph/find-location (rd/dom-node this))))\n      :reagent-render\n      (fn [*pointer content]\n        [:div.shadow-teaser\n         {:style (merge\n                  {:margin \"30px 25px\"\n                   :background-color \"#dde\"\n                   :text-align \"center\"\n                   :border \"8px rgb(21, 121, 169) solid\"\n                   :border-radius \"20px\"\n                   :max-width \"300px\"\n                   :padding \"20px\"}\n                  (when @*my-position\n                    (style-fn\n                     (neumorph/p1+p2->box-shadow-main @*pointer @*my-position))))}\n         [:div\n          [:h3 (if no-content\n                 title\n                 (link title id))]\n          [:div.row (cond preview [preview]\n                          content [content]\n                          :else [:h2 title])]]\n         (when false\n           [:<>\n            [:p \"origin: \" (pr-str @*pointer)]\n            [:p \"my position: \" (pr-str @*my-position)]])])})))\n\n(defn footer []\n  [:div {:style {:height 100}}])\n\n(defn width [] js/window.innerWidth)\n(defn height [] js/window.innerHeight)\n\n(js/console.log \"width:\" (width))\n(js/console.log \"height:\" (height))\n\n(defn to-scale [range n]\n  (+ (* range 0.45) (* range n 0.35)))\n\n(defn home-posts []\n  (->> (posts) vals distinct (sort-by :sorder) reverse))\n\n(defn home [_]\n  (r/with-let [handler #(reset! *pointer [(.-pageX %) (.-pageY %)])\n               _ (.addEventListener js/document \"mousemove\" handler)]\n    (fn []\n      [:div\n       [:div.top {:style {:margin-top \"30px\"\n                          :margin-bottom \"30px\"}}\n        [:div {:style {:width \"300px\"\n                       :margin \"auto\"}}\n         [:h1 \"Escherize Zone\"]]\n        [nav]]\n       (into [:div {:style {:display \"flex\"\n                            :flex-flow \"wrap\"\n                            :justify-content \"space-evenly\"}}]\n             (for [{:keys [exclude-post?] :as p} (home-posts)]\n               ;; (teaser p)\n               (when-not exclude-post? [shadow-teaser *pointer p])))\n       [footer]])\n    (finally\n      (.removeEventListener js/document \"mousemove\" handler))))\n\n(defn projects []\n  [:div\n   [:h3 \"Here are some projects and toys going back to 2012.\"]\n   (into [:ul]\n         (for [project [\"blindfold\" \"catan\" \"circles\" \"cljsfiddle\"\n                        \"colors\" \"dnd5\" \"hiccup.space\" \"looper\"\n                        \"magic\" \"santorini\" \"transpose\"]]\n           [:li>a {:href (str \"/works/\" project)}\n            (str/capitalize project)]))])\n\n(defn post [match]\n  (if-let [id (-> match :parameters :path :id)]\n    (let [posts (posts)\n          {:keys [content title] :as post} (or (get posts id)\n                                               (get posts (js/parseInt id)))\n          pure? (:pure post)]\n      (if pure?\n        [content]\n        [:div\n         [:div.row\n          [:div [:span \"[\" [:a {:href (rfee/href ::home)} \"Home\"] \"]\"]]\n          [:div [:h1 title]]]\n         [:hr]\n         [content]]))\n    [:pre (pr-str match)]))\n\n(defn about [_]\n  [:h1 \"under construction\"])\n\n(def routes\n  [[\"/\" {:name ::home :view (fn [] home)}]\n   [\"/projects\" {:name ::projects :view (fn [] projects)}]\n   [\"/about\" {:name ::about :view (fn [] about)}]\n   [\"/post/:id\" {:name ::post\n                 :view (fn [] post)\n                 :parameters {:path {:id int?}}}]])\n\n(defn current-page []\n  [:div\n   (if (:match @app-state)\n     (let [view (:view (:data (:match @app-state)))]\n       [view (:match @app-state)]))])\n\n(defn ^:dev/after-load start []\n  (js/console.log \"starting..\")\n  ;;(.resize (js/$ js/window) (fn [] (js/console.log \"changed\")))\n  (rd/render [current-page] (. js/document (getElementById \"app\"))))\n\n(defn ^:export init []\n  ;; init is called ONCE when the page loads\n  ;; this is called in the index.html and must be exported\n  ;; so it is available even in :advanced release builds\n  (rfee/start!\n   (rfe/router routes)\n   (fn [m] (swap! app-state assoc :match m))\n   ;; set to false to enable HistoryAPI\n   {:use-fragment true})\n  ;;(ps/init)\n  (ps-two/init)\n  (start))\n\n(defn stop []\n  ;; stop is called before any code is reloaded\n  ;; this is controlled by :before-load in the config\n  (js/console.log \"stop\"))\n"]}