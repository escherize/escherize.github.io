{"version":3,"sources":["reagent/ratom.cljs"],"mappings":"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","names":["js/reagent","js/reagent.ratom","js/reagent.ratom.debug","reagent.ratom/debug","js/reagent.ratom.generation","reagent.ratom/generation","js/reagent.ratom.-running","reagent.ratom/-running","cljs.core.atom","reagent.ratom/reactive?","reagent.ratom/*ratom-context*","reagent.ratom/running","cljs.core/deref","reagent.ratom/arr-len","x","reagent.ratom/arr-eq","y","len","and__4210__auto__","i","or__4212__auto__","reagent.ratom/in-context","obj","f","*ratom-context*-orig-val__42570","*ratom-context*-temp-val__42571","reagent.ratom/deref-capture","r","res","c","reagent.ratom/notify-deref-watcher!","derefed","temp__5757__auto__","reagent.ratom/check-watches","old","new","cljs.core.swap_BANG_","cljs.core/+","cljs.core/count","reagent.ratom/add-w","this","key","w","cljs.core.assoc","reagent.ratom/remove-w","cljs.core.dissoc","reagent.ratom/notify-w","a","p1__42574#","p2__42575#","p3__42576#","cljs.core/reduce-kv","G__42577","k","reagent.ratom/pr-atom","writer","opts","s","v","cljs.core/-write","cljs.core/pr-writer","*ratom-context*-orig-val__42580","*ratom-context*-temp-val__42581","js/reagent.ratom.rea-queue","reagent.ratom/rea-queue","reagent.ratom/rea-enqueue","reagent.impl.batching/schedule","reagent.ratom/flush!","q","n__4695__auto__","reagent.impl.batching/ratom-flush","reagent.ratom/IReactiveAtom","cljs.core/PROTOCOL_SENTINEL","this__4450__auto__","writer__4451__auto__","opt__4452__auto__","reagent.ratom/RAtom","reagent.ratom/->RAtom","state","meta","validator","watches","o","other","new-value","js/Error","old-value","more","cljs.core.apply","_","new-meta","goog/getUid","var_args","G__42591","reagent.ratom/atom","args-arr__4839__auto__","len__4818__auto__","i__4819__auto__","argseq__4840__auto__","cljs.core/IndexedSeq","p__42592","map__42593","cljs.core/--destructure-map","cljs.core.get","seq42589","G__42590","cljs.core/first","cljs.core/next","self__4805__auto__","reagent.ratom/cached-reaction","destroy","m","cljs.core/-deref","G__42596","G__42597","G__42598","reagent.ratom/make-reaction","cljs.core/dec","cljs.core/inc","reagent.ratom/Track","reagent.ratom/->Track","args","reaction","temp__5755__auto__","cljs.core._EQ_","cljs.core/hash","reagent.ratom/make-track","reagent.ratom/make-track!","t","G__42601","G__42602","G__42603","args__4824__auto__","argseq__4825__auto__","reagent.ratom/track","seq42604","G__42605","cljs.core/ifn?","reagent.ratom/track!","seq42608","G__42609","reagent.ratom/RCursor","reagent.ratom/->RCursor","ratom","path","*ratom-context*-orig-val__42614","*ratom-context*-temp-val__42615","oldstate","newstate","cljs.core/native-satisfies?","cljs.core/IDeref","cljs.core.get_in","cljs.core/reset!","cljs.core/assoc-in","G__42619","G__42620","G__42621","G__42622","G__42623","G__42624","reagent.ratom/cursor","src","cljs.core/vector?","cljs.core.pr_str","reagent.ratom/with-let-destroy","reagent.ratom/with-let-values","cljs.core/array","reagent$ratom$IDisposable$dispose_BANG_$dyn","x__4509__auto__","m__4510__auto__","reagent.ratom/dispose!","goog/typeOf","m__4508__auto__","cljs.core/missing-protocol","reagent$ratom$IDisposable$add_on_dispose_BANG_$dyn","reagent.ratom/add-on-dispose!","reagent.ratom/IDisposable","reagent$ratom$IRunnable$run$dyn","reagent.ratom/run","reagent.ratom/IRunnable","reagent.ratom/handle-reaction-change","sender","p__42659","map__42660","reagent.ratom/Reaction","reagent.ratom/->Reaction","dirty?","nocache?","watching","auto-run","caught","was-empty","cljs.core/empty?","newval","cljs.core/fn?","oldval","G__42666","G__42671","G__42672","G__42673","G__42674","G__42675","*ratom-context*-orig-val__42637","*ratom-context*-temp-val__42638","cljs.core/set","seq__42644","cljs.core/seq","chunk__42645","count__42646","i__42647","temp__5753__auto__","cljs.core/chunked-seq?","c__4638__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","clojure.set.difference","cljs.core/-add-watch","seq__42653","chunk__42654","count__42655","i__42656","cljs.core/-remove-watch","e42657","e","check","on-set","on-dispose","no-cache","non-reactive","wg","seq__42661","chunk__42662","count__42663","i__42664","fexpr__42665","p__42692","map__42693","seq42689","G__42690","reagent.ratom/temp-reaction","reagent.ratom/run-in-reaction","run","goog.object/set","reagent.ratom/check-derefs","ctx","reagent.ratom/Wrapper","reagent.ratom/->Wrapper","callback","changed","reagent.debug/has-console","reagent.debug/tracking","reagent.debug/track-console","js/console","cljs.core/not","reagent.ratom/make-wrapper","value","callback-fn","reagent.impl.util/make-partial-fn"],"sourcesContent":["(ns reagent.ratom\n  (:refer-clojure :exclude [atom])\n  (:require-macros [reagent.ratom])\n  (:require [reagent.impl.util :as util]\n            [reagent.debug :refer-macros [warn dev?]]\n            [reagent.impl.batching :as batch]\n            [clojure.set :as s]\n            [goog.object :as obj]))\n\n(declare ^:dynamic *ratom-context*)\n(defonce ^boolean debug false)\n(defonce ^:private generation 0)\n(defonce ^:private -running (clojure.core/atom 0))\n\n(defn ^boolean reactive? []\n  (some? *ratom-context*))\n\n\n;;; Utilities\n\n(defn running []\n  (+ @-running))\n\n(defn- ^number arr-len [x]\n  (if (nil? x) 0 (alength x)))\n\n(defn- ^boolean arr-eq [x y]\n  (let [len (arr-len x)]\n    (and (== len (arr-len y))\n         (loop [i 0]\n           (or (== i len)\n               (if (identical? (aget x i) (aget y i))\n                 (recur (inc i))\n                 false))))))\n\n(defn- in-context\n  \"When f is executed, if (f) derefs any ratoms, they are then added to 'obj.captured'(*ratom-context*).\n\n  See function notify-deref-watcher! to know how *ratom-context* is updated\"\n  [obj f]\n  (binding [*ratom-context* obj]\n    (f)))\n\n(defn- deref-capture\n  \"Returns `(in-context f r)`.  Calls `_update-watching` on r with any\n  `deref`ed atoms captured during `in-context`, if any differ from the\n  `watching` field of r.  Clears the `dirty?` flag on r.\n\n  Inside '_update-watching' along with adding the ratoms in 'r.watching' of reaction,\n  the reaction is also added to the list of watches on each ratoms f derefs.\"\n  [f ^clj r]\n  (set! (.-captured r) nil)\n  (when (dev?)\n    (set! (.-ratomGeneration r) (set! generation (inc generation))))\n  (let [res (in-context r f)\n        c (.-captured r)]\n    (set! (.-dirty? r) false)\n    ;; Optimize common case where derefs occur in same order\n    (when-not (arr-eq c (.-watching r))\n      (._update-watching r c))\n    res))\n\n(defn- notify-deref-watcher!\n  \"Add `derefed` to the `captured` field of `*ratom-context*`.\n\n  See also `in-context`\"\n  [derefed]\n  (when-some [r *ratom-context*]\n    (let [c (.-captured r)]\n      (if (nil? c)\n        (set! (.-captured r) (array derefed))\n        (.push c derefed)))))\n\n(defn- check-watches [old new]\n  (when debug\n    (swap! -running + (- (count new) (count old))))\n  new)\n\n(defn- add-w [^clj this key f]\n  (let [w (.-watches this)]\n    (set! (.-watches this) (check-watches w (assoc w key f)))\n    (set! (.-watchesArr this) nil)))\n\n(defn- remove-w [^clj this key]\n  (let [w (.-watches this)]\n    (set! (.-watches this) (check-watches w (dissoc w key)))\n    (set! (.-watchesArr this) nil)))\n\n(defn- notify-w [^clj this old new]\n  (let [w (.-watchesArr this)\n        a (if (nil? w)\n            ;; Copy watches to array for speed\n            (->> (.-watches this)\n                 (reduce-kv #(doto %1 (.push %2) (.push %3)) #js[])\n                 (set! (.-watchesArr this)))\n            w)\n        len (alength a)]\n    (loop [i 0]\n      (when (< i len)\n        (let [k (aget a i)\n              f (aget a (inc i))]\n          (f k this old new))\n        (recur (+ 2 i))))))\n\n(defn- pr-atom [a writer opts s v]\n  (-write writer (str \"#object[reagent.ratom.\" s \" \"))\n  (pr-writer (binding [*ratom-context* nil] v) writer opts)\n  (-write writer \"]\"))\n\n\n;;; Queueing\n\n(defonce ^:private rea-queue nil)\n\n(defn- rea-enqueue [r]\n  (when (nil? rea-queue)\n    (set! rea-queue (array))\n    (batch/schedule))\n  (.push rea-queue r))\n\n(defn flush! []\n  (loop []\n    (let [q rea-queue]\n      (when-not (nil? q)\n        (set! rea-queue nil)\n        (dotimes [i (alength q)]\n          (._queued-run (aget q i)))\n        (recur)))))\n\n(set! batch/ratom-flush flush!)\n\n\n;;; Atom\n\n(defprotocol IReactiveAtom)\n\n(deftype RAtom [^:mutable state meta validator ^:mutable watches]\n  IAtom\n  IReactiveAtom\n\n  IEquiv\n  (-equiv [o other] (identical? o other))\n\n  IDeref\n  (-deref [this]\n    (notify-deref-watcher! this)\n    state)\n\n  IReset\n  (-reset! [a new-value]\n    (when-not (nil? validator)\n      (assert (validator new-value) \"Validator rejected reference state\"))\n    (let [old-value state]\n      (set! state new-value)\n      (when-not (nil? watches)\n        (notify-w a old-value new-value))\n      new-value))\n\n  ISwap\n  (-swap! [a f]          (-reset! a (f state)))\n  (-swap! [a f x]        (-reset! a (f state x)))\n  (-swap! [a f x y]      (-reset! a (f state x y)))\n  (-swap! [a f x y more] (-reset! a (apply f state x y more)))\n\n  IWithMeta\n  (-with-meta [_ new-meta] (RAtom. state new-meta validator watches))\n\n  IMeta\n  (-meta [_] meta)\n\n  IPrintWithWriter\n  (-pr-writer [a w opts] (pr-atom a w opts \"RAtom\" {:val (-deref a)}))\n\n  IWatchable\n  (-notify-watches [this old new] (notify-w this old new))\n  (-add-watch [this key f]        (add-w this key f))\n  (-remove-watch [this key]       (remove-w this key))\n\n  IHash\n  (-hash [this] (goog/getUid this)))\n\n(defn atom\n  \"Like clojure.core/atom, except that it keeps track of derefs.\"\n  ([x] (->RAtom x nil nil nil))\n  ([x & {:keys [meta validator]}] (->RAtom x meta validator nil)))\n\n\n;;; track\n\n(declare make-reaction)\n\n(defn- cached-reaction [f ^clj o k ^clj obj destroy]\n  (let [m (.-reagReactionCache o)\n        m (if (nil? m) {} m)\n        r (m k nil)]\n    (cond\n      (some? r) (-deref r)\n      (nil? *ratom-context*) (f)\n      :else (let [r (make-reaction\n                     f :on-dispose (fn [x]\n                                     (when debug (swap! -running dec))\n                                     (as-> (.-reagReactionCache o) _\n                                       (dissoc _ k)\n                                       (set! (.-reagReactionCache o) _))\n                                     (when (some? obj)\n                                       (set! (.-reaction obj) nil))\n                                     (when (some? destroy)\n                                       (destroy x))))\n                  v (-deref r)]\n              (set! (.-reagReactionCache o) (assoc m k r))\n              (when debug (swap! -running inc))\n              (when (some? obj)\n                (set! (.-reaction obj) r))\n              v))))\n\n(deftype Track [f args ^:mutable reaction]\n  IReactiveAtom\n\n  IDeref\n  (-deref [this]\n    (if-some [r reaction]\n      (-deref r)\n      (cached-reaction #(apply f args) f args this nil)))\n\n  IEquiv\n  (-equiv [_ ^clj other]\n    (and (instance? Track other)\n         (= f (.-f other))\n         (= args (.-args other))))\n\n  IHash\n  (-hash [_] (hash [f args]))\n\n  IPrintWithWriter\n  (-pr-writer [a w opts] (pr-atom a w opts \"Track\" {:val (-deref a)\n                                                    :f f})))\n\n(defn make-track [f args]\n  (Track. f args nil))\n\n(defn make-track! [f args]\n  (let [t (make-track f args)\n        r (make-reaction #(-deref t)\n                         :auto-run true)]\n    @r\n    r))\n\n(defn track [f & args]\n  {:pre [(ifn? f)]}\n  (make-track f args))\n\n(defn track! [f & args]\n  {:pre [(ifn? f)]}\n  (make-track! f args))\n\n;;; cursor\n\n(deftype RCursor [ratom path ^:mutable reaction\n                  ^:mutable state ^:mutable watches]\n  IAtom\n  IReactiveAtom\n\n  IEquiv\n  (-equiv [_ ^clj other]\n    (and (instance? RCursor other)\n         (= path (.-path other))\n         (= ratom (.-ratom other))))\n\n  Object\n  (_peek [this]\n    (binding [*ratom-context* nil]\n      (-deref this)))\n\n  (_set-state [this oldstate newstate]\n    (when-not (identical? oldstate newstate)\n      (set! state newstate)\n      (when (some? watches)\n        (notify-w this oldstate newstate))))\n\n  IDeref\n  (-deref [this]\n    (let [oldstate state\n          newstate (if-some [r reaction]\n                     (-deref r)\n                     (let [f (if (satisfies? IDeref ratom)\n                               #(get-in @ratom path)\n                               #(ratom path))]\n                       (cached-reaction f ratom path this nil)))]\n      (._set-state this oldstate newstate)\n      newstate))\n\n  IReset\n  (-reset! [this new-value]\n    (let [oldstate state]\n      (._set-state this oldstate new-value)\n      (if (satisfies? IDeref ratom)\n        (if (= path [])\n          (reset! ratom new-value)\n          (swap! ratom assoc-in path new-value))\n        (ratom path new-value))\n      new-value))\n\n  ISwap\n  (-swap! [a f]          (-reset! a (f (._peek a))))\n  (-swap! [a f x]        (-reset! a (f (._peek a) x)))\n  (-swap! [a f x y]      (-reset! a (f (._peek a) x y)))\n  (-swap! [a f x y more] (-reset! a (apply f (._peek a) x y more)))\n\n  IPrintWithWriter\n  (-pr-writer [a w opts] (pr-atom a w opts \"RCursor\" {:val (-deref a)\n                                                      :path path}))\n\n  IWatchable\n  (-notify-watches [this old new] (notify-w this old new))\n  (-add-watch [this key f]        (add-w this key f))\n  (-remove-watch [this key]       (remove-w this key))\n\n  IHash\n  (-hash [_] (hash [ratom path])))\n\n(defn cursor\n  [^clj src path]\n  (assert (or (satisfies? IReactiveAtom src)\n              (and (ifn? src)\n                   (not (vector? src))))\n          (str \"src must be a reactive atom or a function, not \"\n               (pr-str src)\n               \" while attempting to get path: \"\n               (pr-str path)))\n  (->RCursor src path nil nil nil))\n\n\n;;; with-let support\n\n(defn with-let-destroy [v]\n  (when-some [f (.-destroy v)]\n    (f)))\n\n(defn with-let-values [key]\n  (if-some [c *ratom-context*]\n    (cached-reaction array c key nil with-let-destroy)\n    (array)))\n\n\n;;;; reaction\n\n(defprotocol IDisposable\n  (dispose! [this])\n  (add-on-dispose! [this f]))\n\n(defprotocol IRunnable\n  (run [this]))\n\n(defn- handle-reaction-change [^clj this sender old new]\n  (._handle-change this sender old new))\n\n;; Fields of a Reaction javascript object\n;; - auto_run\n;; - captured\n;; - caught\n;; - f\n;; - ratomGeneration\n;; - state\n;; - watches\n;; - watching\n(deftype Reaction [f ^:mutable state ^:mutable ^boolean dirty? ^boolean nocache?\n                   ^:mutable watching ^:mutable watches ^:mutable auto-run\n                   ^:mutable caught]\n  IAtom\n  IReactiveAtom\n\n  IWatchable\n  (-notify-watches [this old new] (notify-w this old new))\n  (-add-watch [this key f]        (add-w this key f))\n  (-remove-watch [this key]\n    (let [was-empty (empty? watches)]\n      (remove-w this key)\n      (when (and (not was-empty)\n                 (empty? watches)\n                 (nil? auto-run))\n        (dispose! this))))\n\n  IReset\n  (-reset! [a newval]\n    (assert (fn? (.-on-set a)) \"Reaction is read only; on-set is not allowed\")\n    (let [oldval state]\n      (set! state newval)\n      (.on-set a oldval newval)\n      (notify-w a oldval newval)\n      newval))\n\n  ISwap\n  (-swap! [a f]          (-reset! a (f (._peek-at a))))\n  (-swap! [a f x]        (-reset! a (f (._peek-at a) x)))\n  (-swap! [a f x y]      (-reset! a (f (._peek-at a) x y)))\n  (-swap! [a f x y more] (-reset! a (apply f (._peek-at a) x y more)))\n\n  Object\n  (_peek-at [this]\n    (binding [*ratom-context* nil]\n      (-deref this)))\n\n  (_handle-change [this sender oldval newval]\n    (when-not (or (identical? oldval newval)\n                  dirty?)\n      (if (nil? auto-run)\n        (do\n          (set! dirty? true)\n          (rea-enqueue this))\n        (if (true? auto-run)\n          (._run this false)\n          (auto-run this)))))\n\n  (_update-watching [this derefed]\n    (let [new (set derefed)\n          old (set watching)]\n      (set! watching derefed)\n      (doseq [w (s/difference new old)]\n        (-add-watch w this handle-reaction-change))\n      (doseq [w (s/difference old new)]\n        (-remove-watch w this))))\n\n  (_queued-run [this]\n    (when (and dirty? (some? watching))\n      (._run this true)))\n\n  (_try-capture [this f]\n    (try\n      (set! caught nil)\n      (deref-capture f this)\n      (catch :default e\n        (set! state e)\n        (set! caught e)\n        (set! dirty? false))))\n\n  (_run [this check]\n    (let [oldstate state\n          res (if check\n                (._try-capture this f)\n                (deref-capture f this))]\n      (when-not nocache?\n        (set! state res)\n        ;; Use = to determine equality from reactions, since\n        ;; they are likely to produce new data structures.\n        (when-not (or (nil? watches)\n                      (= oldstate res))\n          (notify-w this oldstate res)))\n      res))\n\n  (_set-opts [this {:keys [auto-run on-set on-dispose no-cache]}]\n    (when (some? auto-run)\n      (set! (.-auto-run this) auto-run))\n    (when (some? on-set)\n      (set! (.-on-set this) on-set))\n    (when (some? on-dispose)\n      (set! (.-on-dispose this) on-dispose))\n    (when (some? no-cache)\n      (set! (.-nocache? this) no-cache)))\n\n  IRunnable\n  (run [this]\n    (flush!)\n    (._run this false))\n\n  IDeref\n  (-deref [this]\n    (when-some [e caught]\n      (throw e))\n    (let [non-reactive (nil? *ratom-context*)]\n      (when non-reactive\n        (flush!))\n      (if (and non-reactive (nil? auto-run))\n        (when dirty?\n          (let [oldstate state]\n            (set! state (f))\n            (when-not (or (nil? watches) (= oldstate state))\n              (notify-w this oldstate state))))\n        (do\n          (notify-deref-watcher! this)\n          (when dirty?\n            (._run this false)))))\n    state)\n\n  IDisposable\n  (dispose! [this]\n    (let [s state\n          wg watching]\n      (set! watching nil)\n      (set! state nil)\n      (set! auto-run nil)\n      (set! dirty? true)\n      (doseq [w (set wg)]\n        (-remove-watch w this))\n      (when (some? (.-on-dispose this))\n        (.on-dispose this s))\n      (when-some [a (.-on-dispose-arr this)]\n        (dotimes [i (alength a)]\n          ((aget a i) this)))))\n\n  (add-on-dispose! [this f]\n    ;; f is called with the reaction as argument when it is no longer active\n    (if-some [a (.-on-dispose-arr this)]\n      (.push a f)\n      (set! (.-on-dispose-arr this) (array f))))\n\n  IEquiv\n  (-equiv [o other] (identical? o other))\n\n  IPrintWithWriter\n  (-pr-writer [a w opts] (pr-atom a w opts \"Reaction\" {:val (-deref a)}))\n\n  IHash\n  (-hash [this] (goog/getUid this)))\n\n\n(defn make-reaction [f & {:keys [auto-run on-set on-dispose]}]\n  (let [reaction (->Reaction f nil true false nil nil nil nil)]\n    (._set-opts reaction {:auto-run auto-run\n                          :on-set on-set\n                          :on-dispose on-dispose})\n    reaction))\n\n\n\n(def ^:private temp-reaction (make-reaction nil))\n\n\n(defn run-in-reaction\n  \"Evaluates `f` and returns the result.  If `f` calls `deref` on any ratoms,\n   creates a new Reaction that watches those atoms and calls `run` whenever\n   any of those watched ratoms change.  Also, the new reaction is added to\n   list of 'watches' of each of the ratoms. The `run` parameter is a function\n   that should expect one argument.  It is passed `obj` when run.  The `opts`\n   are any options accepted by a Reaction and will be set on the newly created\n   Reaction. Sets the newly created Reaction to the `key` on `obj`.\"\n  [f obj key run opts]\n  (let [r temp-reaction\n        res (deref-capture f r)]\n    (when-not (nil? (.-watching r))\n      (set! temp-reaction (make-reaction nil))\n      (._set-opts r opts)\n      (set! (.-f r) f)\n      (set! (.-auto-run r) #(run obj))\n      (obj/set obj key r))\n    res))\n\n(defn check-derefs [f]\n  (let [ctx (js-obj)\n        res (in-context ctx f)]\n    [res (some? (.-captured ctx))]))\n\n\n;;; wrap\n\n(deftype Wrapper [^:mutable state callback ^:mutable ^boolean changed\n                  ^:mutable watches]\n\n  IAtom\n\n  IDeref\n  (-deref [this]\n    (when (dev?)\n      (when (and changed (some? *ratom-context*))\n        (warn \"derefing stale wrap: \"\n              (pr-str this))))\n    state)\n\n  IReset\n  (-reset! [this newval]\n    (let [oldval state]\n      (set! changed true)\n      (set! state newval)\n      (when (some? watches)\n        (notify-w this oldval newval))\n      (callback newval)\n      newval))\n\n  ISwap\n  (-swap! [a f]          (-reset! a (f state)))\n  (-swap! [a f x]        (-reset! a (f state x)))\n  (-swap! [a f x y]      (-reset! a (f state x y)))\n  (-swap! [a f x y more] (-reset! a (apply f state x y more)))\n\n  IEquiv\n  (-equiv [_ ^clj other]\n          (and (instance? Wrapper other)\n               ;; If either of the wrappers have changed, equality\n               ;; cannot be relied on.\n               (not changed)\n               (not (.-changed other))\n               (= state (.-state other))\n               (= callback (.-callback other))))\n\n  IWatchable\n  (-notify-watches [this old new] (notify-w this old new))\n  (-add-watch [this key f]        (add-w this key f))\n  (-remove-watch [this key]       (remove-w this key))\n\n  IPrintWithWriter\n  (-pr-writer [a w opts] (pr-atom a w opts \"Wrapper\" {:val (-deref a)})))\n\n(defn make-wrapper [value callback-fn args]\n  (->Wrapper value\n             (util/make-partial-fn callback-fn args)\n             false nil))\n\n\n\n\n#_(do\n  (defn ratom-perf []\n    (set! debug false)\n    (dotimes [_ 10]\n      (let [nite 100000\n            a (atom 0)\n            f (fn []\n                (quot @a 10))\n            mid (make-reaction f)\n            res (track! (fn []\n                          ;; (with-let [x 1])\n                          ;; @(track f)\n                          (inc @mid)\n                          ))]\n        @res\n        (time (dotimes [x nite]\n                (swap! a inc)\n                (flush!)))\n        (dispose! res))))\n  (ratom-perf))\n"]}