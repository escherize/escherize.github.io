{"version":3,"sources":["reagent/impl/component.cljs"],"mappings":"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","names":["reagent.impl.component/extract-props","v","p","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","cljs.core/map?","reagent.impl.component/extract-children","first-child","cljs.core/count","cljs.core.subvec.cljs$core$IFn$_invoke$arity$2","reagent.impl.component/props-argv","c","temp__5737__auto__","a","reagent.impl.util/shallow-obj-to-map","reagent.impl.component/get-argv","reagent.impl.component/get-props","reagent.impl.component/get-children","G__39603","js/module$node_modules$react$index.Children.toArray","cljs.core.into.cljs$core$IFn$_invoke$arity$2","reagent.impl.component/reagent-class?","cljs.core/fn?","G__39606","reagent.impl.component/react-class?","G__39611","reagent.impl.component/reagent-component?","reagent.impl.component/state-atom","this","sa","reagent.ratom.atom.cljs$core$IFn$_invoke$arity$1","reagent.impl.component/wrap-render","compiler","f","_","cljs.core/ifn?","js/Error","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","res","n","G__39614","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","cljs.core.into_array.cljs$core$IFn$_invoke$arity$1","cljs.core/vector?","reagent.impl.protocols/as-element","args","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","cljs.core/vector","reagent.impl.component/component-name","or__4185__auto__","G__39619","G__39620","reagent.impl.component/comp-name","reagent.impl.component/*current-component*","cljs.core/empty?","reagent.impl.component/do-render","*current-component*-orig-val__39624","*current-component*-temp-val__39625","ok","reagent.debug/has-console","reagent.debug/tracking","reagent.debug/track-console","js/console","reagent.impl.component/rat-opts","reagent.impl.component/custom-wrapper","key","G__39626","cljs.core/Keyword","props","state","cljs.core/reset!","oldprops","oldstate","nextprops","nextstate","reagent.impl.util/*always-update*","old-argv","new-argv","noargv","e39628","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","e","snapshot","G__39629","goog.object/get","reagent.ratom/dispose!","reagent.impl.batching/mark-rendered","error","info","reagent.impl.component/get-wrapper","wrap","and__4174__auto__","reagent.impl.component/obligatory","reagent.impl.component/dash-to-method-name","reagent.impl.util/memoize-1","reagent.impl.util/dash-to-method-name","reagent.impl.component/camelify-map-keys","fun-map","cljs.core/reduce-kv","m","k","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","reagent.impl.component/add-obligatory","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","reagent.impl.component/wrap-funs","fmap","renders","cljs.core/select-keys","render-fun","cljs.core/vals","cljs.core/first","cljs.core/not","legacy-render","name","reagent.impl.util/fun-name","cljs.core.gensym.cljs$core$IFn$_invoke$arity$1","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","reagent.impl.util/*non-reactive*","rat","reagent.ratom/run-in-reaction","reagent.impl.batching/queue-render","reagent.impl.component/map-to-js","o","G__39685","G__39687","G__39688","G__39689","goog.object/set","cljs.core/name","reagent.impl.component/cljsify","body","reagent.impl.component/built-in-static-method-names","reagent.impl.component/create-class","methods","cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic","cljs.core/dissoc","static-methods","display-name","get-initial-state","construct","cmp","context","updater","js/module$node_modules$react$index.Component","reagent.impl.batching/next-mount-count","G__39690","G__39691","G__39692","goog.object/extend","writer","opt","cljs.core/-write","reagent.impl.component/cached-react-class","G__39697","G__39698","reagent.impl.protocols/get-id","reagent.impl.component/cache-react-class","constructor","G__39699","G__39700","G__39701","reagent.impl.component/fn-to-class","spec","cljs.core/meta","withrender","reagent.impl.component/as-class","tag","cached-class","reagent.impl.component/reactify-component","comp","reagent.impl.component/functional-wrap-render","argv","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","reagent.impl.component/functional-do-render","*current-component*-orig-val__39705","*current-component*-temp-val__39706","reagent.impl.component/functional-render","jsprops","vec__39707","update-count","js/module$node_modules$react$index.useState","state-ref","js/module$node_modules$react$index.useRef","obj","cljs.core/inc","reagent-state","G__39710","G__39711","js/module$node_modules$react$index.useEffect","G__39712","reagent.impl.component/functional-render-memo-fn","prev-props","next-props","e39714","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","reagent.impl.component/functional-render-fn","js/module$node_modules$react$index.memo"],"sourcesContent":["(ns reagent.impl.component\n  (:require [goog.object :as gobj]\n            [react :as react]\n            [reagent.impl.util :as util]\n            [reagent.impl.batching :as batch]\n            [reagent.impl.protocols :as p]\n            [reagent.ratom :as ratom]\n            [reagent.debug :refer-macros [dev? warn error warn-unless assert-callable]]))\n\n(declare ^:dynamic *current-component*)\n\n\n;;; Argv access\n\n(defn extract-props [v]\n  (let [p (nth v 1 nil)]\n    (if (map? p) p)))\n\n(defn extract-children [v]\n  (let [p (nth v 1 nil)\n        first-child (if (or (nil? p) (map? p)) 2 1)]\n    (if (> (count v) first-child)\n      (subvec v first-child))))\n\n(defn props-argv [^js/React.Component c p]\n  (if-some [a (.-argv p)]\n    a\n    [(.-constructor c) (util/shallow-obj-to-map p)]))\n\n(defn get-argv [^js/React.Component c]\n  (props-argv c (.-props c)))\n\n(defn get-props [^js/React.Component c]\n  (let [p (.-props c)]\n    (if-some [v (.-argv p)]\n      (extract-props v)\n      (util/shallow-obj-to-map p))))\n\n(defn get-children [^js/React.Component c]\n  (let [p (.-props c)]\n    (if-some [v (.-argv p)]\n      (extract-children v)\n      (->> (.-children p)\n           (react/Children.toArray)\n           (into [])))))\n\n(defn ^boolean reagent-class? [c]\n  (and (fn? c)\n       (some? (some-> c (.-prototype) (.-reagentRender)))))\n\n(defn ^boolean react-class? [c]\n  (and (fn? c)\n       (some? (some-> c (.-prototype) (.-render)))))\n\n(defn ^boolean reagent-component? [^clj c]\n  (some? (.-reagentRender c)))\n\n;;; State\n\n(defn state-atom [^clj this]\n  (let [sa (.-cljsState this)]\n    (if-not (nil? sa)\n      sa\n      (set! (.-cljsState this) (ratom/atom nil)))))\n\n;;; Rendering\n\n(defn wrap-render\n  \"Calls the render function of the component `c`.  If result `res` evaluates to a:\n     1) Vector (form-1 component) - Treats the vector as hiccup and returns\n        a react element with a render function based on that hiccup\n     2) Function (form-2 component) - updates the render function to `res` i.e. the internal function\n        and calls wrap-render again (`recur`), until the render result doesn't evaluate to a function.\n     3) Anything else - Returns the result of evaluating `c`\"\n  [^clj c compiler]\n  (let [f (.-reagentRender c)\n        _ (assert-callable f)\n        ;; cljsLegacyRender tells if this calls was defined\n        ;; using :render instead of :reagent-render\n        ;; in that case, the :render fn is called with just `this` as argument.\n        res (if (true? (.-cljsLegacyRender c))\n              (.call f c c)\n              (let [v (get-argv c)\n                    n (count v)]\n                (case n\n                  1 (.call f c)\n                  2 (.call f c (nth v 1))\n                  3 (.call f c (nth v 1) (nth v 2))\n                  4 (.call f c (nth v 1) (nth v 2) (nth v 3))\n                  5 (.call f c (nth v 1) (nth v 2) (nth v 3) (nth v 4))\n                  (.apply f c (.slice (into-array v) 1)))))]\n    (cond\n      (vector? res) (p/as-element compiler res)\n      (ifn? res) (let [f (if (reagent-class? res)\n                           (fn [& args]\n                             (p/as-element compiler (apply vector res args)))\n                           res)]\n                   (set! (.-reagentRender c) f)\n                   (recur c compiler))\n      :else res)))\n\n(defn component-name [c]\n  (or (some-> c .-constructor .-displayName)\n      (some-> c .-constructor .-name)))\n\n(defn comp-name []\n  (if (dev?)\n    (let [c *current-component*\n          n (component-name c)]\n      (if-not (empty? n)\n        (str \" (in \" n \")\")\n        \"\"))\n    \"\"))\n\n(defn do-render [c compiler]\n  (binding [*current-component* c]\n    (if (dev?)\n      ;; Log errors, without using try/catch (and mess up call stack)\n      (let [ok (array false)]\n        (try\n          (let [res (wrap-render c compiler)]\n            (aset ok 0 true)\n            res)\n          (finally\n            (when-not (aget ok 0)\n              (error (str \"Error rendering component\"\n                          (comp-name)))))))\n      (wrap-render c compiler))))\n\n\n;;; Method wrapping\n\n(def rat-opts {:no-cache true})\n\n(defn custom-wrapper [key f]\n  (case key\n    :getDefaultProps\n    (throw (js/Error. \"getDefaultProps not supported\"))\n\n    :getDerivedStateFromProps\n    (fn getDerivedStateFromProps [props state]\n      ;; Read props from Reagent argv\n      (.call f nil (if-some [a (.-argv props)] (extract-props a) props) state))\n\n    ;; In ES6 React, this is now part of the constructor\n    :getInitialState\n    (fn getInitialState [c]\n      (reset! (state-atom c) (.call f c c)))\n\n    :getSnapshotBeforeUpdate\n    (fn getSnapshotBeforeUpdate [oldprops oldstate]\n      (this-as c (.call f c c (props-argv c oldprops) oldstate)))\n\n    ;; Deprecated - warning in 16.9 will work through 17.x\n    :componentWillReceiveProps\n    (fn componentWillReceiveProps [nextprops]\n      (this-as c (.call f c c (props-argv c nextprops))))\n\n    ;; Deprecated - will work in 17.x\n    :UNSAFE_componentWillReceiveProps\n    (fn componentWillReceiveProps [nextprops]\n      (this-as c (.call f c c (props-argv c nextprops))))\n\n    :shouldComponentUpdate\n    (fn shouldComponentUpdate [nextprops nextstate]\n      (or util/*always-update*\n          (this-as c\n                   ;; Don't care about nextstate here, we use forceUpdate\n                   ;; when only when state has changed anyway.\n                   (let [old-argv (.. c -props -argv)\n                         new-argv (.-argv nextprops)\n                         noargv (or (nil? old-argv) (nil? new-argv))]\n                     (cond\n                       (nil? f) (or noargv (try (not= old-argv new-argv)\n                                                (catch :default e\n                                                  (warn \"Exception thrown while comparing argv's in shouldComponentUpdate: \" old-argv \" \" new-argv \" \" e)\n                                                  false)))\n                       noargv (.call f c c (get-argv c) (props-argv c nextprops))\n                       :else  (.call f c c old-argv new-argv))))))\n\n    ;; Deprecated - warning in 16.9 will work through 17.x\n    :componentWillUpdate\n    (fn componentWillUpdate [nextprops nextstate]\n      (this-as c (.call f c c (props-argv c nextprops) nextstate)))\n\n    ;; Deprecated - will work in 17.x\n    :UNSAFE_componentWillUpdate\n    (fn componentWillUpdate [nextprops nextstate]\n      (this-as c (.call f c c (props-argv c nextprops) nextstate)))\n\n    :componentDidUpdate\n    (fn componentDidUpdate [oldprops oldstate snapshot]\n      (this-as c (.call f c c (props-argv c oldprops) oldstate snapshot)))\n\n    ;; Deprecated - warning in 16.9 will work through 17.x\n    :componentWillMount\n    (fn componentWillMount []\n      (this-as c (.call f c c)))\n\n    ;; Deprecated - will work in 17.x\n    :UNSAFE_componentWillMount\n    (fn componentWillMount []\n      (this-as c (.call f c c)))\n\n    :componentDidMount\n    (fn componentDidMount []\n      (this-as c (.call f c c)))\n\n    :componentWillUnmount\n    (fn componentWillUnmount []\n      (this-as c\n               (some-> (gobj/get c \"cljsRatom\") ratom/dispose!)\n               (batch/mark-rendered c)\n               (when-not (nil? f)\n                 (.call f c c))))\n\n    :componentDidCatch\n    (fn componentDidCatch [error info]\n      (this-as c (.call f c c error info)))\n\n    nil))\n\n(defn get-wrapper [key f]\n  (let [wrap (custom-wrapper key f)]\n    (when (and wrap f)\n      (assert-callable f))\n    (or wrap f)))\n\n;; Though the value is nil here, the wrapper function will be\n;; added to class to manage Reagent ratom lifecycle.\n(def obligatory {:shouldComponentUpdate nil\n                 :componentWillUnmount nil})\n\n(def dash-to-method-name (util/memoize-1 util/dash-to-method-name))\n\n(defn camelify-map-keys [fun-map]\n  (reduce-kv (fn [m k v]\n               (assoc m (-> k dash-to-method-name keyword) v))\n             {} fun-map))\n\n(defn add-obligatory [fun-map]\n  (merge obligatory fun-map))\n\n(defn wrap-funs [fmap compiler]\n  (when (dev?)\n    (let [renders (select-keys fmap [:render :reagentRender])\n          render-fun (-> renders vals first)]\n      (assert (not (:componentFunction fmap)) \":component-function is no longer supported, use :reagent-render instead.\")\n      (assert (pos? (count renders)) \"Missing reagent-render\")\n      (assert (== 1 (count renders)) \"Too many render functions supplied\")\n      (assert-callable render-fun)))\n  (let [render-fun (or (:reagentRender fmap)\n                       (:render fmap))\n        legacy-render (nil? (:reagentRender fmap))\n        name (or (:displayName fmap)\n                 (util/fun-name render-fun)\n                 (str (gensym \"reagent\")))\n        fmap (reduce-kv (fn [m k v]\n                          (assoc m k (get-wrapper k v)))\n                        {} fmap)]\n    (assoc fmap\n           :displayName name\n           :cljsLegacyRender legacy-render\n           :reagentRender render-fun\n           :render (fn render []\n                     (this-as c (if util/*non-reactive*\n                                  (do-render c compiler)\n                                  (let [^clj rat (gobj/get c \"cljsRatom\")]\n                                    (batch/mark-rendered c)\n                                    (if (nil? rat)\n                                      (ratom/run-in-reaction #(do-render c compiler) c \"cljsRatom\"\n                                                             batch/queue-render rat-opts)\n                                      (._run rat false)))))))))\n\n(defn map-to-js [m]\n  (reduce-kv (fn [o k v]\n               (doto o\n                 (gobj/set (name k) v)))\n             #js{} m))\n\n(defn cljsify [body compiler]\n  (-> body\n      camelify-map-keys\n      add-obligatory\n      (wrap-funs compiler)))\n\n;; Idea from:\n;; https://gist.github.com/pesterhazy/2a25c82db0519a28e415b40481f84554\n;; https://gist.github.com/thheller/7f530b34de1c44589f4e0671e1ef7533#file-es6-class-cljs-L18\n\n(def built-in-static-method-names\n  [:childContextTypes :contextTypes :contextType\n   :getDerivedStateFromProps :getDerivedStateFromError])\n\n(defn create-class\n  \"Creates JS class based on provided Clojure map.\n\n  Map keys should use `React.Component` method names (https://reactjs.org/docs/react-component.html),\n  and can be provided in snake-case or camelCase.\n  Constructor function is defined using key `:getInitialState`.\n\n  React built-in static methods or properties are automatically defined as statics.\"\n  [body compiler]\n  {:pre [(map? body)]}\n  (let [body (cljsify body compiler)\n        methods (map-to-js (apply dissoc body :displayName :getInitialState :constructor\n                                  :render :reagentRender\n                                  built-in-static-method-names))\n        static-methods (map-to-js (select-keys body built-in-static-method-names))\n        display-name (:displayName body)\n        get-initial-state (:getInitialState body)\n        construct (:constructor body)\n        cmp (fn [props context updater]\n              (this-as this\n                (.call react/Component this props context updater)\n                (when construct\n                  (construct this props))\n                (when get-initial-state\n                  (set! (.-state this) (get-initial-state this)))\n                (set! (.-cljsMountOrder ^clj this) (batch/next-mount-count))\n                this))]\n\n    (gobj/extend (.-prototype cmp) (.-prototype react/Component) methods)\n\n    ;; These names SHOULD be mangled by Closure so we can't use goog/extend\n\n    (when (:render body)\n      (set! (.-render ^js (.-prototype cmp)) (:render body)))\n\n    (when (:reagentRender body)\n      (set! (.-reagentRender ^clj (.-prototype cmp)) (:reagentRender body)))\n\n    (when (:cljsLegacyRender body)\n      (set! (.-cljsLegacyRender ^clj (.-prototype cmp)) (:cljsLegacyRender body)))\n\n    (gobj/extend cmp react/Component static-methods)\n\n    (when display-name\n      (set! (.-displayName cmp) display-name)\n      (set! (.-cljs$lang$ctorStr cmp) display-name)\n      (set! (.-cljs$lang$ctorPrWriter cmp)\n            (fn [this writer opt]\n              (cljs.core/-write writer display-name))))\n\n    (set! (.-cljs$lang$type cmp) true)\n    (set! (.. cmp -prototype -constructor) cmp)\n\n    cmp))\n\n;; Cache result to the tag but per compiler ID\n;; TODO: Generate cache & get methods to the Object using macro,\n;; can generate code calling interop forms.\n(defn cached-react-class [compiler ^clj c]\n  (gobj/get c (p/get-id compiler)))\n\n(defn cache-react-class [compiler ^clj c constructor]\n  (gobj/set c (p/get-id compiler) constructor)\n  constructor)\n\n(defn fn-to-class [compiler f]\n  (assert-callable f)\n  (warn-unless (not (and (react-class? f)\n                         (not (reagent-class? f))))\n               \"Using native React classes directly in Hiccup forms \"\n               \"is not supported. Use create-element or \"\n               \"adapt-react-class instead: \" (or (util/fun-name f)\n                                                 f)\n               (comp-name))\n  (if (reagent-class? f)\n    (cache-react-class compiler f f)\n    (let [spec (meta f)\n          withrender (assoc spec :reagent-render f)\n          res (create-class withrender compiler)]\n      (cache-react-class compiler f res))))\n\n(defn as-class [tag compiler]\n  (if-some [cached-class (cached-react-class compiler tag)]\n    cached-class\n    (fn-to-class compiler tag)))\n\n(defn reactify-component [comp compiler]\n  (if (react-class? comp)\n    comp\n    (as-class comp compiler)))\n\n(defn functional-wrap-render\n  [compiler c]\n  (let [f (.-reagentRender c)\n        _ (assert-callable f)\n        argv (.-argv c)\n        res (apply f argv)]\n    (cond\n      (vector? res) (p/as-element compiler res)\n      (ifn? res) (let [f (if (reagent-class? res)\n                           (fn [& args]\n                             (p/as-element compiler (apply vector res args)))\n                           res)]\n                   (set! (.-reagentRender c) f)\n                   (recur compiler c))\n      :else res)))\n\n(defn functional-do-render [compiler c]\n  (binding [*current-component* c]\n    (if (dev?)\n      ;; Log errors, without using try/catch (and mess up call stack)\n      (let [ok (array false)]\n        (try\n          (let [res (functional-wrap-render compiler c)]\n            (aset ok 0 true)\n            res)\n          (finally\n            (when-not (aget ok 0)\n              (error (str \"Error rendering component\" (comp-name)))))))\n      (functional-wrap-render compiler c))))\n\n(defn functional-render [compiler jsprops]\n  (if util/*non-reactive*\n    ;; Non-reactive component needs just the render fn and argv\n    (functional-do-render compiler jsprops)\n    (let [argv (.-argv jsprops)\n          tag (.-reagentRender jsprops)\n\n          ;; Use counter to trigger render manually.\n          [_ update-count] (react/useState 0)\n\n          ;; This object mimics React Class attributes and methods.\n          ;; To support form-2 components, even the render fn needs to\n          ;; be stored as it is created during the first render,\n          ;; and subsequent renders need to retrieve the created fn.\n          state-ref (react/useRef)\n\n          _ (when-not (.-current state-ref)\n              (let [obj #js {}]\n                (set! (.-forceUpdate obj) (fn [] (update-count inc)))\n                (set! (.-cljsMountOrder obj) (batch/next-mount-count))\n                ;; Use reagentRender name, as that is also used\n                ;; by class components, and some checks.\n                ;; reagentRender is replaced with form-2 inner fn,\n                ;; constructor refers to the original fn.\n                (set! (.-constructor obj) tag)\n                (set! (.-reagentRender obj) tag)\n\n                (set! (.-current state-ref) obj)))\n\n          reagent-state (.-current state-ref)\n\n          ;; FIXME: Access cljsRatom using interop forms\n          rat (gobj/get reagent-state \"cljsRatom\")]\n\n      (react/useEffect\n        (fn mount []\n          (fn unmount []\n            (some-> (gobj/get reagent-state \"cljsRatom\") ratom/dispose!)))\n        ;; Ignore props - only run effect once on mount and unmount\n        #js [])\n\n      ;; Argv is also stored in the state,\n      ;; so reaction fn will always see the latest value.\n      (set! (.-argv reagent-state) argv)\n\n      (batch/mark-rendered reagent-state)\n\n      ;; static-fns :render\n      (if (nil? rat)\n        (ratom/run-in-reaction\n          ;; Mock Class component API\n          #(functional-do-render compiler reagent-state)\n          reagent-state\n          \"cljsRatom\"\n          batch/queue-render\n          rat-opts)\n        ;; TODO: Consider passing props here, instead of keeping them in state?\n        (._run rat false)))))\n\n(defn functional-render-memo-fn\n  [prev-props next-props]\n  (let [old-argv (.-argv prev-props)\n        new-argv (.-argv next-props)]\n    (and (false? util/*always-update*)\n         (try\n           (= old-argv new-argv)\n           (catch :default e\n             (warn \"Exception thrown while comparing argv's in shouldComponentUpdate: \" old-argv \" \" new-argv \" \" e)\n             false)))))\n\n(defn functional-render-fn\n  \"Create copy of functional-render with displayName set to name of the\n  original Reagent component.\"\n  [compiler tag]\n  ;; TODO: Could be disabled for optimized builds?\n  ;; Or not currently - the memo wrap is required.\n  (or (cached-react-class compiler tag)\n      (let [f (fn [jsprops] (functional-render compiler jsprops))\n            _ (set! (.-displayName f) (util/fun-name tag))\n            f (react/memo f functional-render-memo-fn)]\n        (cache-react-class compiler tag f)\n        f)))\n"]}