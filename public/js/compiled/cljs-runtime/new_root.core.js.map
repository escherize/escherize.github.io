{"version":3,"sources":["new_root/core.cljs"],"mappings":"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","names":["js/new_root","js/new_root.core","js/new_root.core.*pointer","new_root.core/*pointer","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","js/new_root.core.app-state","new_root.core/app-state","new_root.core/double-thingies","p1__74181#","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/update","new_root.core/link","text","post-id","reitit.frontend.easy.href.cljs$core$IFn$_invoke$arity$2","new_root.core/post-0","new_root.core/post-1","new-root.paint-snake-two.core/view","new_root.core/post-2","new-root.simple-dag/view","new_root.core/post-3","new-root.paint/view","new_root.core/post-4","new-root.gen-art/view","new_root.core/scratch","new-root.scratch/view","new_root.core/post-5","new-root.neumorph/view","new_root.core/post-6","new-root.gen-art-2/view","new_root.core/post-7","new-root.gen-art-3/view","new_root.core/post-8","new_root.core/post-9","new-root.leds/view","new_root.core/posts","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core.juxt.cljs$core$IFn$_invoke$arity$2","cljs.core/identity","cljs.core.into.cljs$core$IFn$_invoke$arity$2","new_root.core/nav","cljs.core.into.cljs$core$IFn$_invoke$arity$1","reitit.frontend.easy.href.cljs$core$IFn$_invoke$arity$1","cljs.core.repeat.cljs$core$IFn$_invoke$arity$2","cljs.core/deref","new_root.core/blog","page","p__74182","map__74183","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","new_root.core/teaser","_","id","title","preview","content","no-content","release","new_root.core/btn-style","new_root.core/squirt","x","G__74185","Math/sqrt","Math/abs","G__74186","new_root.core/clamp","lo","n","hi","x__4276__auto__","y__4277__auto__","x__4273__auto__","y__4274__auto__","p__74187","map__74188","new_root.core/style-fn","y","h","unit-x","unit-y","new_root.core/shadow-box","*pointer","*my-position","reagent.core/create-class","this","cljs.core/reset!","new-root.neumorph/find-location","reagent.core/dom-node","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","new-root.neumorph/p1+p2->box-shadow-main","p__74190","map__74191","new_root.core/shadow-teaser","new_root.core/footer","new_root.core/width","js/window.innerWidth","new_root.core/height","js/window.innerHeight","js/console.log","new_root.core/to-scale","range","new_root.core/home","cnt","*hide-ball","*ballspeed","*stutter?","raf-f","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/+","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","cljs.core/not","G__74193","Math/sin","G__74194","Math/cos","js/requestAnimationFrame","cljs.core/*","cljs.core/first","cljs.core/second","iter__4582__auto__","s__74196","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","cljs.core/count","b__74198","cljs.core/chunk-buffer","i__74197","map__74199","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__74195","cljs.core/chunk-rest","map__74201","cljs.core/cons","cljs.core/rest","exclude-post?","p","cljs.core/vals","cljs.core.distinct.cljs$core$IFn$_invoke$arity$1","cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2","cljs.core/reverse","new_root.core/projects","s__74204","b__74206","i__74205","iter__74203","project","clojure.string/capitalize","new_root.core/post","match","temp__5733__auto__","map__74207","posts","post","or__4185__auto__","js/parseInt","pure?","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","new_root.core/about","new_root.core/routes","cljs.core/int?","new_root.core/current-page","view","new_root.core/start","G__74209","G__74210","reagent.core/render-component","js/document","new_root.core/init","reitit.frontend.easy/start!","reitit.frontend.router.cljs$core$IFn$_invoke$arity$1","m","cljs.core/assoc","new-root.paint-snake-two.core/init","new_root.core/stop","cljs.core/chunk-first"],"sourcesContent":["(ns new_root.core\n  (:require [clojure.string :as str]\n            [new-root.gen-art :as gen-art]\n            [new-root.gen-art-2 :as gen-art2]\n            [new-root.gen-art-3 :as gen-art3]\n            [new-root.leds :as leds]\n            [new-root.neumorph :as neumorph]\n            [new-root.paint :as paint]\n            [new-root.paint-snake-two.core :as ps-two]\n            [new-root.scratch :as scratch]\n            [new-root.simple-dag :as simple-dag]\n            [reagent.core :as r]\n            [reitit.frontend :as rfe]\n            [reitit.frontend.easy :as rfee]))\n\n(defonce *pointer (r/atom [301 301]))\n(defonce app-state (r/atom {:thingies 1}))\n\n(defn double-thingies []\n  (swap! app-state update :thingies #(* 2 %)))\n\n(defn link [text post-id]\n  [:a {:href (rfee/href ::post {:id post-id})} text])\n\n(def post-0\n  {:id \"hello-world\"\n   :sorder 0\n   :title \"Hello World\"\n   :preview (fn []\n              [:div\n               [:p \"Welcome to my blog!\"]\n               [:p \"It's built as a single page app using\n               Clojurescript and reagent, which means the entire thing is\n               completely programmable. Visit my contents \" (link \"here.\" \"hello-world\")]\n               [:button\n                {:style {:cursor :pointer}\n                 :on-click double-thingies}\n                \"Click here to see stuff happen\"]])\n   :content (fn []\n              [:div\n               [:h1 \"I'm here, and im post 0.\"]\n               [:p \"Here's \" (link \"Post 1\" \"snake-game\") \".\"]\n               [:p \"Its a game I'm working on!\"]])})\n(def post-1\n  {:id \"snake-game\"\n   :sorder 1\n   :title \"Adding goals and a way to die\"\n   :preview (fn [] [:div \"This is a riff on snake\"])\n   :content ps-two/view})\n\n(def post-2\n  {:id \"force-graph\"\n   :sorder 2\n   :title \"Force Directed Graph\"\n   :preview (fn [] [:div \"An updatable d3 Force Directed Graph.\"])\n   :content simple-dag/view})\n\n(def post-3\n  {:id \"paint\"\n   :sorder 3\n   :title \"Paint fill game\"\n   :pure true\n   :preview (fn []\n              [:div\n               [:p \"Inspired by a python game I found on my raspberry pi\"]\n               [:p \"Flood the canvas from the top left\"]])\n   :content paint/view})\n\n(def post-4\n  {:id \"gen-art\"\n   :sorder 4\n   :title \"Generative Art\"\n   :pure true\n   :preview (fn [] [:div \"Just getting warmed up\"])\n   :content gen-art/view})\n\n(def scratch\n  {:id \"scratch\"\n   :title \"scratch\"\n   :exclude-post? true\n   :pure true\n   :preview (fn [] [:div])\n   :content scratch/view})\n\n(def post-5\n  {:id \"neumorph\"\n   :sorder 5\n   :title \"Dynamic Neumorphism\"\n   :pure false\n   :preview (fn [] [:div \"Yeah.. it's \"(link \"trendy\" \"neumorph\") \".\"])\n   :content neumorph/view})\n\n(def post-6\n  {:id \"gen-art-2\"\n   :sorder 6\n   :title \"More Art\"\n   :pure true\n   :preview (fn [] [:div \"Where circles don't overlap\"])\n   :content gen-art2/view})\n\n(def post-7\n  {:id \"gen-art-3\"\n   :sorder 7\n   :title \"Even More Art\"\n   :pure true\n   :preview (fn [] [:div \"Vector Fields 101\"])\n   :content gen-art3/view})\n\n(def post-8\n  {:id \"pico8\"\n   :sorder 8\n   :title \"Pico-8\"\n   :pure true\n   :no-content true\n   :preview (fn []\n              [:div\n               \"To play, use the arrow keys and z, and x.\"\n               \"They also work on mobile.\"\n               [:ul\n                [:li>a {:style {:font-size 20}\n                        :href \"/works/pico8/tetris_attack\"} \"Tetris Attack v1.1\"]\n                [:li>a {:style {:font-size 20}\n                        :href \"/works/pico8/ammo_thruster\"} \"Ammo Thruster v0.9\"]\n                [:li>a {:style {:font-size 20}\n                        :href \"/works/pico8/sliding_tiles\"} \"Sliding Tiles v0.4\"]\n                [:li>a {:style {:font-size 20}\n                        :href \"/works/pico8/gunner_men\"} \"Gunner Men 0.1\"]]])})\n\n(def post-9\n  {:id \"light-strips\"\n   :sorder 9\n   :title \"Working with LED Strips\"\n   :pure true\n   :preview (fn []\n              [:div {:style {:cursor :pointer\n                             :font-size 40}}\n               \"\ud83d\udca1\ud83d\udca1\ud83d\udca1\ud83d\udca1\ud83d\udca1\"])\n   :content leds/view})\n\n(defn posts []\n  (->> [post-1 post-2 post-3 post-4 post-5 post-6\n        ;; fucked up idk why :D\n        ;; post-7\n        post-8\n        post-9\n        scratch]\n       (map (juxt :id identity))\n       (into {})))\n\n(defn nav []\n  [:div.nav\n   (into\n    [:span\n     [:span [:a {:href (rfee/href ::home)} \"Home\"]]\n     (repeat (:thingies @app-state)\n             [:span {:style {:cursor :pointer\n                             :user-select :none}\n                     :on-click double-thingies} \"  |  \"])\n     [:span [:a {:href (rfee/href ::projects)} \"Projects\"]]\n     #_(repeat (:thingies @app-state) \"  |  \")\n     #_[:span [:a {:href (rfee/href ::about)} \"About\"]]])])\n\n(defn blog [page]\n  (into\n   [:div.container\n    [:div.row [nav]]\n    [:div.row page]]))\n\n(defn teaser [{:as _ :keys [id title preview content no-content release]}]\n  [:div.teaser-card\n   {:style {:margin \"30px\"\n            :padding \"10px 20px 20px 30px\"}}\n   [:h3 (if no-content\n          title\n          (link title id))]\n   [:div.row (cond preview [preview]\n                   content [content]\n                   :else [:h2 title])]])\n\n(def btn-style\n  {:margin \"25px\"\n   :background-color \"#dde\"\n   :text-align \"center\"\n   :border \"1px #5C3449 solid\"\n   :border-radius 10\n   :padding \"30px\"})\n\n(defn squirt [x]\n  (if (> x 0)\n    (Math/sqrt (Math/abs x))\n    (* -1 (Math/sqrt (Math/abs x)))))\n\n(defn clamp [lo n hi]\n  (min hi (max n lo)))\n\n(defn style-fn [{:keys [x y h unit-x unit-y]}]\n  {:box-shadow (str (* 0.8 (squirt x)) \"px \"\n                    (* 0.8 (squirt y)) \"px \"\n                    \"0px \" ;; blur\n                    \"0px \" ;; spread\n                    (str \"hsl(\" (/ h 5) \",50%,65%)\"))\n   :background-color (str \"hsl(\" (- (/ h 5) 10) \",50%,93%)\")})\n\n(defn shadow-box [*pointer content]\n  (let [*my-position (r/atom [])]\n    (r/create-class\n     {:component-did-mount\n      (fn [this] (reset! *my-position (neumorph/find-location (r/dom-node this))))\n      :reagent-render\n      (fn [*pointer content]\n        [:div\n         {:style (merge\n                  btn-style\n                  (when @*my-position\n                    (style-fn\n                     (neumorph/p1+p2->box-shadow-main @*pointer @*my-position))))}\n         content\n         (when false\n           [:<>\n            [:p \"origin: \" (pr-str @*pointer)]\n            [:p \"my position: \" (pr-str @*my-position)]])])})))\n\n(defn shadow-teaser\n  [*pointer\n   {:as _ :keys [id title preview no-content content release]}]\n  (let [*my-position (r/atom [])]\n    (r/create-class\n     {:component-did-mount\n      (fn [this] (reset! *my-position (neumorph/find-location (r/dom-node this))))\n      :reagent-render\n      (fn [*pointer content]\n        [:div\n         {:style (merge\n                  btn-style\n                  (when @*my-position\n                    (style-fn\n                     (neumorph/p1+p2->box-shadow-main @*pointer @*my-position))))}\n         [:div\n          [:h3 (if no-content\n                 title\n                 (link title id))]\n          [:div.row (cond preview [preview]\n                          content [content]\n                          :else [:h2 title])]]\n         (when false\n           [:<>\n            [:p \"origin: \" (pr-str @*pointer)]\n            [:p \"my position: \" (pr-str @*my-position)]])])})))\n\n(defn footer []\n  [:div {:style {:height 100}}])\n\n(defn width [] js/window.innerWidth)\n(defn height [] js/window.innerHeight)\n\n(js/console.log \"width:\" (width))\n(js/console.log \"height:\" (height))\n\n(defn to-scale [range n]\n  (+ (* range 0.45) (* range n 0.35)))\n\n(defn home [_]\n  (let [cnt (r/atom 0)\n        *hide-ball (r/atom true)\n        *ballspeed (r/atom 0.03)\n        *stutter? (r/atom false)\n        raf-f (fn raf-f []\n                (swap! cnt + @*ballspeed)\n                (swap! *stutter? not)\n                (reset! *pointer [(to-scale (width) (Math/sin @cnt))\n                                  (to-scale (height) (Math/cos (* 1.6 @cnt)))])\n                (js/requestAnimationFrame raf-f))]\n    (js/requestAnimationFrame raf-f)\n    (fn [_]\n      [:div\n       [:div {:style {:position \"absolute\"\n                      :cursor :pointer\n                      :left 0\n                      :top 0\n                      :font-size 9\n                      :width 50\n                      :height 20\n                      :background-color \"#dcd\"}\n              :on-click (fn [] (swap! *hide-ball not))}\n        \" Toggle Ball\"]\n       [:div {:style {:position \"absolute\"\n                      :user-select \"none\"\n                      :cursor :pointer\n                      :left 0\n                      :top 21\n                      :font-size 9\n                      :width 50\n                      :height 20\n                      :background-color \"#dcd\"}\n              :on-click #(swap! *ballspeed + 0.01)}\n        \" Speed \u2b06\ufe0f\"]\n       (when (and (> @*ballspeed 0.15) @*stutter?)\n         [:div {:style {:position \"absolute\"\n                        :top 54\n                        :left 50\n                        :font-size 40\n                        :color \"red\"\n                        :background-color \"white\"\n                        :border-radius \"10px\"}}\n          \"Epillepsy Warning!!\"])\n       [:div {:style {:position \"absolute\"\n                      :user-select \"none\"\n                      :cursor :pointer\n                      :left 0\n                      :top 42\n                      :font-size 9\n                      :width 50\n                      :height 20\n                      :background-color \"#dcd\"}\n              :on-click #(swap! *ballspeed * 0.5)}\n        \" Speed \u2b07\ufe0f\"]\n       (when-not @*hide-ball\n         [:div {:style {:position \"absolute\"\n                        :left (first @*pointer)\n                        :top (second @*pointer)\n                        :border-radius \"50%\"\n                        :width 50\n                        :height 50\n                        :opacity 0.8\n                        :background-color \"#FFF\"}}])\n       #_[:pre (pr-str @cnt)]\n       #_[:pre (pr-str @*pointer)]\n       [:div {:style {:width \"64%\" :margin \"auto\"}}\n        [shadow-box *pointer [:div\n                              [:h1 \"Escherize Zone\"]\n                              [nav]]]]\n       (into [:div {:style {:display \"flex\"\n                            :flex-flow \"wrap\"\n                            :justify-content \"space-evenly\"}}]\n             (for [{:keys [exclude-post?] :as p} (->> (posts)\n                                                      vals\n                                                      distinct\n                                                      (sort-by :sorder)\n                                                      reverse)]\n               ;; (teaser p)\n               (when-not exclude-post?\n                 [shadow-teaser *pointer p])))\n       [footer]]))\n  #_(finally\n      (.removeEventListener js/document \"mousemove\" handler)\n      (.removeEventListener js/document \"touchmove\" touch-handler)))\n\n(defn projects []\n  [:div\n   [:h3 \"Here are some projects and toys going back to 2012.\"]\n   (into [:ul]\n         (for [project [\"blindfold\" \"catan\" \"circles\" \"cljsfiddle\"\n                        \"colors\" \"dnd5\" \"hiccup.space\" \"looper\"\n                        \"magic\" \"santorini\" \"transpose\"]]\n           [:li>a {:href (str \"/works/\" project)}\n            (str/capitalize project)]))])\n\n(defn post [match]\n  (if-let [id (-> match :parameters :path :id)]\n    (let [posts (posts)\n          {:keys [content title] :as post} (or (get posts id)\n                                               (get posts (js/parseInt id)))\n          pure? (:pure post)]\n      (if pure?\n        [content]\n        [:div\n         [:div.row\n          [:div [:span \"[\" [:a {:href (rfee/href ::home)} \"Home\"] \"]\"]]\n          [:div [:h1 title]]]\n         [:hr]\n         [content]]))\n    [:pre (pr-str match)]))\n\n(defn about [_]\n  [:h1 \"under construction\"])\n\n(def routes\n  [[\"/\" {:name ::home :view home}]\n   [\"/projects\" {:name ::projects :view projects}]\n   [\"/about\" {:name ::about :view about}]\n   [\"/post/:id\" {:name ::post\n                 :view post\n                 :parameters {:path {:id int?}}}]])\n\n(defn current-page []\n  [:div\n   (if (:match @app-state)\n     (let [view (:view (:data (:match @app-state)))]\n       [view (:match @app-state)]))])\n\n(defn start []\n  (r/render-component [current-page] (. js/document (getElementById \"app\"))))\n\n(defn ^:export init []\n  ;; init is called ONCE when the page loads\n  ;; this is called in the index.html and must be exported\n  ;; so it is available even in :advanced release builds\n  (rfee/start!\n   (rfe/router routes)\n   (fn [m] (swap! app-state assoc :match m))\n   ;; set to false to enable HistoryAPI\n   {:use-fragment true})\n  ;;(ps/init)\n  (ps-two/init)\n  (start))\n\n(defn stop []\n  ;; stop is called before any code is reloaded\n  ;; this is controlled by :before-load in the config\n  (js/console.log \"stop\"))\n"]}