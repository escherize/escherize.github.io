{"version":3,"sources":["new_root/core.cljs"],"mappings":";;;;;;;AAQA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKA,AAGO;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEc,AAAA,AAAA,AAAA,AAAA,AAACC;AAL3B,AAOYC;AAEZ,AAAA,AAAA,AAAA,AAAA,AAAKC,AAEO;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEc,AAAA,AAAA,AAAA,AAAA,AAACF;AAJ3B,AAMYG;AAEZ,AAAA,AAAA,AAAA,AAAA,AAAKC,AAEO;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAG4B,AAAA,AAAA,AAAA,AAAA,AAACJ;;AAEzC,AAAA,AAAA,AAAA,AAAA,AAAKK,AAEO;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAG4B,AAAA,AAAA,AAAA,AAAA,AAACL;;AAEzC,AAAA,AAAKM,AACFD,AAAOD,AAAOF,AAAOH;AAIxB,AAAA,AAAAQ,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAASC,AAAU,AAAA,AAACC;;AAEpB,AAAA,AAAMC;AAAN,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAGsB,AAAA,AAACC,AAED,AAAA,AAACA,AAED,AAAA,AAAA,AAAA,AAACb,AAAsB,AAAA,AAAK,AAACc,AAAMR;;AAEzD,AAAA,AAAMS,AAAMC;AAAZ,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAGcJ,AAEDI;;AAEb,AAAA,AAAAC,AAAMM;AAAN,AAAA,AAAAL,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAAA,AAAmBM;AAAnB,AAAAF,AAAAJ,AAAA,AAA4BO;AAA5B,AAAAH,AAAAJ,AAAA,AAAkCQ;AAAlC,AAAAJ,AAAAJ,AAAA,AAA0CS;AAA1C,AAAAL,AAAAJ,AAAA,AAAkDU;AAAlD,AACE,AAAM,AAAA,AAACC,AAAWD;AAAlB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAI0CH,AAC7B,AAAA,AAAA,AAAA,AAAA,AAAMC,AAASA,AACTC,AAAQ,AAACA,AAAAA,AAAAA;;;AAN5B;;;AASF,AAAA,AAAMG,AAAMN;AAAZ,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAGIT,AACA,AAAA,AAAA,AAACgB,AACK,AAAAC,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAD,AAAAA;;AAAA,AAAA,AAAAE,AAAA,AAAAC,AAAAH;AAAA,AAAA,AAAAE;AAAA,AAAA,AAAAF,AAAAE;AAAA,AAAA,AAAA,AAAAE,AAAAJ;AAAA,AAAAK,AAs1EyC,AAAA6C,AAAAlD;AAt1EzCM,AAAA,AAAAzB,AAAAwB;AAAAE,AAAA,AAAAC,AAAAF;AAAA,AAAA,AAAA,AAAA,AAAAG,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAH;AAAA,AAAA,AAAAI,AAAAL,AAAAI,AAAMU;AAAN,AAAA,AAAA,AAAAR,AAAAJ,AAAyB,AAACjB,AAAO6B;;AAAjC,AAAA,AAAAV,AAAA;;;;AAAA;;;;;AAAA,AAAAG,AAAA,AAAAC,AAAAN,AAAA,AAAAO,AAAA,AAAAC,AAAAf;;AAAA,AAAAY,AAAA,AAAAC,AAAAN,AAAA;;;AAAA,AAAA,AAAAS,AAAAhB,AAAMmB;AAAN,AAAA,AAAAF,AAAA,AAAAH,AAAA,AAAAI,AAAAlB,AAAyB,AAACV,AAAO6B;;;AAAjC;;;;AAAA,AAAA;;AAAA,AAAA,AAAApB,AAAQ,AAACqB,AAAQ/C;;;AAE3B,AAAA,AAAMgD;AAAN,AAAA,AAAA,AAAA;;AAIA,AAAA,AAAMC,AAAMC;AAAZ,AACE,AAAAC,AAAY,AAAA,AAAA,AAAA,AAAA,AAAA,AAAID;AAAhB,AAAA,AAAAC;AAAA,AAAAA,AAASC;AAAT,AACE,AAAMC,AAAK,AAACrC,AAAIhB,AAAM,AAACsD,AAAYF;AAAnC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAG8B,AAAA,AAAC7C,AACtB,AAAA,AAAQ8C,AAEd,AAAAE,AAAC,AAAA,AAAU,AAACvC,AAAIhB,AAAM,AAACsD,AAAYF;AAAnC,AAAA,AAAAG,AAAAA,AAAAA;;;AAPL,AAAA,AAQQ,AAACC,AAAON;;;AAElB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKO,AACuBjC,AACYwB,AAEjBC,AACkBS;AAEzC,AAAA,AAAMC;AAAN,AAAA,AAAA,AAEG,AAAI,AAAA,AAAA,AAAAC,AAASxD,AACX,AAAMyD,AAAK,AAAA,AAAO,AAAA,AAAO,AAAA,AAAA,AAAAD,AAASxD;AAAlC,AAAA,AACGyD,AAAK,AAAA,AAAA,AAAAD,AAASxD;AAFnB;;AAKH,AAAA,AAAM0D;AAAN,AACE,AAAAC,AAAA,AACEJ;AADFK,AAEC,AAAA,AAAGE;AAFJ,AAAA,AAAAH,AAAAC,AAAAD,AAAAC,AAACC,AAAAA,AAAAA;;AAIH,AAAA,AAAeE;AAAf,AAIE,AAACC,AACA,AAACC,AAAWZ,AACZ,AAAKa;AAAL,AAAQ,AAAA,AAACC,AAAMnE,AAAUoE,AAAaF;AAFvC,AAAA,AAAA;;AAKA,AAACG;;AACD,AAACC;;AACD,AAACZ;;;AAEH,AAAA,AAAMa;AAAN,AAGE,AAAA,AAACC","names":["new_root.core/post-3","reitit.frontend.easy.href.cljs$core$IFn$_invoke$arity$2","new-root.paint-snake-two.core/view","new_root.core/post-2","new-root.paint-snake.core/view","new_root.core/post-1","new_root.core/post-0","new_root.core/posts","js/new_root","js/new_root.core","js/new_root.core.app-state","new_root.core/app-state","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","new_root.core/nav","reitit.frontend.easy.href.cljs$core$IFn$_invoke$arity$1","cljs.core/count","new_root.core/blog","page","p__40956","map__40957","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","new_root.core/teaser","_","title","preview","content","release","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","new_root.core/home","cljs.core.into.cljs$core$IFn$_invoke$arity$2","iter__4523__auto__","s__40960","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4521__auto__","size__4522__auto__","b__40962","cljs.core/chunk-buffer","i__40961","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__40959","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","p","cljs.core/reverse","new_root.core/projects","new_root.core/post","match","temp__5733__auto__","id","post","js/parseInt","fexpr__40964","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","new_root.core/routes","cljs.core/int?","new_root.core/current-page","cljs.core/deref","view","new_root.core/start","G__40968","G__40969","reagent.core/render-component","js/document","new_root.core/init","reitit.frontend.easy/start!","reitit.frontend.router.cljs$core$IFn$_invoke$arity$1","m","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","new-root.paint-snake.core/init","new-root.paint-snake-two.core/init","new_root.core/stop","js/console.log","cljs.core/chunk-first"],"sourcesContent":["(ns new_root.core\n  (:require\n   [reagent.core :as reagent :refer [atom]]\n   [reitit.frontend :as rfe]\n   [reitit.frontend.easy :as rfee]\n   [new-root.paint-snake.core :as ps]\n   [new-root.paint-snake-two.core :as ps-two]))\n\n(def post-3\n  {:title \"Another game riff\"\n   :release :beta\n   :preview (fn []\n              [:div \"This is a riff on the \"\n               [:a {:href (rfee/href ::post {:id 3})} \"game\"]\n               \" I'm working on\"])\n   :content ps-two/view})\n\n(def post-2\n  {:title \"Getting started with a realtime game.\"\n   :preview (fn []\n              [:div \"This is a \"\n               [:a {:href (rfee/href ::post {:id 2})} \"game\"]\n               \" I'm getting started on.\"])\n   :content ps/view})\n\n(def post-1\n  {:title \"Hello Again\"\n   :content (fn []\n              [:div\n               [:h1 \"I'm post 1.\"]\n               [:p \"Here's \" [:a {:href (rfee/href ::post {:id 0})} \"post 0\"] \".\"]])})\n\n(def post-0\n  {:title \"Hello World\"\n   :content (fn []\n              [:div\n               [:h1 \"I'm here, and im post 0.\"]\n               [:p \"Here's \" [:a {:href (rfee/href ::post {:id 1})} \"post 1\"] \".\"]])})\n\n(def posts\n  [post-0 post-1 post-2 post-3])\n\n;; define your app data so that it doesn't get over-written on reload\n\n(defonce app-state (atom {}))\n\n(defn nav []\n  [:div.nav\n   [:span\n    [:span [:a {:href (rfee/href ::home)} \"Home\"]]\n    \" | \"\n    [:span [:a {:href (rfee/href ::projects)} \"Projects\"]]\n    \" | \"\n    [:span [:a {:href (rfee/href ::post {:id (dec (count posts))})} \"Last Post\"]]]])\n\n(defn blog [page]\n  [:div.container\n   [:hr]\n   [:div.row [nav]]\n   [:hr]\n   [:div.row page]])\n\n(defn teaser [{:as _ :keys [title preview content release]}]\n  (when (not= :beta release)\n    [:div.card {:style {:border-radius \"10px\"\n                        :padding \"10px\"\n                        :margin \"20px\"}}\n     [:h3.small {:style {:color \"#d24c53\"}} title]\n     [:div.row (cond preview [preview]\n                     content (content)\n                     :else nil)]]))\n\n(defn home [_]\n  [:div\n   [:h1 \"Escherize Zone\"]\n   [blog\n    (into [:div]\n          (for [p (reverse posts)] (teaser p)))]])\n\n(defn projects []\n  [:div\n   \"This is the projects component\"])\n\n(defn post [match]\n  (if-let [id (-> match :parameters :path :id)]\n    (let [post (get posts (js/parseInt id))]\n      [:div\n       [:div.row\n        [:p [:span \"[\" [:a {:href (rfee/href ::home)} \"Home\"] \"]\"]]\n        [:h1 (:title post)]]\n       [:hr]\n       ((:content (get posts (js/parseInt id))))])\n    [:pre (pr-str match)]))\n\n(def routes\n  [[\"/\" {:name ::home :view home}]\n   [\"/projects\" {:name ::projects :view projects}]\n   [\"/post/:id\" {:name ::post\n                 :view post\n                 :parameters {:path {:id int?}}}]])\n\n(defn current-page []\n  [:div\n   (if (:match @app-state)\n     (let [view (:view (:data (:match @app-state)))]\n       [view (:match @app-state)]))\n   #_[:pre (pr-str (:match @app-state))]])\n\n(defn start []\n  (reagent/render-component\n   [current-page]\n   (. js/document (getElementById \"app\"))))\n\n(defn ^:export init []\n  ;; init is called ONCE when the page loads\n  ;; this is called in the index.html and must be exported\n  ;; so it is available even in :advanced release builds\n  (rfee/start!\n   (rfe/router routes)\n   (fn [m] (swap! app-state assoc :match m))\n   ;; set to false to enable HistoryAPI\n   {:use-fragment true})\n  (ps/init)\n  (ps-two/init)\n  (start))\n\n(defn stop []\n  ;; stop is called before any code is reloaded\n  ;; this is controlled by :before-load in the config\n  (js/console.log \"stop\"))\n"]}