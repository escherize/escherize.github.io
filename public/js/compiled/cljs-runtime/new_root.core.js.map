{"version":3,"sources":["new_root/core.cljs"],"mappings":"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","names":["js/new_root","js/new_root.core","js/new_root.core.app-state","new_root.core/app-state","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","new_root.core/link","text","id","reitit.frontend.easy.href.cljs$core$IFn$_invoke$arity$2","new_root.core/post-0","p1__84671#","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/update","new_root.core/post-1","new-root.paint-snake-two.core/view","new_root.core/post-2","new-root.mindustry/view","new_root.core/post-3","new-root.paint/view","new_root.core/posts","new_root.core/nav","cljs.core.into.cljs$core$IFn$_invoke$arity$2","reitit.frontend.easy.href.cljs$core$IFn$_invoke$arity$1","cljs.core/count","cljs.core.repeat.cljs$core$IFn$_invoke$arity$2","cljs.core/deref","new_root.core/blog","page","cljs.core.into.cljs$core$IFn$_invoke$arity$1","p__84675","map__84676","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","new_root.core/teaser","_","title","preview","content","release","new_root.core/footer","new_root.core/home","iter__4523__auto__","s__84685","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4521__auto__","size__4522__auto__","b__84687","cljs.core/chunk-buffer","i__84686","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__84684","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","p","cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2","cljs.core/vals","new_root.core/projects","new_root.core/post","match","temp__5733__auto__","post","js/parseInt","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","new_root.core/routes","cljs.core/int?","new_root.core/current-page","view","new_root.core/start","G__84706","G__84707","reagent.core/render-component","js/document","new_root.core/init","reitit.frontend.easy/start!","reitit.frontend.router.cljs$core$IFn$_invoke$arity$1","m","cljs.core/assoc","new-root.paint-snake-two.core/init","new_root.core/stop","js/console.log","cljs.core/chunk-first"],"sourcesContent":["(ns new_root.core\n  (:require\n   [reagent.core :as reagent :refer [atom]]\n   [reitit.frontend :as rfe]\n   [reitit.frontend.easy :as rfee]\n   [new-root.paint-snake-two.core :as ps-two]\n   [new-root.paint :as paint]\n   [new-root.mindustry :as mind]))\n\n(defonce app-state (atom {:thingies 1}))\n\n(defn link [text id]\n  [:a {:href (rfee/href ::post {:id id})} text])\n\n(def post-0\n  {:id 0\n   :title \"Hello World\"\n   :preview (fn []\n              [:div\n               [:p \"Welcome to my blog!\"]\n               [:p \"It's built as a single page app using\n               Clojurescript and reagent, which means the entire thing is\n               completely programmable. Visit my contents \" (link \"here.\" 0)]\n               [:button\n                {:style {:cursor :pointer}\n                 :on-click (fn [] (swap! app-state update :thingies #(int (inc (* 1.5 %)))))}\n                \"Click here to see stuff happen\"]])\n   :content (fn []\n              [:div\n               [:h1 \"I'm here, and im post 0.\"]\n               [:p \"Here's \" (link \"Post 1\" 1) \".\"]\n               [:p \"Its a game I'm working on!\"]])})\n(def post-1\n  {:id 1\n   :title \"Adding goals and a way to die\"\n   :preview (fn []\n              [:div\n               [:div \"This is some further work on the \" (link \"game\" 1) \" I'm working on\"]\n               [:div \"It's possible to die, there are apples for the\n                         player to eat, and you can see your\n                         score.\"]])\n   :content ps-two/view})\n\n(def post-2\n  {:id 2\n   :title \"Force Directed Graph\"\n   :preview (fn [] [:div\n                    [:div \"An updatable d3 Force Directed Graph built with cljs. \"]\n                    (link \"see it\" 2)])\n   :content mind/view})\n\n(def post-3\n  {:id 3\n   :title \"Paint fill game\"\n   :preview (fn []\n              [:div\n               [:div \"Inspired by a python game I found on my raspberry pi\"]\n               [:div (link \"Check it out\" 3)]])\n   :content paint/view})\n\n(def posts\n  {0 post-0,\n   1 post-1,\n   2 post-2,\n   3 post-3})\n\n(defn nav []\n  [:div.nav\n   (into\n    [:span\n     [:span [:a {:href (rfee/href ::home)} \"Home\"]]\n     \" | \"\n     [:span [:a {:href (rfee/href ::projects)} \"Projects\"]]\n     \" | \"\n     [:span [:a {:href (rfee/href ::post {:id (dec (count posts))})} \"Last Post\"]]]\n    (repeat (:thingies @app-state) \"  |  \"))])\n\n(defn blog [page]\n  (into\n   [:div.container\n    (into [:div] (repeat (:thingies @app-state) [:hr]))\n    [:div.row [nav]]\n    [:div.row page]]))\n\n(defn teaser [{:as _ :keys [title preview content release]}]\n  [:div.card {:style {:border \"10px #89c solid\"\n                      :border-radius \"20px\"\n                      :padding \"20px\"\n                      :margin \"20px 40px\"}}\n   [:h3 title]\n   [:div.row (cond preview [preview]\n                   content [content]\n                   :else [:h2 title])]])\n\n(defn footer []\n  [:<>\n   [:hr]\n   [:p \"Copyright Bryan Maass 2019\"]])\n\n(defn home [_]\n  [:div\n   [:h1 \"Escherize Zone\"]\n   [blog\n    (into [:div]\n          (for [p (sort-by :id (vals posts))]\n            (teaser p)))]\n   [footer]])\n\n(defn projects []\n  [:div\n   [:h3 \"This is the projects component\"]\n   [:pre \"todo: fill in my projects ha\"]])\n\n(defn post [match]\n  (if-let [id (-> match :parameters :path :id)]\n    (let [post (get posts (js/parseInt id))]\n      [:div\n       [:div.row\n        [:div [:span \"[\" [:a {:href (rfee/href ::home)} \"Home\"] \"]\"]]\n        [:div [:h1 (:title post)]]]\n       [:hr]\n       [(:content (get posts (js/parseInt id)))]])\n    [:pre (pr-str match)]))\n\n(def routes\n  [[\"/\" {:name ::home :view home}]\n   [\"/projects\" {:name ::projects :view projects}]\n   [\"/post/:id\" {:name ::post\n                 :view post\n                 :parameters {:path {:id int?}}}]])\n\n(defn current-page []\n  [:div\n   (if (:match @app-state)\n     (let [view (:view (:data (:match @app-state)))]\n       [view (:match @app-state)]))\n   #_[:pre (pr-str (:match @app-state))]])\n\n(defn start []\n  (reagent/render-component\n   [current-page]\n   (. js/document (getElementById \"app\"))))\n\n(defn ^:export init []\n  ;; init is called ONCE when the page loads\n  ;; this is called in the index.html and must be exported\n  ;; so it is available even in :advanced release builds\n  (rfee/start!\n   (rfe/router routes)\n   (fn [m] (swap! app-state assoc :match m))\n   ;; set to false to enable HistoryAPI\n   {:use-fragment true})\n  ;;(ps/init)\n  (ps-two/init)\n  (start))\n\n(defn stop []\n  ;; stop is called before any code is reloaded\n  ;; this is controlled by :before-load in the config\n  (js/console.log \"stop\"))\n"]}