{"version":3,"sources":["new_root/core.cljs"],"mappings":";;;;;;;;;;;;;;AAeA,AAAA,AAAAA,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAASC,AAAS,AAAA,AAAA,AAAA,AAACC;;AACnB,AAAA,AAAAJ,AAAAC,AAAAI;AAAA;AAAA,AAAA,AAASC,AAAU,AAAA,AAAA,AAAA,AAACF;;AAEpB,AAAA,AAAMG;AAAN,AACE,AAAA,AAAA,AAAAC,AAACC,AAAMH,AAAUI;AAAjB,AAAmC,AAAA,AAAAF;;;AAErC,AAAA,AAAMG,AAAMC,AAAKC;AAAjB,AAAA,AAAA,AAAA,AAAA,AACa,AAAA,AAAA,AAAA,AAACC,AAAsBD,AAAWD;;AAE/C,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKG,AAIO;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAKgD,AAAA,AAAA,AAACJ,AAGlCJ;AAZ3B,AAcY;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAGiB,AAAA,AAAA,AAACI;;AAE9B,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKK,AAIO;AAAA,AAAA,AAAA,AAAA;AAJZ,AAKYC;AAEZ,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKC,AAIO;AAAA,AAAA,AAAA,AAAA;AAJZ,AAKYC;AAEZ,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKC,AAKO;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AALZ,AASYC;AAEZ,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKC,AAKO;AAAA,AAAA,AAAA,AAAA;AALZ,AAMYC;AAEZ,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKC,AAKO;AAAA,AAAA,AAAA;AALZ,AAMYC;AAEZ,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKC,AAKO;AAAA,AAAA,AAAA,AAAA,AAAA,AAA2B,AAAA,AAAA,AAACf;AALxC,AAMYgB;AAEZ,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKC,AAKO;AAAA,AAAA,AAAA,AAAA;AALZ,AAMYC;AAEZ,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKC,AAKO;AAAA,AAAA,AAAA,AAAA;AALZ,AAMYC;AAIZ,AAAKC,AACGhB,AAAOE,AAAOE,AAAOE,AAAOI,AAAOE,AAAOE,AAAON,AAClD,AAAA,AAACS,AAAI,AAAA,AAACC,AAASC,AACf,AAAA,AAACC;AAER,AAAA,AAAMC;AAAN,AAAA,AAAA,AAEG,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC,AAEmB,AAAA,AAACC,AACnB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC,AAAO,AAAA,AAAA,AAAAC,AAAYnC,AAGMC,AACR,AAAA,AAACgC;;AAIxB,AAAA,AAAMG,AAAMC;AAAZ,AACE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACL,AAEYD,AACDM;;AAEd,AAAA,AAAAC,AAAMM;AAAN,AAAA,AAAAL,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAAA,AAAmBM;AAAnB,AAAAF,AAAAJ,AAAA,AAA4BO;AAA5B,AAAAH,AAAAJ,AAAA,AAA+BQ;AAA/B,AAAAJ,AAAAJ,AAAA,AAAqCS;AAArC,AAAAL,AAAAJ,AAAA,AAA6CU;AAA7C,AAAAN,AAAAJ,AAAA,AAAqDW;AAArD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAIQ,AAAC7C,AAAK0C,AAAMD,AACP,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAME,AAASA,AACTC,AAASA,AACEF;;;AAE9B,AAAA,AAAMI,AAAYC,AAASH;AAA3B,AACE,AAAMI,AAAa,AAAA,AAACvD;AAApB,AACE,AAAA,AAAA,AAACwD,AAEC,AAAKC;AAAL,AAAW,AAACC,AAAOH,AAAa,AAACI,AAAuB,AAACC,AAAWH;AAFtE,AAIE,AAAKH,AAASH;AAAd,AAAA,AAAA,AAAA,AAAA,AAEW,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACU,AAKA,AAAA,AAAAxB,AAAA,AAAA,AAAA,AAAA,AAAOkB,AAEJ,AAAA,AAAAlB,AAAA,AAAAA,AAACyB,AAA4BR,AAAUC,AACnDJ,AACA,AAAA;;;;AAKT,AAAA,AAAAY,AAAME,AAAeX;AAArB,AAAA,AAAAU,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAtB,AAAA,AAAAsB,AAAA,AAAA,AAAA,AAAA,AAAArB,AAAAC,AAAAoB,AAAAA;AAAAA,AAAmCjB;AAAnC,AAAAF,AAAAmB,AAAA,AAA4ChB;AAA5C,AAAAH,AAAAmB,AAAA,AAA+Cf;AAA/C,AAAAJ,AAAAmB,AAAA,AAAqDd;AAArD,AAAAL,AAAAmB,AAAA,AAA6Db;AAA7D,AAAAN,AAAAmB,AAAA,AAAqEZ;AAArE,AACE,AAAMG,AAAa,AAAA,AAACvD;AAApB,AACE,AAAA,AAAA,AAACwD,AAEC,AAAKC;AAAL,AAAW,AAACC,AAAOH,AAAa,AAACI,AAAuB,AAACC,AAAWH;AAFtE,AAIE,AAAKH,AAASH;AAAd,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEW,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACU,AAKA,AAAA,AAAAxB,AAAA,AAAA,AAAA,AAAA,AAAOkB,AAEJ,AAAA,AAAAlB,AAAA,AAAAA,AAACyB,AAA4BR,AAAUC,AAE7C,AAAChD,AAAK0C,AAAMD,AACP,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAME,AAASA,AACTC,AAASA,AACEF;AAC5B,AAAA;;;;AAKT,AAAA,AAAMiB;AAAN,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;AAIA,AAAA,AAAMC,AAAQC,AAAIC;AAAlB,AACE,AAAAC,AAAA,AAAO,AAASF,AAAK,AAASC;AAA9B,AAAA,AAAA,AAAAE,AAAA,AAAA,AAAA,AAAAD;AACeD;;AADf,AAAA,AAAAE,AAAA,AAAA,AAAA,AAAAD;AAEeF;;AAFf,AAAA,AAAAG,AAAA,AAAA,AAAA,AAAAD;AAGc,AAACG,AAAM,AAAA,AAACC,AAAMN,AAAIC;;AAHhC,AAAA,AAAAE,AAAA,AAAA,AAAA,AAAAD;AAIgB,AAACG,AAAM,AAAA,AAACC,AAAMN,AAAIC;;AAJlC,AAAA,AAAA,AAAAG,AAAA,AAAA,AAAAF;;;;;;;AAMF,AAAA,AAAMK,AAAM5B;AAAZ,AACE,AAAA6B,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAAC;AAAA,AAAA,AAAA,AAAAD,AAAA;AAAA;AAAA,AAAAE,AAAAF;AAAA,AAAA,AAAA,AAAA,AAAAF,AAAA,AAAAI;AAAA,AAAA,AAAAC;AAAA,AAAA,AAAA,AAAAC,AAAAC,AAAAC,AAAA,AAAA,AAAA;;AAAA;;AAAA;;AAAA,AAAA,AAAAR,AAAA,AAAAI;;;;AAAA,AAAAK,AAAA,AAAA,AAAAT,AAAA;AAAA,AAAAS,AAAA,AAAAT,AAAA,AAAA,AAAAU,AAAaI;AAAb,AAAsB,AAAA,AAAChC,AAAO3D,AAAU,AAAAuF,AAAY,AAAAA;AAApD,AAAAV,AAAA;AAAA,AAAAS,AAAA,AAAAT,AAAA,AAAA,AAAAA,AAAA,AACa7B,AAAE,AAAA,AAAmB4C,AAAwBD;AAD1D,AAAAL,AAAA,AAAAT,AAAA,AAEagB,AAAc,AAAKC;AAAL,AAAQ,AAAMC,AAAS,AAAA,AAAA,AAAA,AAAID;AACbE,AAAcF,AAAY,AAAA,AAAMC;AADtC,AAEE,AAAA,AAACpC,AAAO3D,AAAU,AAAWgG,AAAW,AAAWA;AAJxF,AAAAnB,AAAA;AAAA,AAAAS,AAAA,AAAAT,AAAA,AAAA,AAAAA,AAAA,AAKa7B,AAAE,AAAA,AAAmB4C,AAAwBC;AAL1D,AAAA,AAAAL,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAQKlC,AAAWtD,AAEWkC,AACxB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACD,AACK,AAAAgE,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAD,AAAAA;;AAAA,AAAA,AAAAE,AAAA,AAAAC,AAAAH;AAAA,AAAA,AAAAE;AAAA,AAAA,AAAAF,AAAAE;AAAA,AAAA,AAAA,AAAAE,AAAAJ;AAAA,AAAAK,AAguEwC,AAAAuD,AAAA5D;AAhuExCM,AAAA,AAAAC,AAAAF;AAAAG,AAAA,AAAAC,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAI,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAJ;AAAA,AAAAK,AAAA,AAAAC,AAAAP,AAAAK;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAlE,AAAA,AAAAkE,AAAA,AAAA,AAAA,AAAA,AAAAjE,AAAAC,AAAAgE,AAAAA;AAAAA,AAAiCW;AAAjC,AAAA1E,AAAA+D,AAAA,AAAcU;AAAd,AAAA,AAAA,AAAAR,AAAAL,AAEE,AAAA,AAAA,AAAA,AAAUa,AACPrD,AAAclE,AAASwH;;AAH5B,AAAA,AAAAZ,AAAA;;;;AAAA;;;;;AAAA,AAAAI,AAAA,AAAAC,AAAAP,AAAA,AAAAQ,AAAA,AAAAC,AAAAjB;;AAAA,AAAAc,AAAA,AAAAC,AAAAP,AAAA;;;AAAA,AAAAU,AAAA,AAAA1C,AAAAwB;AAAAkB,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAzE,AAAA,AAAAyE,AAAA,AAAA,AAAA,AAAA,AAAAxE,AAAAC,AAAAuE,AAAAA;AAAAA,AAAiCI;AAAjC,AAAA1E,AAAAsE,AAAA,AAAcG;AAAd,AAAA,AAAAF,AAAA,AAAAH,AAAA,AAAAI,AAAApB,AAEE,AAAA,AAAA,AAAA,AAAUqB,AACPrD,AAAclE,AAASwH;;;AAH5B;;;;AAAA,AAAA;;AAAA,AAAA,AAAAvB,AAAoC,AAACwB,AAAQ,AAACC,AAAQtD,AAAO,AAACuD,AAAS,AAACC,AAAK/F;AAZtF,AAgBIsC;AAhBJ,AAAA,AAAAsB,AAAA;AAAA,AAkBI,AAAA,AAAsBG,AAAwBD;;AAC9C,AAAA,AAAsBC,AAAwBC;;AAnBlD,AAAA,AAAA,AAAAH;AAAA,AAAA,AAAA,AAAAb,AAAA;AAAA,AAAA,AAAA,AAAAA,AAAAY;;AAAA;;AAAA,AAAAA;;;AAAAD;;AAqBF,AAAA,AAAMqC;AAAN,AAAA,AAAA,AAAA,AAAA,AAAA,AAGG,AAAA,AAAA,AAAC5F,AACK,AAAAgE,AAAA,AAAA6B;AAAA,AAAA,AAAA3B,AAAA,AAAA;AAAA,AAAA,AAAA2B,AAAAA;;AAAA,AAAA,AAAA1B,AAAA,AAAAC,AAAAyB;AAAA,AAAA,AAAA1B;AAAA,AAAA,AAAA0B,AAAA1B;AAAA,AAAA,AAAA,AAAAE,AAAAwB;AAAA,AAAAvB,AAmtE0C,AAAAuD,AAAAhC;AAntE1CtB,AAAA,AAAAC,AAAAF;AAAAwB,AAAA,AAAApB,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAwB,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAxB;AAAA,AAAA,AAAAM,AAAAP,AAAAyB,AAAME;AAAN,AAAA,AAAA,AAAAnB,AAAAgB,AAAA,AAAA,AAAA,AAAA,AAGgB,AAAA,AAAeG,AAC5B,AAACC,AAAeD;;AAJnB,AAAA,AAAAF,AAAA;;;;AAAA;;;;;AAAA,AAAAhB,AAAA,AAAAC,AAAAc,AAAA,AAAAE,AAAA,AAAAd,AAAAW;;AAAA,AAAAd,AAAA,AAAAC,AAAAc,AAAA;;;AAAA,AAAA,AAAArD,AAAAoD,AAAMI;AAAN,AAAA,AAAAb,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAY,AAAA,AAAAX,AAAAQ,AAGgB,AAAA,AAAeI,AAC5B,AAACC,AAAeD;;;AAJnB;;;;AAAA,AAAA;;AAAA,AAAA,AAAAjC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAMT,AAAA,AAAMmC,AAAMC;AAAZ,AACE,AAAAC,AAAY,AAAA,AAAA,AAAA,AAAA,AAAA,AAAID;AAAhB,AAAA,AAAAC;AAAA,AAAAA,AAASrF;AAAT,AACE,AAAAsF,AAAuC,AAAAE,AAAI,AAAC3F,AAAIjB,AAAMoB;AAAf,AAAA,AAAAwF;AAAAA;;AACI,AAAC3F,AAAIjB,AAAM,AAAC6G,AAAYzF;;;AADnEsF,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA5F,AAAA,AAAA4F,AAAA,AAAA,AAAA,AAAA,AAAA3F,AAAAC,AAAA0F,AAAAA;AAAAA,AAAiCC;AAAjC,AAAA1F,AAAAyF,AAAA,AAAcnF;AAAd,AAAAN,AAAAyF,AAAA,AAAsBrF;AAEhByF,AAAM,AAAA,AAAOH;AAFnB,AAGE,AAAIG;AAAJ,AACGvF;;AADH,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAIgC,AAAA,AAAChB,AAClBc,AAEXE;;;AAXR,AAAA,AAYQ,AAACwF,AAAOP;;;AAElB,AAAA,AAAMQ,AAAO7F;AAAb,AAAA,AAAA,AAAA;;AAGA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAK8F,AACuBlE,AACYiD,AACNgB,AAEXT,AACkBW;AAEzC,AAAA,AAAMC;AAAN,AAAA,AAAA,AAEG,AAAI,AAAA,AAAA,AAAA1G,AAASnC,AACX,AAAM8I,AAAK,AAAA,AAAO,AAAA,AAAO,AAAA,AAAA,AAAA3G,AAASnC;AAAlC,AAAA,AACG8I,AAAK,AAAA,AAAA,AAAA3G,AAASnC;AAFnB;;AAIH,AAAA,AAAM+I;AAAN,AACE,AAAAC,AAAA,AAAqBH;AAArBI,AAAmC,AAAA,AAAGxD;AAAtC,AAAA,AAAAuD,AAAAC,AAAAD,AAAAC,AAACC,AAAAA,AAAAA;;AAEH,AAAA,AAAeC;AAAf,AAIE,AAACC,AACA,AAACC,AAAWV,AACZ,AAAKW;AAAL,AAAQ,AAAA,AAACnJ,AAAMH,AAAUuJ,AAAaD;AAFvC,AAAA,AAAA;;AAMA,AAACE;;AACD,AAACT;;;AAEH,AAAA,AAAMU;AAAN,AAGE,AAAA,AAACC","names":["js/new_root","js/new_root.core","js/new_root.core.*pointer","new_root.core/*pointer","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","js/new_root.core.app-state","new_root.core/app-state","new_root.core/double-thingies","p1__46544#","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/update","new_root.core/link","text","post-id","reitit.frontend.easy.href.cljs$core$IFn$_invoke$arity$2","new_root.core/post-0","new_root.core/post-1","new-root.paint-snake-two.core/view","new_root.core/post-2","new-root.mindustry/view","new_root.core/post-3","new-root.paint/view","new_root.core/post-4","new-root.gen-art/view","new_root.core/scratch","new-root.scratch/view","new_root.core/post-5","new-root.neumorph/view","new_root.core/post-6","new-root.gen-art-2/view","new_root.core/post-7","new-root.gen-art-3/view","new_root.core/posts","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core.juxt.cljs$core$IFn$_invoke$arity$2","cljs.core/identity","cljs.core.into.cljs$core$IFn$_invoke$arity$2","new_root.core/nav","cljs.core.into.cljs$core$IFn$_invoke$arity$1","reitit.frontend.easy.href.cljs$core$IFn$_invoke$arity$1","cljs.core.repeat.cljs$core$IFn$_invoke$arity$2","cljs.core/deref","new_root.core/blog","page","p__46546","map__46548","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","new_root.core/teaser","_","id","title","preview","content","release","new_root.core/shadow-box","*pointer","*my-position","reagent.core/create-class","this","cljs.core/reset!","new-root.neumorph/find-location","reagent.core/dom-node","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","new-root.neumorph/p1+p2->box-shadow","p__46551","map__46552","new_root.core/shadow-teaser","new_root.core/footer","new_root.core/sorter","id1","id2","G__46554","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","js/Error","cljs.core/first","cljs.core.sort.cljs$core$IFn$_invoke$arity$1","new_root.core/home","with-let46556","reagent.ratom/with-let-values","temp__5739__auto__","reagent.ratom/*ratom-context*","c__38931__auto__","reagent.debug/has-console","reagent.debug/tracking","reagent.debug/track-console","js/console","init46557","p1__46555#","res__38932__auto__","destroy__38930__auto__","reagent.ratom/reactive?","handler","js/document","touch-handler","e","last-idx","last-item","iter__4582__auto__","s__46559","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","cljs.core/count","b__46561","cljs.core/chunk-buffer","i__46560","map__46562","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__46558","cljs.core/chunk-rest","map__46564","cljs.core/cons","cljs.core/rest","exclude-post?","p","cljs.core/reverse","cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2","cljs.core.distinct.cljs$core$IFn$_invoke$arity$1","cljs.core/vals","new_root.core/projects","s__46567","b__46569","i__46568","iter__46566","project","clojure.string/capitalize","new_root.core/post","match","temp__5733__auto__","map__46570","post","or__4185__auto__","js/parseInt","pure?","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","new_root.core/about","new_root.core/routes","cljs.core/int?","new_root.core/current-page","view","new_root.core/start","G__46572","G__46573","reagent.core/render-component","new_root.core/init","reitit.frontend.easy/start!","reitit.frontend.router.cljs$core$IFn$_invoke$arity$1","m","cljs.core/assoc","new-root.paint-snake-two.core/init","new_root.core/stop","js/console.log","cljs.core/chunk-first"],"sourcesContent":["(ns new_root.core\n  (:require\n   [reagent.core :as r]\n   [reitit.frontend :as rfe]\n   [reitit.frontend.easy :as rfee]\n   [new-root.paint-snake-two.core :as ps-two]\n   [new-root.paint :as paint]\n   [new-root.mindustry :as mind]\n   [clojure.string :as str]\n   [new-root.gen-art :as gen-art]\n   [new-root.scratch :as scratch]\n   [new-root.neumorph :as neumorph]\n   [new-root.gen-art-2 :as gen-art2]\n   [new-root.gen-art-3 :as gen-art3]))\n\n(defonce *pointer (r/atom [301 301]))\n(defonce app-state (r/atom {:thingies 1}))\n\n(defn double-thingies []\n  (swap! app-state update :thingies #(* 2 %)))\n\n(defn link [text post-id]\n  [:a {:href (rfee/href ::post {:id post-id})} text])\n\n(def post-0\n  {:id \"hello-world\"\n   :sorder 0\n   :title \"Hello World\"\n   :preview (fn []\n              [:div\n               [:p \"Welcome to my blog!\"]\n               [:p \"It's built as a single page app using\n               Clojurescript and reagent, which means the entire thing is\n               completely programmable. Visit my contents \" (link \"here.\" \"hello-world\")]\n               [:button\n                {:style {:cursor :pointer}\n                 :on-click double-thingies}\n                \"Click here to see stuff happen\"]])\n   :content (fn []\n              [:div\n               [:h1 \"I'm here, and im post 0.\"]\n               [:p \"Here's \" (link \"Post 1\" \"snake-game\") \".\"]\n               [:p \"Its a game I'm working on!\"]])})\n(def post-1\n  {:id \"snake-game\"\n   :sorder 1\n   :title \"Adding goals and a way to die\"\n   :preview (fn [] [:div \"This is a riff on snake\"])\n   :content ps-two/view})\n\n(def post-2\n  {:id \"force-graph\"\n   :sorder 2\n   :title \"Force Directed Graph\"\n   :preview (fn [] [:div \"An updatable d3 Force Directed Graph.\"])\n   :content mind/view})\n\n(def post-3\n  {:id \"paint\"\n   :sorder 3\n   :title \"Paint fill game\"\n   :pure true\n   :preview (fn []\n              [:div\n               [:p \"Inspired by a python game I found on my raspberry pi\"]\n               [:p \"Flood the canvas from the top left\"]])\n   :content paint/view})\n\n(def post-4\n  {:id \"gen-art\"\n   :sorder 4\n   :title \"Generative Art\"\n   :pure true\n   :preview (fn [] [:div \"Just getting warmed up\"])\n   :content gen-art/view})\n\n(def scratch\n  {:id \"scratch\"\n   :title \"scratch\"\n   :exclude-post? true\n   :pure true\n   :preview (fn [] [:div])\n   :content scratch/view})\n\n(def post-5\n  {:id \"neumorph\"\n   :sorder 5\n   :title \"Dynamic Neumorphism\"\n   :pure false\n   :preview (fn [] [:div \"Yeah.. it's \"(link \"trendy\" \"neumorph\") \".\"])\n   :content neumorph/view})\n\n(def post-6\n  {:id \"gen-art-2\"\n   :sorder 6\n   :title \"More Art\"\n   :pure true\n   :preview (fn [] [:div \"Where circles don't overlap\"])\n   :content gen-art2/view})\n\n(def post-7\n  {:id \"gen-art-3\"\n   :sorder 6\n   :title \"Even More Art\"\n   :pure true\n   :preview (fn [] [:div \"Vector Fields 101\"])\n   :content gen-art3/view})\n\n;; TODO: link pico8 stuff\n\n(def posts\n  (->> [post-1 post-2 post-3 post-4 post-5 post-6 post-7 scratch]\n       (map (juxt :id identity))\n       (into {})))\n\n(defn nav []\n  [:div.nav\n   (into\n    [:span\n     [:span [:a {:href (rfee/href ::home)} \"Home\"]]\n     (repeat (:thingies @app-state)\n             [:span {:style {:cursor :pointer\n                             :user-select :none}\n                     :on-click double-thingies} \"  |  \"])\n     [:span [:a {:href (rfee/href ::projects)} \"Projects\"]]\n     #_(repeat (:thingies @app-state) \"  |  \")\n     #_[:span [:a {:href (rfee/href ::about)} \"About\"]]])])\n\n(defn blog [page]\n  (into\n   [:div.container\n    [:div.row [nav]]\n    [:div.row page]]))\n\n(defn teaser [{:as _ :keys [id title preview content release]}]\n  [:div.teaser-card\n   {:style {:margin \"30px\"\n            :padding \"10px 20px 20px 30px\"}}\n   [:h3 (link title id)]\n   [:div.row (cond preview [preview]\n                   content [content]\n                   :else [:h2 title])]])\n\n(defn shadow-box [*pointer content]\n  (let [*my-position (r/atom [])]\n    (r/create-class\n     {:component-did-mount\n      (fn [this] (reset! *my-position (neumorph/find-location (r/dom-node this))))\n      :reagent-render\n      (fn [*pointer content]\n        [:div\n         {:style (merge\n                  {:margin \"20px 30px\"\n                   :text-align \"center\"\n                   :border-radius \"20px\"\n                   :padding \"20px 100px\"}\n                  (when @*my-position\n                    {:box-shadow\n                     (neumorph/p1+p2->box-shadow @*pointer @*my-position)}))}\n         content\n         (when false\n           [:<>\n            [:p \"origin: \" (pr-str @*pointer)]\n            [:p \"my position: \" (pr-str @*my-position)]])])})))\n\n(defn shadow-teaser [*pointer {:as _ :keys [id title preview content release]}]\n  (let [*my-position (r/atom [])]\n    (r/create-class\n     {:component-did-mount\n      (fn [this] (reset! *my-position (neumorph/find-location (r/dom-node this))))\n      :reagent-render\n      (fn [*pointer content]\n        [:div\n         {:style (merge\n                  {:margin \"30px\"\n                   :text-align \"center\"\n                   :border-radius \"20px\"\n                   :padding \"20px\"}\n                  (when @*my-position\n                    {:box-shadow\n                     (neumorph/p1+p2->box-shadow @*pointer @*my-position)}))}\n         [:div\n          [:h3 (link title id)]\n          [:div.row (cond preview [preview]\n                          content [content]\n                          :else [:h2 title])]]\n         (when false\n           [:<>\n            [:p \"origin: \" (pr-str @*pointer)]\n            [:p \"my position: \" (pr-str @*my-position)]])])})))\n\n(defn footer []\n  [:div {:style {:float :right}}\n   [:p \"Copyright Bryan Maass 2019\"]])\n\n(defn sorter [id1 id2]\n  (case [(string? id1) (string? id2)]\n    [false true] id2\n    [true false] id1\n    [true true] (first (sort [id1 id2]))\n    [false false] (first (sort [id1 id2]))))\n\n(defn home [_]\n  (r/with-let [handler #(reset! *pointer [(.-pageX %) (.-pageY %)])\n               _ (.addEventListener js/document \"mousemove\" handler)\n               touch-handler (fn [e] (let [last-idx (-> e .-touches .-length dec)\n                                           last-item (-> e .-touches (aget last-idx))]\n                                       (reset! *pointer [(.-clientX last-item) (.-clientY last-item)])))\n               _ (.addEventListener js/document \"touchmove\" touch-handler)]\n    [:div\n     [:div {:style {:width \"64%\" :margin \"auto\"}}\n      [shadow-box *pointer [:div\n                            [:h1 \"Escherize Zone\"]\n                            [nav]]]]\n     (into [:div {:style {:display \"flex\" :flex-flow \"wrap\"}}]\n           (for [{:keys [exclude-post?] :as p} (reverse (sort-by sorter (distinct (vals posts))))]\n             ;; (teaser p)\n             (when-not exclude-post?\n               [shadow-teaser *pointer p])))\n     [footer]]\n    (finally\n      (.removeEventListener js/document \"mousemove\" handler)\n      (.removeEventListener js/document \"touchmove\" touch-handler))))\n\n(defn projects []\n  [:div\n   [:h3 \"Here are some projects and toys going back to 2012.\"]\n   (into [:ul]\n         (for [project [\"blindfold\" \"catan\" \"circles\" \"cljsfiddle\"\n                        \"colors\" \"dnd5\" \"hiccup.space\" \"looper\"\n                        \"magic\" \"santorini\" \"transpose\"]]\n           [:li>a {:href (str \"/works/\" project)}\n            (str/capitalize project)]))])\n\n(defn post [match]\n  (if-let [id (-> match :parameters :path :id)]\n    (let [{:keys [content title] :as post} (or (get posts id)\n                                               (get posts (js/parseInt id)))\n          pure? (:pure post)]\n      (if pure?\n        [content]\n        [:div\n         [:div.row\n          [:div [:span \"[\" [:a {:href (rfee/href ::home)} \"Home\"] \"]\"]]\n          [:div [:h1 title]]]\n         [:hr]\n         [content]]))\n    [:pre (pr-str match)]))\n\n(defn about [_]\n  [:h1 \"under construction\"])\n\n(def routes\n  [[\"/\" {:name ::home :view home}]\n   [\"/projects\" {:name ::projects :view projects}]\n   [\"/about\" {:name ::about :view about}]\n   [\"/post/:id\" {:name ::post\n                 :view post\n                 :parameters {:path {:id int?}}}]])\n\n(defn current-page []\n  [:div\n   (if (:match @app-state)\n     (let [view (:view (:data (:match @app-state)))]\n       [view (:match @app-state)]))])\n\n(defn start []\n  (r/render-component [current-page] (. js/document (getElementById \"app\"))))\n\n(defn ^:export init []\n  ;; init is called ONCE when the page loads\n  ;; this is called in the index.html and must be exported\n  ;; so it is available even in :advanced release builds\n  (rfee/start!\n   (rfe/router routes)\n   (fn [m] (swap! app-state assoc :match m))\n   ;; set to false to enable HistoryAPI\n   {:use-fragment true})\n  ;;(ps/init)\n  (ps-two/init)\n  (start))\n\n(defn stop []\n  ;; stop is called before any code is reloaded\n  ;; this is controlled by :before-load in the config\n  (js/console.log \"stop\"))\n"]}