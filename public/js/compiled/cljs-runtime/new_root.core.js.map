{"version":3,"sources":["new_root/core.cljs"],"mappings":"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","names":["new_root.core/posts","reitit.frontend.easy.href.cljs$core$IFn$_invoke$arity$2","new-root.mindustry/view","new-root.paint-snake-two.core/view","js/new_root","js/new_root.core","js/new_root.core.app-state","new_root.core/app-state","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","new_root.core/nav","reitit.frontend.easy.href.cljs$core$IFn$_invoke$arity$1","cljs.core/count","new_root.core/blog","page","p__32816","map__32817","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","new_root.core/teaser","_","title","preview","content","release","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","new_root.core/home","cljs.core.into.cljs$core$IFn$_invoke$arity$2","iter__4523__auto__","s__32820","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4521__auto__","size__4522__auto__","b__32822","cljs.core/chunk-buffer","i__32821","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__32819","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","p","new_root.core/projects","new_root.core/post","match","temp__5733__auto__","id","post","js/parseInt","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","new_root.core/routes","cljs.core/int?","new_root.core/current-page","cljs.core/deref","view","new_root.core/start","G__32823","G__32824","reagent.core/render-component","js/document","new_root.core/init","reitit.frontend.easy/start!","reitit.frontend.router.cljs$core$IFn$_invoke$arity$1","m","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","new-root.paint-snake-two.core/init","new_root.core/stop","js/console.log","cljs.core/chunk-first"],"sourcesContent":["(ns new_root.core\n  (:require\n   [reagent.core :as reagent :refer [atom]]\n   [reitit.frontend :as rfe]\n   [reitit.frontend.easy :as rfee]\n   [new-root.paint-snake-two.core :as ps-two]\n   [new-root.mindustry :as mind]))\n\n(def posts [{:title \"Force Directed Graph\"\n             :preview (fn [] [:div\n                              [:div \"A slick updatable force directed graph\"]\n                              [:a {:href (rfee/href ::post {:id 2})} \"see it\"]])\n             :content mind/view}\n\n            {:title \"Adding goals and a way to die\"\n             :preview (fn []\n                        [:div\n                         [:div \"This is some further work on the \"\n                          [:a {:href (rfee/href ::post {:id 2})} \"game\"]\n                          \" I'm working on\"]\n                         [:div \"It's now still possible to die, there\n                         are green apples for the player to eat, and\n                         you can see your score.\"]])\n             :content ps-two/view}\n\n            {:title \"Hello World\"\n             :preview (fn []\n                        [:div\n                         [:p \"Welcome to my blog!\"]\n                         [:p \"It's built as a single page app using\n               Clojurescript and reagent, which means the entire thing is\n               completely ~programmable~.\"]])\n             :content (fn []\n                        [:div\n                         [:h1 \"I'm here, and im post 0.\"]\n                         [:p \"Here's \" [:a {:href (rfee/href ::post {:id 0})} \"post 1\"] \".\"]])}])\n\n;; define your app data so that it doesn't get over-written on reload\n\n(defonce app-state (atom {}))\n\n(defn nav []\n  [:div.nav\n   [:span\n    [:span [:a {:href (rfee/href ::home)} \"Home\"]]\n    \" | \"\n    [:span [:a {:href (rfee/href ::projects)} \"Projects\"]]\n    \" | \"\n    [:span [:a {:href (rfee/href ::post {:id (dec (count posts))})} \"Last Post\"]]]])\n\n(defn blog [page]\n  [:div.container\n   [:hr]\n   [:div.row [nav]]\n   [:hr]\n   [:div.row page]])\n\n(defn teaser [{:as _ :keys [title preview content release]}]\n  (when (not= :beta release)\n    [:div.card {:style {:border-radius \"10px\"\n                        :padding \"10px\"\n                        :margin \"20px\"}}\n     [:h3.small {:style {:color \"#d24c53\"}} title]\n     [:div.row (cond preview [preview]\n                     content [content]\n                     :else nil)]]))\n\n(defn home [_]\n  [:div\n   [:h1 \"Escherize Zone\"]\n   [blog\n    (into [:div]\n          (for [p posts] (teaser p)))]])\n\n(defn projects []\n  [:div\n   [:h3 \"This is the projects component\"]\n   [:pre \"todo: fill in my projects ha\"]])\n\n(defn post [match]\n  (if-let [id (-> match :parameters :path :id)]\n    (let [post (get posts (js/parseInt id))]\n      [:div\n       [:div.row\n        [:p [:span \"[\" [:a {:href (rfee/href ::home)} \"Home\"] \"]\"]]\n        [:h1 (:title post)]]\n       [:hr]\n       [(:content (get posts (js/parseInt id)))]])\n    [:pre (pr-str match)]))\n\n(def routes\n  [[\"/\" {:name ::home :view home}]\n   [\"/projects\" {:name ::projects :view projects}]\n   [\"/post/:id\" {:name ::post\n                 :view post\n                 :parameters {:path {:id int?}}}]])\n\n(defn current-page []\n  [:div\n   (if (:match @app-state)\n     (let [view (:view (:data (:match @app-state)))]\n       [view (:match @app-state)]))\n   #_[:pre (pr-str (:match @app-state))]])\n\n(defn start []\n  (reagent/render-component\n   [current-page]\n   (. js/document (getElementById \"app\"))))\n\n(defn ^:export init []\n  ;; init is called ONCE when the page loads\n  ;; this is called in the index.html and must be exported\n  ;; so it is available even in :advanced release builds\n  (rfee/start!\n   (rfe/router routes)\n   (fn [m] (swap! app-state assoc :match m))\n   ;; set to false to enable HistoryAPI\n   {:use-fragment true})\n  ;;(ps/init)\n  (ps-two/init)\n  (start))\n\n(defn stop []\n  ;; stop is called before any code is reloaded\n  ;; this is controlled by :before-load in the config\n  (js/console.log \"stop\"))\n"]}