{"version":3,"sources":["reitit/impl.cljc"],"mappings":"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","names":["reitit.impl/parse","path","opts","reitit.trie/normalize","path-parts","reitit.trie/split-path","path-params","cljs.core.remove","cljs.core/string?","cljs.core.map","cljs.core/set","reitit.impl/wild-path?","cljs.core/seq","cljs.core/boolean","reitit.impl/->wild-route?","p__47579","vec__47580","cljs.core.nth","reitit.impl/maybe-map-values","f","coll","cljs.core/reduce-kv","k","v","temp__5755__auto__","v'","cljs.core.assoc","p__47585","map__47586","cljs.core/--destructure-map","cljs.core.get","reitit.impl/walk","raw-routes","data","routes","expand","p","m","r","p1__47583#","p2__47584#","cljs.core.reduce","cljs.core.into","walk-one","pacc","macc","cljs.core/vector?","cljs.core/first","walk-many","vec__47596","seq__47597","first__47598","cljs.core/next","vec__47599","vec__47602","maybe-arg","args","childs","cljs.core/sequential?","cljs.core/rest","child-routes","cljs.core.keep","cljs.core/identity","cljs.core.mapv","reitit.impl/map-data","p__47605","vec__47606","ds","reitit.impl/merge-data","x","p__47609","vec__47610","acc","e47613","meta_merge.core.meta_merge","js/Error","e","reitit.exception.fail_BANG_","p__47615","map__47616","reitit.impl/resolve-routes","coerce","G__47617","p1__47614#","reitit.impl/path-conflicting-routes","cljs.core.comp","cljs.core.map_indexed","index","route","p1__47618#","cljs.core.filter","reitit.trie/conflicting-paths?","cljs.core.subvec","cljs.core/second","cljs.core/not-empty","reitit.impl/conflicting-paths","conflicts","iter__4611__auto__","s__47620","cljs.core/LazySeq","temp__5753__auto__","cljs.core/chunked-seq?","c__4609__auto__","size__4610__auto__","cljs.core/count","b__47622","cljs.core/chunk-buffer","i__47621","vec__47623","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__47619","cljs.core/chunk-rest","vec__47626","cljs.core/cons","pc","cljs.core.conj","cljs.core.apply","cljs.core/concat","reitit.impl/name-conflicting-routes","G__47629","cljs.core/group-by","cljs.core/nil?","cljs.core/pos?","cljs.core/butlast","p__47630","vec__47631","reitit.impl/find-names","_","p1__47634#","p__47635","p__47636","vec__47637","map__47640","reitit.impl/compile-route","compile","reitit.impl/compile-routes","p1__47641#","reitit.impl/uncompile-routes","cljs.core/vec","cljs.core.partial","cljs.core/take","reitit.impl/path-for","temp__5751__auto__","parts","part","cljs.core/reduced","cljs.core/str","reitit.impl/throw-on-missing-path-params","template","required","p1__47642#","cljs.core/every?","cljs.core/contains?","defined","cljs.core/keys","missing","clojure.set.difference","reitit.impl/fast-assoc","a","reitit.impl/fast-map","reitit.impl/fast-get","reitit.impl/strip-nils","reitit.impl/url-encode","s","js/encodeURIComponent","reitit.impl/maybe-url-decode","js/decodeURIComponent","reitit.impl/url-decode","or__4212__auto__","reitit.impl/form-encode","clojure.string/replace","reitit.impl/form-decode","reitit.impl/url-decode-coll","reitit$impl$IntoString$into_string$dyn","x__4509__auto__","m__4510__auto__","reitit.impl/into-string","goog/typeOf","m__4508__auto__","cljs.core/missing-protocol","reitit.impl/IntoString","goog.object/set","cljs.core/PROTOCOL_SENTINEL","this","cljs.core/Keyword","ns","cljs.core/namespace","cljs.core/name","reitit.impl/path-params","params","p1__47644#","reitit.impl/query-string","p__47645","vec__47646","clojure.string.join","cljs.core/chunk-first"],"sourcesContent":["(ns ^:no-doc reitit.impl\n  #?(:cljs (:require-macros [reitit.impl]))\n  (:require [clojure.string :as str]\n            [clojure.set :as set]\n            [meta-merge.core :as mm]\n            [reitit.trie :as trie]\n            [reitit.exception :as exception]\n            [reitit.exception :as ex])\n  #?(:clj\n     (:import (java.util.regex Pattern)\n              (java.util HashMap Map)\n              (java.net URLEncoder URLDecoder))))\n\n(defn parse [path opts]\n  (let [path #?(:clj (.intern ^String (trie/normalize path opts)) :cljs (trie/normalize path opts))\n        path-parts (trie/split-path path opts)\n        path-params (->> path-parts (remove string?) (map :value) set)]\n    {:path-params path-params\n     :path-parts path-parts\n     :path path}))\n\n(defn wild-path? [path opts]\n  (-> path (parse opts) :path-params seq boolean))\n\n(defn ->wild-route? [opts]\n  (fn [[path]] (-> path (parse opts) :path-params seq boolean)))\n\n(defn maybe-map-values\n  \"Applies a function to every value of a map, updates the value if not nil.\n  Also works on vectors. Maintains key for maps, order for vectors.\"\n  [f coll]\n  (reduce-kv\n    (fn [coll k v]\n      (if-some [v' (f v)]\n        (assoc coll k v')\n        coll))\n    coll\n    coll))\n\n(defn walk [raw-routes {:keys [path data routes expand]\n                        :or {data [], routes []}\n                        :as opts}]\n  (letfn\n    [(walk-many [p m r]\n       (reduce #(into %1 (walk-one p m %2)) [] r))\n     (walk-one [pacc macc routes]\n       (if (vector? (first routes))\n         (walk-many pacc macc routes)\n         (when (string? (first routes))\n           (let [[path & [maybe-arg :as args]] routes\n                 [data childs] (if (or (vector? maybe-arg)\n                                       (and (sequential? maybe-arg)\n                                            (sequential? (first maybe-arg)))\n                                       (nil? maybe-arg))\n                                 [{} args]\n                                 [maybe-arg (rest args)])\n                 macc (into macc (expand data opts))\n                 child-routes (walk-many (str pacc path) macc (keep identity childs))]\n             (if (seq childs) (seq child-routes) [[(str pacc path) macc]])))))]\n    (walk-one path (mapv identity data) raw-routes)))\n\n(defn map-data [f routes]\n  (mapv (fn [[p ds]] [p (f p ds)]) routes))\n\n(defn merge-data [p x]\n  (reduce\n    (fn [acc [k v]]\n      (try\n        (mm/meta-merge acc {k v})\n        (catch #?(:clj Exception, :cljs js/Error) e\n          (ex/fail! ::merge-data {:path p, :left acc, :right {k v}, :exception e}))))\n    {} x))\n\n(defn resolve-routes [raw-routes {:keys [coerce] :as opts}]\n  (cond->> (->> (walk raw-routes opts) (map-data merge-data))\n           coerce (into [] (keep #(coerce % opts)))))\n\n(defn path-conflicting-routes [routes opts]\n  (-> (into {}\n            (comp (map-indexed (fn [index route]\n                                 [route (into #{}\n                                              (filter #(trie/conflicting-paths? (first route) (first %) opts))\n                                              (subvec routes (inc index)))]))\n                  (filter (comp seq second)))\n            routes)\n      (not-empty)))\n\n(defn conflicting-paths [conflicts]\n  (->> (for [[p pc] conflicts]\n         (conj (map first pc) (first p)))\n       (apply concat)\n       (set)))\n\n(defn name-conflicting-routes [routes]\n  (some->> routes\n           (group-by (comp :name second))\n           (remove (comp nil? first))\n           (filter (comp pos? count butlast second))\n           (seq)\n           (map (fn [[k v]] [k (set v)]))\n           (into {})))\n\n(defn find-names [routes _]\n  (into [] (keep #(-> % second :name)) routes))\n\n(defn compile-route [[p m :as route] {:keys [compile] :as opts}]\n  [p m (if compile (compile route opts))])\n\n(defn compile-routes [routes opts]\n  (into [] (keep #(compile-route % opts) routes)))\n\n(defn uncompile-routes [routes]\n  (mapv (comp vec (partial take 2)) routes))\n\n(defn path-for [route path-params]\n  (if (:path-params route)\n    (if-let [parts (reduce\n                     (fn [acc part]\n                       (if (string? part)\n                         (conj acc part)\n                         (if-let [p (get path-params (:value part))]\n                           (conj acc p)\n                           (reduced nil))))\n                     [] (:path-parts route))]\n      (apply str parts))\n    (:path route)))\n\n(defn throw-on-missing-path-params [template required path-params]\n  (when-not (every? #(contains? path-params %) required)\n    (let [defined (-> path-params keys set)\n          missing (set/difference required defined)]\n      (exception/fail!\n        (str \"missing path-params for route \" template \" -> \" missing)\n        {:path-params path-params, :required required}))))\n\n(defn fast-assoc\n  #?@(:clj  [[^clojure.lang.Associative a k v] (.assoc a k v)]\n      :cljs [[a k v] (assoc a k v)]))\n\n(defn fast-map [m]\n  #?(:clj  (let [m (or m {})] (HashMap. ^Map m))\n     :cljs m))\n\n(defn fast-get\n  #?@(:clj  [[^HashMap m k] (.get m k)]\n      :cljs [[m k] (m k)]))\n\n(defn strip-nils [m]\n  (->> m (remove (comp nil? second)) (into {})))\n\n#?(:clj (def +percents+ (into [] (map #(format \"%%%02X\" %) (range 0 256)))))\n\n#?(:clj (defn byte->percent [^long byte]\n          (nth +percents+ (if (< byte 0) (+ 256 byte) byte))))\n\n#?(:clj (defn percent-encode [^String s]\n          (->> (.getBytes s \"UTF-8\") (map byte->percent) (str/join))))\n\n;;\n;; encoding & decoding\n;;\n\n;; + is safe, but removed so it would work the same as with js\n(defn url-encode [s]\n  (if s\n    #?(:clj  (str/replace s #\"[^A-Za-z0-9\\!'\\(\\)\\*_~.-]+\" percent-encode)\n       :cljs (js/encodeURIComponent s))))\n\n(defn maybe-url-decode [s]\n  (if s\n    #?(:clj  (if (.contains ^String s \"%\")\n               (URLDecoder/decode\n                 (if (.contains ^String s \"+\")\n                   (.replace ^String s \"+\" \"%2B\")\n                   s)\n                 \"UTF-8\"))\n       :cljs (js/decodeURIComponent s))))\n\n(defn url-decode [s]\n  (or (maybe-url-decode s) s))\n\n(defn form-encode [s]\n  (if s\n    #?(:clj  (URLEncoder/encode ^String s \"UTF-8\")\n       :cljs (str/replace (js/encodeURIComponent s) \"%20\" \"+\"))))\n\n(defn form-decode [s]\n  (if s\n    #?(:clj  (if (or (.contains ^String s \"%\") (.contains ^String s \"+\"))\n               (URLDecoder/decode ^String s \"UTF-8\")\n               s)\n       :cljs (js/decodeURIComponent (str/replace s \"+\" \" \")))))\n\n(defn url-decode-coll\n  \"URL-decodes maps and vectors\"\n  [coll]\n  (maybe-map-values maybe-url-decode coll))\n\n(defprotocol IntoString\n  (into-string [_]))\n\n(extend-protocol IntoString\n  #?(:clj  String\n     :cljs string)\n  (into-string [this] this)\n\n  #?(:clj  clojure.lang.Keyword\n     :cljs cljs.core.Keyword)\n  (into-string [this]\n    (let [ns (namespace this)]\n      (str ns (if ns \"/\") (name this))))\n\n  #?(:clj  Boolean\n     :cljs boolean)\n  (into-string [this] (str this))\n\n  #?(:clj  Number\n     :cljs number)\n  (into-string [this] (str this))\n\n  #?(:clj  Object\n     :cljs object)\n  (into-string [this] (str this))\n\n  nil\n  (into-string [_]))\n\n(defn path-params\n  \"Convert parameters' values into URL-encoded strings, suitable for URL paths\"\n  [params]\n  (maybe-map-values #(url-encode (into-string %)) params))\n\n(defn query-string\n  \"shallow transform of query parameters into query string\"\n  [params]\n  (->> params\n       (map (fn [[k v]]\n              (str (form-encode (into-string k))\n                   \"=\"\n                   (form-encode (into-string v)))))\n       (str/join \"&\")))\n\n(defmacro goog-extend [type base-type ctor & methods]\n  `(do\n     (def ~type (fn ~@ctor))\n\n     (goog/inherits ~type ~base-type)\n\n     ~@(map\n         (fn [method]\n           `(set! (.. ~type -prototype ~(symbol (str \"-\" (first method))))\n                  (fn ~@(rest method))))\n         methods)))\n"]}