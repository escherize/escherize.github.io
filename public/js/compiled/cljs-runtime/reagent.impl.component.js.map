{"version":3,"sources":["reagent/impl/component.cljs"],"mappings":"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","names":["reagent.impl.component/extract-props","v","p","cljs.core.nth","cljs.core/map?","reagent.impl.component/extract-children","first-child","cljs.core/count","cljs.core.subvec","reagent.impl.component/props-argv","c","temp__5755__auto__","a","reagent.impl.util/shallow-obj-to-map","reagent.impl.component/get-argv","reagent.impl.component/get-props","reagent.impl.component/get-children","js/module$node_modules$react$index.Children.toArray","cljs.core.into","reagent.impl.component/reagent-class?","cljs.core/fn?","G__43330","reagent.impl.component/react-class?","G__43340","reagent.impl.component/reagent-component?","reagent.impl.component/state-atom","this","sa","reagent.ratom.atom","reagent.impl.component/wrap-render","compiler","f","_","cljs.core/ifn?","js/Error","cljs.core.pr_str","res","n","G__43350","cljs.core.into_array","cljs.core/vector?","reagent.impl.protocols/as-element","args","cljs.core.apply","cljs.core/vector","reagent.impl.component/component-name","or__4212__auto__","G__43357","G__43359","reagent.impl.component/comp-name","reagent.impl.component/*current-component*","cljs.core/empty?","reagent.impl.component/do-render","*current-component*-orig-val__43364","*current-component*-temp-val__43365","ok","reagent.debug/has-console","reagent.debug/tracking","reagent.debug/track-console","js/console","reagent.impl.component/rat-opts","reagent.impl.component/custom-wrapper","key","G__43368","cljs.core/Keyword","props","state","cljs.core/reset!","oldprops","oldstate","nextprops","nextstate","reagent.impl.util/*always-update*","old-argv","new-argv","noargv","e43383","cljs.core.not_EQ_","e","snapshot","G__43384","goog.object/get","reagent.ratom/dispose!","reagent.impl.batching/mark-rendered","error","info","reagent.impl.component/get-wrapper","wrap","and__4210__auto__","reagent.impl.component/obligatory","reagent.impl.component/dash-to-method-name","reagent.impl.util/memoize-1","reagent.impl.util/dash-to-method-name","reagent.impl.component/camelify-map-keys","fun-map","cljs.core/reduce-kv","m","k","cljs.core.assoc","cljs.core.keyword","reagent.impl.component/add-obligatory","cljs.core.merge","reagent.impl.component/wrap-funs","fmap","renders","cljs.core/select-keys","render-fun","cljs.core/vals","cljs.core/first","cljs.core/not","legacy-render","name","reagent.impl.util/fun-name","cljs.core.gensym","reagent.impl.util/*non-reactive*","rat","reagent.ratom/run-in-reaction","reagent.impl.batching/queue-render","reagent.impl.component/map-to-js","o","G__43399","goog.object/set","cljs.core/name","reagent.impl.component/cljsify","body","reagent.impl.component/built-in-static-method-names","reagent.impl.component/create-class","methods","cljs.core/dissoc","static-methods","display-name","get-initial-state","construct","cmp","context","updater","js/module$node_modules$react$index.Component","reagent.impl.batching/next-mount-count","goog.object/extend","writer","opt","cljs.core/-write","reagent.impl.component/cached-react-class","reagent.impl.protocols/get-id","reagent.impl.component/cache-react-class","constructor","reagent.impl.component/fn-to-class","spec","cljs.core/meta","withrender","reagent.impl.component/as-class","tag","cached-class","reagent.impl.component/reactify-component","comp","reagent.impl.component/functional-wrap-render","argv","reagent.impl.component/functional-do-render","*current-component*-orig-val__43400","*current-component*-temp-val__43401","reagent.impl.component/functional-render","jsprops","vec__43402","update-count","js/module$node_modules$react$index.useState","state-ref","js/module$node_modules$react$index.useRef","obj","cljs.core/inc","reagent-state","js/module$node_modules$react$index.useEffect","G__43405","reagent.impl.component/functional-render-memo-fn","prev-props","next-props","e43406","cljs.core._EQ_","reagent.impl.component/functional-render-fn","js/module$node_modules$react$index.memo"],"sourcesContent":["(ns reagent.impl.component\n  (:require [goog.object :as gobj]\n            [react :as react]\n            [reagent.impl.util :as util]\n            [reagent.impl.batching :as batch]\n            [reagent.impl.protocols :as p]\n            [reagent.ratom :as ratom]\n            [reagent.debug :refer-macros [dev? warn error warn-unless assert-callable]]))\n\n(declare ^:dynamic *current-component*)\n\n\n;;; Argv access\n\n(defn extract-props [v]\n  (let [p (nth v 1 nil)]\n    (if (map? p) p)))\n\n(defn extract-children [v]\n  (let [p (nth v 1 nil)\n        first-child (if (or (nil? p) (map? p)) 2 1)]\n    (if (> (count v) first-child)\n      (subvec v first-child))))\n\n(defn props-argv [^js/React.Component c p]\n  (if-some [a (.-argv p)]\n    a\n    [(.-constructor c) (util/shallow-obj-to-map p)]))\n\n(defn get-argv [^js/React.Component c]\n  (props-argv c (.-props c)))\n\n(defn get-props [^js/React.Component c]\n  (let [p (.-props c)]\n    (if-some [v (.-argv p)]\n      (extract-props v)\n      (util/shallow-obj-to-map p))))\n\n(defn get-children [^js/React.Component c]\n  (let [p (.-props c)]\n    (if-some [v (.-argv p)]\n      (extract-children v)\n      (->> (.-children p)\n           (react/Children.toArray)\n           (into [])))))\n\n(defn ^boolean reagent-class? [c]\n  (and (fn? c)\n       (some? (some-> c (.-prototype) (.-reagentRender)))))\n\n(defn ^boolean react-class? [c]\n  (and (fn? c)\n       (some? (some-> c (.-prototype) (.-render)))))\n\n(defn ^boolean reagent-component? [^clj c]\n  (some? (.-reagentRender c)))\n\n;;; State\n\n(defn state-atom [^clj this]\n  (let [sa (.-cljsState this)]\n    (if-not (nil? sa)\n      sa\n      (set! (.-cljsState this) (ratom/atom nil)))))\n\n;;; Rendering\n\n(defn wrap-render\n  \"Calls the render function of the component `c`.  If result `res` evaluates to a:\n     1) Vector (form-1 component) - Treats the vector as hiccup and returns\n        a react element with a render function based on that hiccup\n     2) Function (form-2 component) - updates the render function to `res` i.e. the internal function\n        and calls wrap-render again (`recur`), until the render result doesn't evaluate to a function.\n     3) Anything else - Returns the result of evaluating `c`\"\n  [^clj c compiler]\n  (let [f (.-reagentRender c)\n        _ (assert-callable f)\n        ;; cljsLegacyRender tells if this calls was defined\n        ;; using :render instead of :reagent-render\n        ;; in that case, the :render fn is called with just `this` as argument.\n        res (if (true? (.-cljsLegacyRender c))\n              (.call f c c)\n              (let [v (get-argv c)\n                    n (count v)]\n                (case n\n                  1 (.call f c)\n                  2 (.call f c (nth v 1))\n                  3 (.call f c (nth v 1) (nth v 2))\n                  4 (.call f c (nth v 1) (nth v 2) (nth v 3))\n                  5 (.call f c (nth v 1) (nth v 2) (nth v 3) (nth v 4))\n                  (.apply f c (.slice (into-array v) 1)))))]\n    (cond\n      (vector? res) (p/as-element compiler res)\n      (ifn? res) (let [f (if (reagent-class? res)\n                           (fn [& args]\n                             (p/as-element compiler (apply vector res args)))\n                           res)]\n                   (set! (.-reagentRender c) f)\n                   (recur c compiler))\n      :else res)))\n\n(defn component-name [c]\n  (or (some-> c .-constructor .-displayName)\n      (some-> c .-constructor .-name)))\n\n(defn comp-name []\n  (if (dev?)\n    (let [c *current-component*\n          n (component-name c)]\n      (if-not (empty? n)\n        (str \" (in \" n \")\")\n        \"\"))\n    \"\"))\n\n(defn do-render [c compiler]\n  (binding [*current-component* c]\n    (if (dev?)\n      ;; Log errors, without using try/catch (and mess up call stack)\n      (let [ok (array false)]\n        (try\n          (let [res (wrap-render c compiler)]\n            (aset ok 0 true)\n            res)\n          (finally\n            (when-not (aget ok 0)\n              (error (str \"Error rendering component\"\n                          (comp-name)))))))\n      (wrap-render c compiler))))\n\n\n;;; Method wrapping\n\n(def rat-opts {:no-cache true})\n\n(defn custom-wrapper [key f]\n  (case key\n    :getDefaultProps\n    (throw (js/Error. \"getDefaultProps not supported\"))\n\n    :getDerivedStateFromProps\n    (fn getDerivedStateFromProps [props state]\n      ;; Read props from Reagent argv\n      (.call f nil (if-some [a (.-argv props)] (extract-props a) props) state))\n\n    ;; In ES6 React, this is now part of the constructor\n    :getInitialState\n    (fn getInitialState [c]\n      (reset! (state-atom c) (.call f c c)))\n\n    :getSnapshotBeforeUpdate\n    (fn getSnapshotBeforeUpdate [oldprops oldstate]\n      (this-as c (.call f c c (props-argv c oldprops) oldstate)))\n\n    ;; Deprecated - warning in 16.9 will work through 17.x\n    :componentWillReceiveProps\n    (fn componentWillReceiveProps [nextprops]\n      (this-as c (.call f c c (props-argv c nextprops))))\n\n    ;; Deprecated - will work in 17.x\n    :UNSAFE_componentWillReceiveProps\n    (fn componentWillReceiveProps [nextprops]\n      (this-as c (.call f c c (props-argv c nextprops))))\n\n    :shouldComponentUpdate\n    (fn shouldComponentUpdate [nextprops nextstate]\n      (or util/*always-update*\n          (this-as c\n                   ;; Don't care about nextstate here, we use forceUpdate\n                   ;; when only when state has changed anyway.\n                   (let [old-argv (.. c -props -argv)\n                         new-argv (.-argv nextprops)\n                         noargv (or (nil? old-argv) (nil? new-argv))]\n                     (cond\n                       (nil? f) (or noargv (try (not= old-argv new-argv)\n                                                (catch :default e\n                                                  (warn \"Exception thrown while comparing argv's in shouldComponentUpdate: \" old-argv \" \" new-argv \" \" e)\n                                                  false)))\n                       noargv (.call f c c (get-argv c) (props-argv c nextprops))\n                       :else  (.call f c c old-argv new-argv))))))\n\n    ;; Deprecated - warning in 16.9 will work through 17.x\n    :componentWillUpdate\n    (fn componentWillUpdate [nextprops nextstate]\n      (this-as c (.call f c c (props-argv c nextprops) nextstate)))\n\n    ;; Deprecated - will work in 17.x\n    :UNSAFE_componentWillUpdate\n    (fn componentWillUpdate [nextprops nextstate]\n      (this-as c (.call f c c (props-argv c nextprops) nextstate)))\n\n    :componentDidUpdate\n    (fn componentDidUpdate [oldprops oldstate snapshot]\n      (this-as c (.call f c c (props-argv c oldprops) oldstate snapshot)))\n\n    ;; Deprecated - warning in 16.9 will work through 17.x\n    :componentWillMount\n    (fn componentWillMount []\n      (this-as c (.call f c c)))\n\n    ;; Deprecated - will work in 17.x\n    :UNSAFE_componentWillMount\n    (fn componentWillMount []\n      (this-as c (.call f c c)))\n\n    :componentDidMount\n    (fn componentDidMount []\n      (this-as c (.call f c c)))\n\n    :componentWillUnmount\n    (fn componentWillUnmount []\n      (this-as c\n               (some-> (gobj/get c \"cljsRatom\") ratom/dispose!)\n               (batch/mark-rendered c)\n               (when-not (nil? f)\n                 (.call f c c))))\n\n    :componentDidCatch\n    (fn componentDidCatch [error info]\n      (this-as c (.call f c c error info)))\n\n    nil))\n\n(defn get-wrapper [key f]\n  (let [wrap (custom-wrapper key f)]\n    (when (and wrap f)\n      (assert-callable f))\n    (or wrap f)))\n\n;; Though the value is nil here, the wrapper function will be\n;; added to class to manage Reagent ratom lifecycle.\n(def obligatory {:shouldComponentUpdate nil\n                 :componentWillUnmount nil})\n\n(def dash-to-method-name (util/memoize-1 util/dash-to-method-name))\n\n(defn camelify-map-keys [fun-map]\n  (reduce-kv (fn [m k v]\n               (assoc m (-> k dash-to-method-name keyword) v))\n             {} fun-map))\n\n(defn add-obligatory [fun-map]\n  (merge obligatory fun-map))\n\n(defn wrap-funs [fmap compiler]\n  (when (dev?)\n    (let [renders (select-keys fmap [:render :reagentRender])\n          render-fun (-> renders vals first)]\n      (assert (not (:componentFunction fmap)) \":component-function is no longer supported, use :reagent-render instead.\")\n      (assert (pos? (count renders)) \"Missing reagent-render\")\n      (assert (== 1 (count renders)) \"Too many render functions supplied\")\n      (assert-callable render-fun)))\n  (let [render-fun (or (:reagentRender fmap)\n                       (:render fmap))\n        legacy-render (nil? (:reagentRender fmap))\n        name (or (:displayName fmap)\n                 (util/fun-name render-fun)\n                 (str (gensym \"reagent\")))\n        fmap (reduce-kv (fn [m k v]\n                          (assoc m k (get-wrapper k v)))\n                        {} fmap)]\n    (assoc fmap\n           :displayName name\n           :cljsLegacyRender legacy-render\n           :reagentRender render-fun\n           :render (fn render []\n                     (this-as c (if util/*non-reactive*\n                                  (do-render c compiler)\n                                  (let [^clj rat (gobj/get c \"cljsRatom\")]\n                                    (batch/mark-rendered c)\n                                    (if (nil? rat)\n                                      (ratom/run-in-reaction #(do-render c compiler) c \"cljsRatom\"\n                                                             batch/queue-render rat-opts)\n                                      (._run rat false)))))))))\n\n(defn map-to-js [m]\n  (reduce-kv (fn [o k v]\n               (doto o\n                 (gobj/set (name k) v)))\n             #js{} m))\n\n(defn cljsify [body compiler]\n  (-> body\n      camelify-map-keys\n      add-obligatory\n      (wrap-funs compiler)))\n\n;; Idea from:\n;; https://gist.github.com/pesterhazy/2a25c82db0519a28e415b40481f84554\n;; https://gist.github.com/thheller/7f530b34de1c44589f4e0671e1ef7533#file-es6-class-cljs-L18\n\n(def built-in-static-method-names\n  [:childContextTypes :contextTypes :contextType\n   :getDerivedStateFromProps :getDerivedStateFromError])\n\n(defn create-class\n  \"Creates JS class based on provided Clojure map.\n\n  Map keys should use `React.Component` method names (https://reactjs.org/docs/react-component.html),\n  and can be provided in snake-case or camelCase.\n  Constructor function is defined using key `:getInitialState`.\n\n  React built-in static methods or properties are automatically defined as statics.\"\n  [body compiler]\n  {:pre [(map? body)]}\n  (let [body (cljsify body compiler)\n        methods (map-to-js (apply dissoc body :displayName :getInitialState :constructor\n                                  :render :reagentRender\n                                  built-in-static-method-names))\n        static-methods (map-to-js (select-keys body built-in-static-method-names))\n        display-name (:displayName body)\n        get-initial-state (:getInitialState body)\n        construct (:constructor body)\n        cmp (fn [props context updater]\n              (this-as this\n                (.call react/Component this props context updater)\n                (when construct\n                  (construct this props))\n                (when get-initial-state\n                  (set! (.-state this) (get-initial-state this)))\n                (set! (.-cljsMountOrder ^clj this) (batch/next-mount-count))\n                this))]\n\n    (gobj/extend (.-prototype cmp) (.-prototype react/Component) methods)\n\n    ;; These names SHOULD be mangled by Closure so we can't use goog/extend\n\n    (when (:render body)\n      (set! (.-render ^js (.-prototype cmp)) (:render body)))\n\n    (when (:reagentRender body)\n      (set! (.-reagentRender ^clj (.-prototype cmp)) (:reagentRender body)))\n\n    (when (:cljsLegacyRender body)\n      (set! (.-cljsLegacyRender ^clj (.-prototype cmp)) (:cljsLegacyRender body)))\n\n    (gobj/extend cmp react/Component static-methods)\n\n    (when display-name\n      (set! (.-displayName cmp) display-name)\n      (set! (.-cljs$lang$ctorStr cmp) display-name)\n      (set! (.-cljs$lang$ctorPrWriter cmp)\n            (fn [this writer opt]\n              (cljs.core/-write writer display-name))))\n\n    (set! (.-cljs$lang$type cmp) true)\n    (set! (.. cmp -prototype -constructor) cmp)\n\n    cmp))\n\n;; Cache result to the tag but per compiler ID\n;; TODO: Generate cache & get methods to the Object using macro,\n;; can generate code calling interop forms.\n(defn cached-react-class [compiler ^clj c]\n  (gobj/get c (p/get-id compiler)))\n\n(defn cache-react-class [compiler ^clj c constructor]\n  (gobj/set c (p/get-id compiler) constructor)\n  constructor)\n\n(defn fn-to-class [compiler f]\n  (assert-callable f)\n  (warn-unless (not (and (react-class? f)\n                         (not (reagent-class? f))))\n               \"Using native React classes directly in Hiccup forms \"\n               \"is not supported. Use create-element or \"\n               \"adapt-react-class instead: \" (or (util/fun-name f)\n                                                 f)\n               (comp-name))\n  (if (reagent-class? f)\n    (cache-react-class compiler f f)\n    (let [spec (meta f)\n          withrender (assoc spec :reagent-render f)\n          res (create-class withrender compiler)]\n      (cache-react-class compiler f res))))\n\n(defn as-class [tag compiler]\n  (if-some [cached-class (cached-react-class compiler tag)]\n    cached-class\n    (fn-to-class compiler tag)))\n\n(defn reactify-component [comp compiler]\n  (if (react-class? comp)\n    comp\n    (as-class comp compiler)))\n\n(defn functional-wrap-render\n  [compiler c]\n  (let [f (.-reagentRender c)\n        _ (assert-callable f)\n        argv (.-argv c)\n        res (apply f argv)]\n    (cond\n      (vector? res) (p/as-element compiler res)\n      (ifn? res) (let [f (if (reagent-class? res)\n                           (fn [& args]\n                             (p/as-element compiler (apply vector res args)))\n                           res)]\n                   (set! (.-reagentRender c) f)\n                   (recur compiler c))\n      :else res)))\n\n(defn functional-do-render [compiler c]\n  (binding [*current-component* c]\n    (if (dev?)\n      ;; Log errors, without using try/catch (and mess up call stack)\n      (let [ok (array false)]\n        (try\n          (let [res (functional-wrap-render compiler c)]\n            (aset ok 0 true)\n            res)\n          (finally\n            (when-not (aget ok 0)\n              (error (str \"Error rendering component\" (comp-name)))))))\n      (functional-wrap-render compiler c))))\n\n(defn functional-render [compiler jsprops]\n  (if util/*non-reactive*\n    ;; Non-reactive component needs just the render fn and argv\n    (functional-do-render compiler jsprops)\n    (let [argv (.-argv jsprops)\n          tag (.-reagentRender jsprops)\n\n          ;; Use counter to trigger render manually.\n          [_ update-count] (react/useState 0)\n\n          ;; This object mimics React Class attributes and methods.\n          ;; To support form-2 components, even the render fn needs to\n          ;; be stored as it is created during the first render,\n          ;; and subsequent renders need to retrieve the created fn.\n          state-ref (react/useRef)\n\n          _ (when-not (.-current state-ref)\n              (let [obj #js {}]\n                (set! (.-forceUpdate obj) (fn [] (update-count inc)))\n                (set! (.-cljsMountOrder obj) (batch/next-mount-count))\n                ;; Use reagentRender name, as that is also used\n                ;; by class components, and some checks.\n                ;; reagentRender is replaced with form-2 inner fn,\n                ;; constructor refers to the original fn.\n                (set! (.-constructor obj) tag)\n                (set! (.-reagentRender obj) tag)\n\n                (set! (.-current state-ref) obj)))\n\n          reagent-state (.-current state-ref)\n\n          ;; FIXME: Access cljsRatom using interop forms\n          rat (gobj/get reagent-state \"cljsRatom\")]\n\n      (react/useEffect\n        (fn mount []\n          (fn unmount []\n            (some-> (gobj/get reagent-state \"cljsRatom\") ratom/dispose!)))\n        ;; Ignore props - only run effect once on mount and unmount\n        #js [])\n\n      ;; Argv is also stored in the state,\n      ;; so reaction fn will always see the latest value.\n      (set! (.-argv reagent-state) argv)\n\n      (batch/mark-rendered reagent-state)\n\n      ;; static-fns :render\n      (if (nil? rat)\n        (ratom/run-in-reaction\n          ;; Mock Class component API\n          #(functional-do-render compiler reagent-state)\n          reagent-state\n          \"cljsRatom\"\n          batch/queue-render\n          rat-opts)\n        ;; TODO: Consider passing props here, instead of keeping them in state?\n        (._run rat false)))))\n\n(defn functional-render-memo-fn\n  [prev-props next-props]\n  (let [old-argv (.-argv prev-props)\n        new-argv (.-argv next-props)]\n    (and (false? util/*always-update*)\n         (try\n           (= old-argv new-argv)\n           (catch :default e\n             (warn \"Exception thrown while comparing argv's in shouldComponentUpdate: \" old-argv \" \" new-argv \" \" e)\n             false)))))\n\n(defn functional-render-fn\n  \"Create copy of functional-render with displayName set to name of the\n  original Reagent component.\"\n  [compiler tag]\n  ;; TODO: Could be disabled for optimized builds?\n  ;; Or not currently - the memo wrap is required.\n  (or (cached-react-class compiler tag)\n      (let [f (fn [jsprops] (functional-render compiler jsprops))\n            _ (set! (.-displayName f) (util/fun-name tag))\n            f (react/memo f functional-render-memo-fn)]\n        (cache-react-class compiler tag f)\n        f)))\n"]}