["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Processing",["^ ","~$prototype",["^ ","~$PConstants",["^ "]],"~$getInstanceById",["^ "]],"~$Math",["^ ","~$PI",["^ "]],"~$Error",["^ "],"~$PFont",["^ ","~$list",["^ "]],"~$String",["^ "],"~$Object",["^ ","~$charCodeAt",["^ "]]],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$quil.core","~:imports",null,"~:requires",["^ ","~$clojure.string","^F","~$org.processingjs.Processing","^G","~$ap","~$quil.sketch","^I","^I","~$u","~$quil.util","^J","^J"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$rotate-x",["^ ","~:category","Transform","~:protocol-inline",null,"~:meta",["^ ","^O","Transform","~:added","1.0","~:subcategory",null,"~:file","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","~:end-column",11,"~:processing-name","rotateX()","~:column",3,"~:requires-bindings",true,"~:line",3480,"~:end-line",3480,"~:arglists",["~#list",["~$quote",["^10",[["~$angle"]]]]],"~:doc","Rotates a shape around the x-axis the amount specified by the angle\n  parameter. Angles should be specified in radians (values from 0 to\n  (* PI 2)) or converted to radians with the radians function. Objects\n  are always rotated around their relative position to the origin and\n  positive numbers rotate objects in a counterclockwise\n  direction. Transformations apply to everything that happens after\n  and subsequent calls to the function accumulates the effect. For\n  example, calling (rotate-x HALF-PI) and then (rotate-x HALF-PI) is\n  the same as (rotate-x PI). If rotate-x is called within the draw fn,\n  the transformation is reset when the loop begins again. This\n  function requires either the :p3d or :opengl renderer."],"^R","1.0","^B","~$quil.core/rotate-x","~:variadic",false,"^S",null,"^T","resources/public/js/development/quil/core.cljc","^U",11,"^V","rotateX()","~:method-params",["^10",[["^12"]]],"~:protocol-impl",null,"~:arglists-meta",["^10",[null,null]],"^W",1,"^X",true,"^Y",3474,"^Z",3480,"~:max-fixed-arity",1,"~:fn-var",true,"^[",["^10",["^11",["^10",[["^12"]]]]],"^13","Rotates a shape around the x-axis the amount specified by the angle\n  parameter. Angles should be specified in radians (values from 0 to\n  (* PI 2)) or converted to radians with the radians function. Objects\n  are always rotated around their relative position to the origin and\n  positive numbers rotate objects in a counterclockwise\n  direction. Transformations apply to everything that happens after\n  and subsequent calls to the function accumulates the effect. For\n  example, calling (rotate-x HALF-PI) and then (rotate-x HALF-PI) is\n  the same as (rotate-x PI). If rotate-x is called within the draw fn,\n  the transformation is reset when the loop begins again. This\n  function requires either the :p3d or :opengl renderer."],"~$text-modes",["^ ","^B","~$quil.core/text-modes","^T","resources/public/js/development/quil/core.cljc","^Y",45,"^W",1,"^Z",70,"^U",12,"^Q",["^ ","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^Y",70,"^W",2,"^Z",70,"^U",12],"~:tag","~$cljs.core/IMap"],"~$print-projection",["^ ","^O","Lights, Camera","^P",null,"^Q",["^ ","^O","Lights, Camera","^R","1.0","^S","Camera","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",19,"^V","printProjection()","^W",3,"^X",true,"^Y",3068,"^Z",3068,"^[",["^10",["^11",["^10",[[]]]]],"^13","Prints the current projection matrix to std out. Useful for\n  debugging"],"^R","1.0","^B","~$quil.core/print-projection","^15",false,"^S","Camera","^T","resources/public/js/development/quil/core.cljc","^U",19,"^V","printProjection()","^16",["^10",[[]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",3062,"^Z",3068,"^19",0,"^1:",true,"^[",["^10",["^11",["^10",[[]]]]],"^13","Prints the current projection matrix to std out. Useful for\n  debugging"],"~$raw-key",["^ ","^O","Input","^P",null,"^Q",["^ ","^O","Input","^R","1.0","^S","Keyboard","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",10,"^V","key","^W",3,"^X",true,"^Y",3257,"^Z",3257,"^[",["^10",["^11",["^10",[[]]]]],"^13","Contains the value of the most recent key on the keyboard that was\n  used (either pressed or released).\n\n  For non-ASCII keys, use the keyCode variable. The keys included in\n  the ASCII specification (BACKSPACE, TAB, ENTER, RETURN, ESC, and\n  DELETE) do not require checking to see if they key is coded, and you\n  should simply use the key variable instead of keyCode If you're\n  making cross-platform projects, note that the ENTER key is commonly\n  used on PCs and Unix and the RETURN key is used instead on\n  Macintosh. Check for both ENTER and RETURN to make sure your program\n  will work for all platforms."],"^R","1.0","^B","~$quil.core/raw-key","^15",false,"^S","Keyboard","^T","resources/public/js/development/quil/core.cljc","^U",10,"^V","key","^16",["^10",[[]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",3251,"^Z",3257,"^19",0,"^1:",true,"^[",["^10",["^11",["^10",[[]]]]],"^13","Contains the value of the most recent key on the keyboard that was\n  used (either pressed or released).\n\n  For non-ASCII keys, use the keyCode variable. The keys included in\n  the ASCII specification (BACKSPACE, TAB, ENTER, RETURN, ESC, and\n  DELETE) do not require checking to see if they key is coded, and you\n  should simply use the key variable instead of keyCode If you're\n  making cross-platform projects, note that the ENTER key is commonly\n  used on PCs and Unix and the RETURN key is used instead on\n  Macintosh. Check for both ENTER and RETURN to make sure your program\n  will work for all platforms."],"~$text-char",["^ ","^O","Typography","^P",null,"^Q",["^ ","^O","Typography","^R","1.0","^S","Loading & Displaying","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",12,"~:top-fn",["^ ","^15",false,"^19",4,"^16",["^10",[["~$c","~$x","~$y"],["~$c","~$x","~$y","~$z"]]],"^[",["^10",[["~$c","~$x","~$y"],["~$c","~$x","~$y","~$z"]]],"^18",["^10",[null,null]]],"^V","text()","^W",3,"^X",true,"^Y",4160,"^Z",4160,"^[",["^10",["^11",["^10",[["~$c","~$x","~$y"],["~$c","~$x","~$y","~$z"]]]]],"^13","Draws a char to the screen in the specified position. See text fn\n  for more details."],"^R","1.0","^B","~$quil.core/text-char","^15",false,"^S","Loading & Displaying","^T","resources/public/js/development/quil/core.cljc","^U",12,"^1D",["^ ","^15",false,"^19",4,"^16",["^10",[["~$c","~$x","~$y"],["~$c","~$x","~$y","~$z"]]],"^[",["^10",[["~$c","~$x","~$y"],["~$c","~$x","~$y","~$z"]]],"^18",["^10",[null,null]]],"^V","text()","^16",["^10",[["~$c","~$x","~$y"],["~$c","~$x","~$y","~$z"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",4154,"^Z",4160,"^19",4,"^1:",true,"^[",["^10",[["~$c","~$x","~$y"],["~$c","~$x","~$y","~$z"]]],"^13","Draws a char to the screen in the specified position. See text fn\n  for more details."],"~$display-filter",["^ ","^O","Image","^P",null,"^Q",["^ ","^O","Image","^R","1.0","^S","Pixels","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",17,"^1D",["^ ","^15",false,"^19",2,"^16",["^10",[["~$mode"],["^1G","~$level"]]],"^[",["^10",[["^1G"],["^1G","^1H"]]],"^18",["^10",[null,null]]],"^V","filter()","^W",3,"^X",true,"^Y",1774,"^Z",1774,"^[",["^10",["^11",["^10",[["^1G"],["^1G","^1H"]]]]],"^13","Originally named filter in Processing Language.\n  Filters the display window with the specified mode and level.\n  Level defines the quality of the filter and mode may be one of the\n  following keywords:\n\n  :threshold - converts the image to black and white pixels depending\n               if they are above or below the threshold defined by\n               the level parameter. The level must be between\n               0.0 (black) and 1.0 (white). If no level is specified,\n               0.5 is used.\n  :gray      - converts any colors in the image to grayscale\n               equivalents. Doesn't work with level.\n  :invert    - sets each pixel to its inverse value. Doesn't work with\n               level.\n  :posterize - limits each channel of the image to the number of\n               colors specified as the level parameter. The parameter can\n               be set to values between 2 and 255, but results are most\n               noticeable in the lower ranges.\n  :blur      - executes a Guassian blur with the level parameter\n               specifying the extent of the blurring. If no level\n               parameter is used, the blur is equivalent to Guassian\n               blur of radius 1.\n  :opaque    - sets the alpha channel to entirely opaque. Doesn't work\n               with level.\n  :erode     - reduces the light areas. Doesn't work with level.\n  :dilate    - increases the light areas.  Doesn't work with level."],"^R","1.0","^B","~$quil.core/display-filter","^15",false,"^S","Pixels","^T","resources/public/js/development/quil/core.cljc","^U",17,"^1D",["^ ","^15",false,"^19",2,"^16",["^10",[["^1G"],["^1G","^1H"]]],"^[",["^10",[["^1G"],["^1G","^1H"]]],"^18",["^10",[null,null]]],"^V","filter()","^16",["^10",[["^1G"],["^1G","^1H"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",1768,"^Z",1774,"^19",2,"^1:",true,"^[",["^10",[["^1G"],["^1G","^1H"]]],"^13","Originally named filter in Processing Language.\n  Filters the display window with the specified mode and level.\n  Level defines the quality of the filter and mode may be one of the\n  following keywords:\n\n  :threshold - converts the image to black and white pixels depending\n               if they are above or below the threshold defined by\n               the level parameter. The level must be between\n               0.0 (black) and 1.0 (white). If no level is specified,\n               0.5 is used.\n  :gray      - converts any colors in the image to grayscale\n               equivalents. Doesn't work with level.\n  :invert    - sets each pixel to its inverse value. Doesn't work with\n               level.\n  :posterize - limits each channel of the image to the number of\n               colors specified as the level parameter. The parameter can\n               be set to values between 2 and 255, but results are most\n               noticeable in the lower ranges.\n  :blur      - executes a Guassian blur with the level parameter\n               specifying the extent of the blurring. If no level\n               parameter is used, the blur is equivalent to Guassian\n               blur of radius 1.\n  :opaque    - sets the alpha channel to entirely opaque. Doesn't work\n               with level.\n  :erode     - reduces the light areas. Doesn't work with level.\n  :dilate    - increases the light areas.  Doesn't work with level."],"~$rotate-z",["^ ","^O","Transform","^P",null,"^Q",["^ ","^O","Transform","^R","1.0","^S",null,"^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",11,"^V","rotateZ()","^W",3,"^X",true,"^Y",3522,"^Z",3522,"^[",["^10",["^11",["^10",[["^12"]]]]],"^13","Rotates a shape around the z-axis the amount specified by the angle\n  parameter. Angles should be specified in radians (values from 0\n  to (* PI 2)) or converted to radians with the radians function.\n  Objects are always rotated around their relative position to the\n  origin and positive numbers rotate objects in a counterclockwise\n  direction. Transformations apply to everything that happens after\n  and subsequent calls to the function accumulates the effect. For\n  example, calling (rotate-z HALF-PI) and then (rotate-z HALF-PI) is\n  the same as (rotate-z PI). If rotate-y is called within the draw fn,\n  the transformation is reset when the loop begins again. This\n  function requires either the :p3d or :opengl renderer."],"^R","1.0","^B","~$quil.core/rotate-z","^15",false,"^S",null,"^T","resources/public/js/development/quil/core.cljc","^U",11,"^V","rotateZ()","^16",["^10",[["^12"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",3516,"^Z",3522,"^19",1,"^1:",true,"^[",["^10",["^11",["^10",[["^12"]]]]],"^13","Rotates a shape around the z-axis the amount specified by the angle\n  parameter. Angles should be specified in radians (values from 0\n  to (* PI 2)) or converted to radians with the radians function.\n  Objects are always rotated around their relative position to the\n  origin and positive numbers rotate objects in a counterclockwise\n  direction. Transformations apply to everything that happens after\n  and subsequent calls to the function accumulates the effect. For\n  example, calling (rotate-z HALF-PI) and then (rotate-z HALF-PI) is\n  the same as (rotate-z PI). If rotate-y is called within the draw fn,\n  the transformation is reset when the loop begins again. This\n  function requires either the :p3d or :opengl renderer."],"~$random-gaussian",["^ ","^O","Math","^P",null,"^Q",["^ ","^O","Math","^R","2.0","^S","Random","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",18,"^V","randomGaussian()","^W",3,"^X",true,"^Y",3226,"^Z",3226,"^[",["^10",["^11",["^10",[[]]]]],"^13","Returns a float from a random series of numbers having a mean of 0 and\n  standard deviation of 1. Each time the randomGaussian() function is called,\n  it returns a number fitting a Gaussian, or normal, distribution.\n  There is theoretically no minimum or maximum value that randomGaussian()\n  might return. Rather, there is just a very low probability that values far\n  from the mean will be returned; and a higher probability that numbers near\n  the mean will be returned. ."],"^R","2.0","^B","~$quil.core/random-gaussian","^15",false,"^S","Random","^T","resources/public/js/development/quil/core.cljc","^U",18,"^V","randomGaussian()","^16",["^10",[[]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",3220,"^Z",3226,"^19",0,"^1:",true,"^[",["^10",["^11",["^10",[[]]]]],"^13","Returns a float from a random series of numbers having a mean of 0 and\n  standard deviation of 1. Each time the randomGaussian() function is called,\n  it returns a number fitting a Gaussian, or normal, distribution.\n  There is theoretically no minimum or maximum value that randomGaussian()\n  might return. Rather, there is just a very low probability that values far\n  from the mean will be returned; and a higher probability that numbers near\n  the mean will be returned. ."],"~$blend",["^ ","^O","Image","^P",null,"^Q",["^ ","^O","Image","^R","1.0","^S","Pixels","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",8,"^1D",["^ ","^15",false,"^19",11,"^16",["^10",[["~$x","~$y","~$width","~$height","~$dx","~$dy","~$dwidth","~$dheight","^1G"],["~$src-img","~$x","~$y","^1O","^1P","^1Q","^1R","^1S","^1T","^1G"],["^1U","~$dest-img","~$x","~$y","^1O","^1P","^1Q","^1R","^1S","^1T","^1G"]]],"^[",["^10",[["~$x","~$y","^1O","^1P","^1Q","^1R","^1S","^1T","^1G"],["^1U","~$x","~$y","^1O","^1P","^1Q","^1R","^1S","^1T","^1G"],["^1U","^1V","~$x","~$y","^1O","^1P","^1Q","^1R","^1S","^1T","^1G"]]],"^18",["^10",[null,null,null]]],"^V","blend()","^W",3,"^X",true,"^Y",779,"^Z",779,"^[",["^10",["^11",["^10",[["~$x","~$y","^1O","^1P","^1Q","^1R","^1S","^1T","^1G"],["^1U","~$x","~$y","^1O","^1P","^1Q","^1R","^1S","^1T","^1G"],["^1U","^1V","~$x","~$y","^1O","^1P","^1Q","^1R","^1S","^1T","^1G"]]]]],"^13","Blends a region of pixels from one image into another with full alpha\n  channel support. If src is not specified it defaults to current-graphics.\n  If dest is not specified it defaults to current-graphics.\n\n  Note: blend-mode function is recommended to use instead of this one.\n\n  Available blend modes are:\n\n  :blend      - linear interpolation of colours: C = A*factor + B\n  :add        - additive blending with white clip:\n                                            C = min(A*factor + B, 255)\n  :subtract   - subtractive blending with black clip:\n                                            C = max(B - A*factor, 0)\n  :darkest    - only the darkest colour succeeds:\n                                            C = min(A*factor, B)\n  :lightest   - only the lightest colour succeeds:\n                                            C = max(A*factor, B)\n  :difference - subtract colors from underlying image.\n  :exclusion  - similar to :difference, but less extreme.\n  :multiply   - Multiply the colors, result will always be darker.\n  :screen     - Opposite multiply, uses inverse values of the colors.\n  :overlay    - A mix of :multiply and :screen. Multiplies dark values\n                and screens light values.\n  :hard-light - :screen when greater than 50% gray, :multiply when\n                lower.\n  :soft-light - Mix of :darkest and :lightest. Works like :overlay,\n                but not as harsh.\n  :dodge      - Lightens light tones and increases contrast, ignores\n                darks.\n                Called \"Color Dodge\" in Illustrator and Photoshop.\n  :burn       - Darker areas are applied, increasing contrast, ignores\n                lights. Called \"Color Burn\" in Illustrator and\n                Photoshop."],"^R","1.0","^B","~$quil.core/blend","^15",false,"^S","Pixels","^T","resources/public/js/development/quil/core.cljc","^U",8,"^1D",["^ ","^15",false,"^19",11,"^16",["^10",[["~$x","~$y","^1O","^1P","^1Q","^1R","^1S","^1T","^1G"],["^1U","~$x","~$y","^1O","^1P","^1Q","^1R","^1S","^1T","^1G"],["^1U","^1V","~$x","~$y","^1O","^1P","^1Q","^1R","^1S","^1T","^1G"]]],"^[",["^10",[["~$x","~$y","^1O","^1P","^1Q","^1R","^1S","^1T","^1G"],["^1U","~$x","~$y","^1O","^1P","^1Q","^1R","^1S","^1T","^1G"],["^1U","^1V","~$x","~$y","^1O","^1P","^1Q","^1R","^1S","^1T","^1G"]]],"^18",["^10",[null,null,null]]],"^V","blend()","^16",["^10",[["~$x","~$y","^1O","^1P","^1Q","^1R","^1S","^1T","^1G"],["^1U","~$x","~$y","^1O","^1P","^1Q","^1R","^1S","^1T","^1G"],["^1U","^1V","~$x","~$y","^1O","^1P","^1Q","^1R","^1S","^1T","^1G"]]],"^17",null,"^18",["^10",[null,null,null]],"^W",1,"^X",true,"^Y",773,"^Z",779,"^19",11,"^1:",true,"^[",["^10",[["~$x","~$y","^1O","^1P","^1Q","^1R","^1S","^1T","^1G"],["^1U","~$x","~$y","^1O","^1P","^1Q","^1R","^1S","^1T","^1G"],["^1U","^1V","~$x","~$y","^1O","^1P","^1Q","^1R","^1S","^1T","^1G"]]],"^13","Blends a region of pixels from one image into another with full alpha\n  channel support. If src is not specified it defaults to current-graphics.\n  If dest is not specified it defaults to current-graphics.\n\n  Note: blend-mode function is recommended to use instead of this one.\n\n  Available blend modes are:\n\n  :blend      - linear interpolation of colours: C = A*factor + B\n  :add        - additive blending with white clip:\n                                            C = min(A*factor + B, 255)\n  :subtract   - subtractive blending with black clip:\n                                            C = max(B - A*factor, 0)\n  :darkest    - only the darkest colour succeeds:\n                                            C = min(A*factor, B)\n  :lightest   - only the lightest colour succeeds:\n                                            C = max(A*factor, B)\n  :difference - subtract colors from underlying image.\n  :exclusion  - similar to :difference, but less extreme.\n  :multiply   - Multiply the colors, result will always be darker.\n  :screen     - Opposite multiply, uses inverse values of the colors.\n  :overlay    - A mix of :multiply and :screen. Multiplies dark values\n                and screens light values.\n  :hard-light - :screen when greater than 50% gray, :multiply when\n                lower.\n  :soft-light - Mix of :darkest and :lightest. Works like :overlay,\n                but not as harsh.\n  :dodge      - Lightens light tones and increases contrast, ignores\n                darks.\n                Called \"Color Dodge\" in Illustrator and Photoshop.\n  :burn       - Darker areas are applied, increasing contrast, ignores\n                lights. Called \"Color Burn\" in Illustrator and\n                Photoshop."],"~$frame-count",["^ ","^O","Environment","^P",null,"^Q",["^ ","^O","Environment","^R","1.0","^S",null,"^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",14,"^V","frameCount","^W",3,"^X",true,"^Y",1850,"^Z",1850,"^[",["^10",["^11",["^10",[[]]]]],"^13","The system variable frameCount contains the number of frames\n  displayed since the program started. Inside setup() the value is 0\n  and after the first iteration of draw it is 1, etc."],"^R","1.0","^B","~$quil.core/frame-count","^15",false,"^S",null,"^T","resources/public/js/development/quil/core.cljc","^U",14,"^V","frameCount","^16",["^10",[[]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",1844,"^Z",1850,"^19",0,"^1:",true,"^[",["^10",["^11",["^10",[[]]]]],"^13","The system variable frameCount contains the number of frames\n  displayed since the program started. Inside setup() the value is 0\n  and after the first iteration of draw it is 1, etc."],"~$with-graphics",["^ ","^O","Rendering","^P",null,"^Q",["^ ","^O","Rendering","^R","1.7","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",16,"^1D",["^ ","^15",true,"^19",3,"^16",[["^10",["~$&form","~$&env","~$graphics","~$body"]]],"^[",["^10",[["^1[","^20","^21","~$&","^22"]]],"^18",["^10",[null]]],"^V",null,"^W",3,"^X",true,"^Y",4725,"~:macro",true,"^Z",4725,"^[",["^10",["^11",["^10",[["^21","~$&","^22"]]]]],"^13","All subsequent calls of any drawing function will draw on given\n  graphics. 'with-graphics' cannot be nested (you can draw simultaneously\n  only on 1 graphics)"],"^R","1.7","^B","~$quil.core/with-graphics","^15",true,"^T","resources/public/js/development/quil/core.cljc","^U",16,"^1D",["^ ","^15",true,"^19",3,"^16",[["^10",["^1[","^20","^21","^22"]]],"^[",["^10",[["^1[","^20","^21","~$&","^22"]]],"^18",["^10",[null]]],"^V",null,"^16",[["^10",["^1[","^20","^21","^22"]]],"^17",null,"^18",["^10",[null]],"^W",1,"^X",true,"^Y",4720,"^23",true,"^Z",4725,"^19",3,"^1:",false,"^[",["^10",[["^1[","^20","^21","~$&","^22"]]],"^13","All subsequent calls of any drawing function will draw on given\n  graphics. 'with-graphics' cannot be nested (you can draw simultaneously\n  only on 1 graphics)"],"~$model-y",["^ ","^O","Lights, Camera","^P",null,"^Q",["^ ","^O","Lights, Camera","^R","1.0","^S","Coordinates","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",10,"^V","modelY()","^W",3,"^X",true,"^Y",2535,"^Z",2535,"^[",["^10",["^11",["^10",[["~$x","~$y","~$z"]]]]],"^13","Returns the three-dimensional x, y, z position in model space. This\n  returns the y value for a given coordinate based on the current set\n  of transformations (scale, rotate, translate, etc.) The y value can\n  be used to place an object in space relative to the location of the\n  original point once the transformations are no longer in use."],"^R","1.0","^B","~$quil.core/model-y","^15",false,"^S","Coordinates","^T","resources/public/js/development/quil/core.cljc","^U",10,"^V","modelY()","^16",["^10",[["~$x","~$y","~$z"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",2529,"^Z",2535,"^19",3,"^1:",true,"^[",["^10",["^11",["^10",[["~$x","~$y","~$z"]]]]],"^13","Returns the three-dimensional x, y, z position in model space. This\n  returns the y value for a given coordinate based on the current set\n  of transformations (scale, rotate, translate, etc.) The y value can\n  be used to place an object in space relative to the location of the\n  original point once the transformations are no longer in use."],"~$set-image",["^ ","^O","Image","^P",null,"^Q",["^ ","^O","Image","^R","1.0","^S","Pixels","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",12,"^V","set()","^W",3,"^X",true,"^Y",3738,"^Z",3738,"^[",["^10",["^11",["^10",[["~$x","~$y","~$src"]]]]],"^13","Writes an image directly into the display window. The x and y\n  parameters define the coordinates for the upper-left corner of the\n  image."],"^R","1.0","^B","~$quil.core/set-image","^15",false,"^S","Pixels","^T","resources/public/js/development/quil/core.cljc","^U",12,"^V","set()","^16",["^10",[["~$x","~$y","^28"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",3732,"^Z",3738,"^19",3,"^1:",true,"^[",["^10",["^11",["^10",[["~$x","~$y","^28"]]]]],"^13","Writes an image directly into the display window. The x and y\n  parameters define the coordinates for the upper-left corner of the\n  image."],"~$shape-mode",["^ ","^O","Shape","^P",null,"^Q",["^ ","^O","Shape","^R","1.0","^S","Loading & Displaying","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",13,"^V","shapeMode()","^W",3,"^X",true,"^Y",3841,"^Z",3841,"^[",["^10",["^11",["^10",[["^1G"]]]]],"^13","Modifies the location from which shapes draw. Available modes are\n  :corner, :corners and :center. Default is :corner.\n\n  :corner  - specifies the location to be the upper left corner of the\n             shape and uses the third and fourth parameters of shape\n             to specify the width and height.\n\n  :corners - uses the first and second parameters of shape to set\n             the location of one corner and uses the third and fourth\n             parameters to set the opposite corner.\n\n  :center  - draws the shape from its center point and uses the third\n             and forth parameters of shape to specify the width and\n             height. "],"^R","1.0","^B","~$quil.core/shape-mode","^15",false,"^S","Loading & Displaying","^T","resources/public/js/development/quil/core.cljc","^U",13,"^V","shapeMode()","^16",["^10",[["^1G"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",3836,"^Z",3841,"^19",1,"^1:",true,"^[",["^10",["^11",["^10",[["^1G"]]]]],"^13","Modifies the location from which shapes draw. Available modes are\n  :corner, :corners and :center. Default is :corner.\n\n  :corner  - specifies the location to be the upper left corner of the\n             shape and uses the third and fourth parameters of shape\n             to specify the width and height.\n\n  :corners - uses the first and second parameters of shape to set\n             the location of one corner and uses the third and fourth\n             parameters to set the opposite corner.\n\n  :center  - draws the shape from its center point and uses the third\n             and forth parameters of shape to specify the width and\n             height. "],"~$cursor-image",["^ ","^O","Environment","^P",null,"^Q",["^ ","^O","Environment","^R","1.0","^S",null,"^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",15,"^1D",["^ ","^15",false,"^19",3,"^16",["^10",[["~$img"],["^2=","~$hx","~$hy"]]],"^[",["^10",[["^2="],["^2=","^2>","^2?"]]],"^18",["^10",[null,null]]],"^V","cursor()","^W",3,"^X",true,"^Y",1307,"^Z",1307,"^[",["^10",["^11",["^10",[["^2="],["^2=","^2>","^2?"]]]]],"^13","Set the cursor to a predefined image. The horizontal and vertical\n  active spots of the cursor may be specified with hx and hy.\n  It is recommended to make the size 16x16 or 32x32 pixels."],"^R","1.0","^B","~$quil.core/cursor-image","^15",false,"^S",null,"^T","resources/public/js/development/quil/core.cljc","^U",15,"^1D",["^ ","^15",false,"^19",3,"^16",["^10",[["^2="],["^2=","^2>","^2?"]]],"^[",["^10",[["^2="],["^2=","^2>","^2?"]]],"^18",["^10",[null,null]]],"^V","cursor()","^16",["^10",[["^2="],["^2=","^2>","^2?"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",1301,"^Z",1307,"^19",3,"^1:",true,"^[",["^10",[["^2="],["^2=","^2>","^2?"]]],"^13","Set the cursor to a predefined image. The horizontal and vertical\n  active spots of the cursor may be specified with hx and hy.\n  It is recommended to make the size 16x16 or 32x32 pixels."],"~$create-graphics",["^ ","^O","Image","^P",null,"^Q",["^ ","^O","Image","^R","1.0","^S","Rendering","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",18,"^1D",["^ ","^15",false,"^19",4,"^16",["^10",[["~$w","~$h"],["~$w","~$h","~$renderer"],["~$w","~$h","^2B","~$path"]]],"^[",["^10",[["~$w","~$h"],["~$w","~$h","^2B"],["~$w","~$h","^2B","^2C"]]],"^18",["^10",[null,null,null]]],"^V","createGraphics()","^W",3,"^X",true,"^Y",1204,"^Z",1204,"^[",["^10",["^11",["^10",[["~$w","~$h"],["~$w","~$h","^2B"],["~$w","~$h","^2B","^2C"]]]]],"^13","Creates and returns a new PGraphics object of the types :p2d, :p3d,\n  :java2d, :pdf. By default :java2d is used. Use this class if you\n  need to draw into an off-screen graphics buffer. It's not possible\n  to use create-graphics with the :opengl renderer, because it doesn't\n  allow offscreen use. The :pdf renderer requires the filename parameter.\n\n  Note: don't use create-graphics in draw in clojurescript, it leaks memory.\n  You should create graphic in setup and reuse it in draw instead of creating\n  a new one.\n\n  It's important to call any drawing commands between (.beginDraw graphics) and\n  (.endDraw graphics) statements or use with-graphics macro. This is also true\n  for any commands that affect drawing, such as smooth or color-mode.\n\n  If you're using :pdf renderer - don't forget to call (.dispose graphics)\n  as last command inside with-graphics macro, otherwise graphics won't be\n  saved.\n\n  Unlike the main drawing surface which is completely opaque, surfaces\n  created with create-graphics can have transparency. This makes it\n  possible to draw into a graphics and maintain the alpha channel. By\n  using save to write a PNG or TGA file, the transparency of the\n  graphics object will be honored."],"^R","1.0","^B","~$quil.core/create-graphics","^15",false,"^S","Rendering","^T","resources/public/js/development/quil/core.cljc","^U",18,"^1D",["^ ","^15",false,"^19",4,"^16",["^10",[["~$w","~$h"],["~$w","~$h","^2B"],["~$w","~$h","^2B","^2C"]]],"^[",["^10",[["~$w","~$h"],["~$w","~$h","^2B"],["~$w","~$h","^2B","^2C"]]],"^18",["^10",[null,null,null]]],"^V","createGraphics()","^16",["^10",[["~$w","~$h"],["~$w","~$h","^2B"],["~$w","~$h","^2B","^2C"]]],"^17",null,"^18",["^10",[null,null,null]],"^W",1,"^X",true,"^Y",1198,"^Z",1204,"^19",4,"^1:",true,"^[",["^10",[["~$w","~$h"],["~$w","~$h","^2B"],["~$w","~$h","^2B","^2C"]]],"^13","Creates and returns a new PGraphics object of the types :p2d, :p3d,\n  :java2d, :pdf. By default :java2d is used. Use this class if you\n  need to draw into an off-screen graphics buffer. It's not possible\n  to use create-graphics with the :opengl renderer, because it doesn't\n  allow offscreen use. The :pdf renderer requires the filename parameter.\n\n  Note: don't use create-graphics in draw in clojurescript, it leaks memory.\n  You should create graphic in setup and reuse it in draw instead of creating\n  a new one.\n\n  It's important to call any drawing commands between (.beginDraw graphics) and\n  (.endDraw graphics) statements or use with-graphics macro. This is also true\n  for any commands that affect drawing, such as smooth or color-mode.\n\n  If you're using :pdf renderer - don't forget to call (.dispose graphics)\n  as last command inside with-graphics macro, otherwise graphics won't be\n  saved.\n\n  Unlike the main drawing surface which is completely opaque, surfaces\n  created with create-graphics can have transparency. This makes it\n  possible to draw into a graphics and maintain the alpha channel. By\n  using save to write a PNG or TGA file, the transparency of the\n  graphics object will be honored."],"~$update-pixels",["^ ","^O","Image","^P",null,"^Q",["^ ","^O","Image","^R","1.0","^S","Pixels","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",16,"^1D",["^ ","^15",false,"^19",1,"^16",["^10",[[],["^2="]]],"^[",["^10",[[],["^2="]]],"^18",["^10",[null,null]]],"^V","updatePixels()","^W",3,"^X",true,"^Y",4567,"^Z",4567,"^[",["^10",["^11",["^10",[[],["^2="]]]]],"^13","Updates the display window or image with the data in the pixels array.\n  Use in conjunction with (pixels). If you're only reading pixels from\n  the array, there's no need to call update-pixels unless there are\n  changes.\n\n  Certain renderers may or may not seem to require pixels or\n  update-pixels. However, the rule is that any time you want to\n  manipulate the pixels array, you must first call pixels, and\n  after changes have been made, call update-pixels. Even if the\n  renderer may not seem to use this function in the current Processing\n  release, this will always be subject to change."],"^R","1.0","^B","~$quil.core/update-pixels","^15",false,"^S","Pixels","^T","resources/public/js/development/quil/core.cljc","^U",16,"^1D",["^ ","^15",false,"^19",1,"^16",["^10",[[],["^2="]]],"^[",["^10",[[],["^2="]]],"^18",["^10",[null,null]]],"^V","updatePixels()","^16",["^10",[[],["^2="]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",4561,"^Z",4567,"^19",1,"^1:",true,"^[",["^10",[[],["^2="]]],"^13","Updates the display window or image with the data in the pixels array.\n  Use in conjunction with (pixels). If you're only reading pixels from\n  the array, there's no need to call update-pixels unless there are\n  changes.\n\n  Certain renderers may or may not seem to require pixels or\n  update-pixels. However, the rule is that any time you want to\n  manipulate the pixels array, you must first call pixels, and\n  after changes have been made, call update-pixels. Even if the\n  renderer may not seem to use this function in the current Processing\n  release, this will always be subject to change."],"~$text-size",["^ ","^O","Typography","^P",null,"^Q",["^ ","^O","Typography","^R","1.0","^S","Attributes","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",12,"^V","textSize()","^W",3,"^X",true,"^Y",4352,"^Z",4352,"^[",["^10",["^11",["^10",[["~$size"]]]]],"^13","Sets the current font size. This size will be used in all\n  subsequent calls to the text fn. Font size is measured in\n  units of pixels."],"^R","1.0","^B","~$quil.core/text-size","^15",false,"^S","Attributes","^T","resources/public/js/development/quil/core.cljc","^U",12,"^V","textSize()","^16",["^10",[["^2H"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",4346,"^Z",4352,"^19",1,"^1:",true,"^[",["^10",["^11",["^10",[["^2H"]]]]],"^13","Sets the current font size. This size will be used in all\n  subsequent calls to the text fn. Font size is measured in\n  units of pixels."],"~$pixels",["^ ","^O","Image","^P",null,"^Q",["^ ","^O","Image","^R","1.0","^S","Pixels","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",9,"^1D",["^ ","^15",false,"^19",1,"^16",["^10",[[],["^2="]]],"^[",["^10",[[],["^2="]]],"^18",["^10",[null,null]]],"^V","pixels[]","^W",3,"^X",true,"^Y",2918,"^Z",2918,"^[",["^10",["^11",["^10",[[],["^2="]]]]],"^13","Array containing the values for all the pixels in the display\n  window or image. This array is therefore the size of the display window. If\n  this array is modified, the update-pixels fn must be called to update\n  the changes. Calls .loadPixels before obtaining the pixel array."],"^R","1.0","^B","~$quil.core/pixels","^15",false,"^S","Pixels","^T","resources/public/js/development/quil/core.cljc","^U",9,"^1D",["^ ","^15",false,"^19",1,"^16",["^10",[[],["^2="]]],"^[",["^10",[[],["^2="]]],"^18",["^10",[null,null]]],"^V","pixels[]","^16",["^10",[[],["^2="]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",2912,"^Z",2918,"^19",1,"^1:",true,"^[",["^10",[[],["^2="]]],"^13","Array containing the values for all the pixels in the display\n  window or image. This array is therefore the size of the display window. If\n  this array is modified, the update-pixels fn must be called to update\n  the changes. Calls .loadPixels before obtaining the pixel array."],"~$stroke-float",["^ ","^O","Color","^P",null,"^Q",["^ ","^O","Color","^R","1.0","^S","Setting","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",15,"^1D",["^ ","^15",false,"^19",4,"^16",["^10",[["~$gray"],["^2M","~$alpha"],["~$x","~$y","~$z"],["~$x","~$y","~$z","~$a"]]],"^[",["^10",[["^2M"],["^2M","^2N"],["~$x","~$y","~$z"],["~$x","~$y","~$z","~$a"]]],"^18",["^10",[null,null,null,null]]],"^V","stroke()","^W",3,"^X",true,"^Y",4032,"^Z",4032,"^[",["^10",["^11",["^10",[["^2M"],["^2M","^2N"],["~$x","~$y","~$z"],["~$x","~$y","~$z","~$a"]]]]],"^13","Sets the color used to draw lines and borders around\n  shapes. Converts all args to floats"],"^R","1.0","^B","~$quil.core/stroke-float","^15",false,"^S","Setting","^T","resources/public/js/development/quil/core.cljc","^U",15,"^1D",["^ ","^15",false,"^19",4,"^16",["^10",[["^2M"],["^2M","^2N"],["~$x","~$y","~$z"],["~$x","~$y","~$z","~$a"]]],"^[",["^10",[["^2M"],["^2M","^2N"],["~$x","~$y","~$z"],["~$x","~$y","~$z","~$a"]]],"^18",["^10",[null,null,null,null]]],"^V","stroke()","^16",["^10",[["^2M"],["^2M","^2N"],["~$x","~$y","~$z"],["~$x","~$y","~$z","~$a"]]],"^17",null,"^18",["^10",[null,null,null,null]],"^W",1,"^X",true,"^Y",4026,"^Z",4032,"^19",4,"^1:",true,"^[",["^10",[["^2M"],["^2M","^2N"],["~$x","~$y","~$z"],["~$x","~$y","~$z","~$a"]]],"^13","Sets the color used to draw lines and borders around\n  shapes. Converts all args to floats"],"~$constrain",["^ ","^O","Math","^P",null,"^Q",["^ ","^O","Math","^R","1.0","^S","Calculation","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",12,"^V","constrain()","^W",3,"^X",false,"^Y",1097,"^Z",1097,"^[",["^10",["^11",["^10",[["~$amt","~$low","~$high"]]]]],"^13","Constrains a value to not exceed a maximum and minimum value."],"^R","1.0","^B","~$quil.core/constrain","^15",false,"^S","Calculation","^T","resources/public/js/development/quil/core.cljc","^U",12,"^V","constrain()","^16",["^10",[["^2Q","^2R","^2S"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",false,"^Y",1091,"^Z",1097,"^19",3,"^1:",true,"^[",["^10",["^11",["^10",[["^2Q","^2R","^2S"]]]]],"^13","Constrains a value to not exceed a maximum and minimum value."],"~$screen-y",["^ ","^O","Lights, Camera","^P",null,"^Q",["^ ","^O","Lights, Camera","^R","1.0","^S","Coordinates","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",11,"^1D",["^ ","^15",false,"^19",3,"^16",["^10",[["~$x","~$y"],["~$x","~$y","~$z"]]],"^[",["^10",[["~$x","~$y"],["~$x","~$y","~$z"]]],"^18",["^10",[null,null]]],"^V","screenY()","^W",3,"^X",true,"^Y",3671,"^Z",3671,"^[",["^10",["^11",["^10",[["~$x","~$y"],["~$x","~$y","~$z"]]]]],"^13","Takes a three-dimensional x, y, z position and returns the y value\n  for where it will appear on a (two-dimensional) screen, once\n  affected by translate, scale or any other transformations"],"^R","1.0","^B","~$quil.core/screen-y","^15",false,"^S","Coordinates","^T","resources/public/js/development/quil/core.cljc","^U",11,"^1D",["^ ","^15",false,"^19",3,"^16",["^10",[["~$x","~$y"],["~$x","~$y","~$z"]]],"^[",["^10",[["~$x","~$y"],["~$x","~$y","~$z"]]],"^18",["^10",[null,null]]],"^V","screenY()","^16",["^10",[["~$x","~$y"],["~$x","~$y","~$z"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",3665,"^Z",3671,"^19",3,"^1:",true,"^[",["^10",[["~$x","~$y"],["~$x","~$y","~$z"]]],"^13","Takes a three-dimensional x, y, z position and returns the y value\n  for where it will appear on a (two-dimensional) screen, once\n  affected by translate, scale or any other transformations"],"~$fill-float",["^ ","^O","Color","^P",null,"^Q",["^ ","^O","Color","^R","1.0","^S","Setting","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",13,"^1D",["^ ","^15",false,"^19",4,"^16",["^10",[["^2M"],["^2M","^2N"],["~$r","~$g","~$b"],["~$r","~$g","~$b","^2N"]]],"^[",["^10",[["^2M"],["^2M","^2N"],["~$r","~$g","~$b"],["~$r","~$g","~$b","^2N"]]],"^18",["^10",[null,null,null,null]]],"^V","fill()","^W",3,"^X",true,"^Y",1702,"^Z",1702,"^[",["^10",["^11",["^10",[["^2M"],["^2M","^2N"],["~$r","~$g","~$b"],["~$r","~$g","~$b","^2N"]]]]],"^13","Sets the color used to fill shapes. For example, (fill 204 102 0),\n  will specify that all subsequent shapes will be filled with orange."],"^R","1.0","^B","~$quil.core/fill-float","^15",false,"^S","Setting","^T","resources/public/js/development/quil/core.cljc","^U",13,"^1D",["^ ","^15",false,"^19",4,"^16",["^10",[["^2M"],["^2M","^2N"],["~$r","~$g","~$b"],["~$r","~$g","~$b","^2N"]]],"^[",["^10",[["^2M"],["^2M","^2N"],["~$r","~$g","~$b"],["~$r","~$g","~$b","^2N"]]],"^18",["^10",[null,null,null,null]]],"^V","fill()","^16",["^10",[["^2M"],["^2M","^2N"],["~$r","~$g","~$b"],["~$r","~$g","~$b","^2N"]]],"^17",null,"^18",["^10",[null,null,null,null]],"^W",1,"^X",true,"^Y",1696,"^Z",1702,"^19",4,"^1:",true,"^[",["^10",[["^2M"],["^2M","^2N"],["~$r","~$g","~$b"],["~$r","~$g","~$b","^2N"]]],"^13","Sets the color used to fill shapes. For example, (fill 204 102 0),\n  will specify that all subsequent shapes will be filled with orange."],"~$rect",["^ ","^O","Shape","^P",null,"^Q",["^ ","^O","Shape","^R","1.0","^S","2D Primitives","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",7,"^1D",["^ ","^15",false,"^19",8,"^16",["^10",[["~$x","~$y","^1O","^1P"],["~$x","~$y","^1O","^1P","~$r"],["~$x","~$y","^1O","^1P","~$top-left-r","~$top-right-r","~$bottom-right-r","~$bottom-left-r"]]],"^[",["^10",[["~$x","~$y","^1O","^1P"],["~$x","~$y","^1O","^1P","~$r"],["~$x","~$y","^1O","^1P","^2Z","^2[","^30","^31"]]],"^18",["^10",[null,null,null]]],"^V","rect()","^W",3,"^X",true,"^Y",3278,"^Z",3278,"^[",["^10",["^11",["^10",[["~$x","~$y","^1O","^1P"],["~$x","~$y","^1O","^1P","~$r"],["~$x","~$y","^1O","^1P","^2Z","^2[","^30","^31"]]]]],"^13","Draws a rectangle to the screen. A rectangle is a four-sided shape\n  with every angle at ninety degrees. By default, the first two\n  parameters set the location of the upper-left corner, the third\n  sets the width, and the fourth sets the height. These parameters\n  may be changed with rect-mode.\n\n  To draw a rounded rectangle, add a fifth parameter, which is used as\n  the radius value for all four corners. To use a different radius value\n  for each corner, include eight parameters."],"^R","1.0","^B","~$quil.core/rect","^15",false,"^S","2D Primitives","^T","resources/public/js/development/quil/core.cljc","^U",7,"^1D",["^ ","^15",false,"^19",8,"^16",["^10",[["~$x","~$y","^1O","^1P"],["~$x","~$y","^1O","^1P","~$r"],["~$x","~$y","^1O","^1P","^2Z","^2[","^30","^31"]]],"^[",["^10",[["~$x","~$y","^1O","^1P"],["~$x","~$y","^1O","^1P","~$r"],["~$x","~$y","^1O","^1P","^2Z","^2[","^30","^31"]]],"^18",["^10",[null,null,null]]],"^V","rect()","^16",["^10",[["~$x","~$y","^1O","^1P"],["~$x","~$y","^1O","^1P","~$r"],["~$x","~$y","^1O","^1P","^2Z","^2[","^30","^31"]]],"^17",null,"^18",["^10",[null,null,null]],"^W",1,"^X",true,"^Y",3272,"^Z",3278,"^19",8,"^1:",true,"^[",["^10",[["~$x","~$y","^1O","^1P"],["~$x","~$y","^1O","^1P","~$r"],["~$x","~$y","^1O","^1P","^2Z","^2[","^30","^31"]]],"^13","Draws a rectangle to the screen. A rectangle is a four-sided shape\n  with every angle at ninety degrees. By default, the first two\n  parameters set the location of the upper-left corner, the third\n  sets the width, and the fourth sets the height. These parameters\n  may be changed with rect-mode.\n\n  To draw a rounded rectangle, add a fifth parameter, which is used as\n  the radius value for all four corners. To use a different radius value\n  for each corner, include eight parameters."],"~$log",["^ ","^O","Math","^P",null,"^Q",["^ ","^O","Math","^R","1.0","^S","Calculation","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",6,"^V","log()","^W",3,"^X",false,"^Y",2425,"^Z",2425,"^[",["^10",["^11",["^10",[["~$val"]]]]],"^13","Calculates the natural logarithm (the base-e logarithm) of a\n  number. This function expects the values greater than 0.0."],"^R","1.0","^B","~$quil.core/log","^15",false,"^S","Calculation","^T","resources/public/js/development/quil/core.cljc","^U",6,"^V","log()","^16",["^10",[["^34"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",false,"^Y",2419,"^Z",2425,"^19",1,"^1:",true,"^[",["^10",["^11",["^10",[["^34"]]]]],"^13","Calculates the natural logarithm (the base-e logarithm) of a\n  number. This function expects the values greater than 0.0."],"~$with-stroke",["^ ","^O","Color","^P",null,"^Q",["^ ","^O","Color","^R","1.7","^S","Utility Macros","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",14,"^1D",["^ ","^15",true,"^19",3,"^16",[["^10",["^1[","^20","~$stroke-args","^22"]]],"^[",["^10",[["^1[","^20","^37","~$&","^22"]]],"^18",["^10",[null]]],"^V",null,"^W",3,"^X",true,"^Y",4667,"^23",true,"^Z",4667,"^[",["^10",["^11",["^10",[["^37","~$&","^22"]]]]],"^13","Temporarily set the stroke color for the body of this macro.\n   The code outside of with-stroke form will have the previous stroke color set.\n\n   The stroke color has to be in a vector!\n   Example: (with-stroke [255] ...)\n            (with-stroke [10 80 98] ...)"],"^R","1.7","^B","~$quil.core/with-stroke","^15",true,"^S","Utility Macros","^T","resources/public/js/development/quil/core.cljc","^U",14,"^1D",["^ ","^15",true,"^19",3,"^16",[["^10",["^1[","^20","^37","^22"]]],"^[",["^10",[["^1[","^20","^37","~$&","^22"]]],"^18",["^10",[null]]],"^V",null,"^16",[["^10",["^1[","^20","^37","^22"]]],"^17",null,"^18",["^10",[null]],"^W",1,"^X",true,"^Y",4661,"^23",true,"^Z",4667,"^19",3,"^1:",false,"^[",["^10",[["^1[","^20","^37","~$&","^22"]]],"^13","Temporarily set the stroke color for the body of this macro.\n   The code outside of with-stroke form will have the previous stroke color set.\n\n   The stroke color has to be in a vector!\n   Example: (with-stroke [255] ...)\n            (with-stroke [10 80 98] ...)"],"~$ambient-float",["^ ","^O","Lights, Camera","^P",null,"^Q",["^ ","^O","Lights, Camera","^R","1.0","^S","Material Properties","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",16,"^1D",["^ ","^15",false,"^19",3,"^16",["^10",[["^2M"],["~$x","~$y","~$z"]]],"^[",["^10",[["^2M"],["~$x","~$y","~$z"]]],"^18",["^10",[null,null]]],"^V","ambient()","^W",3,"^X",true,"^Y",325,"^Z",325,"^[",["^10",["^11",["^10",[["^2M"],["~$x","~$y","~$z"]]]]],"^13","Sets the ambient reflectance for shapes drawn to the screen. This\n  is combined with the ambient light component of environment. The\n  color components set through the parameters define the\n  reflectance. For example in the default color mode, setting x=255,\n  y=126, z=0, would cause all the red light to reflect and half of the\n  green light to reflect. Used in combination with emissive, specular,\n  and shininess in setting the material properties of shapes."],"^R","1.0","^B","~$quil.core/ambient-float","^15",false,"^S","Material Properties","^T","resources/public/js/development/quil/core.cljc","^U",16,"^1D",["^ ","^15",false,"^19",3,"^16",["^10",[["^2M"],["~$x","~$y","~$z"]]],"^[",["^10",[["^2M"],["~$x","~$y","~$z"]]],"^18",["^10",[null,null]]],"^V","ambient()","^16",["^10",[["^2M"],["~$x","~$y","~$z"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",319,"^Z",325,"^19",3,"^1:",true,"^[",["^10",[["^2M"],["~$x","~$y","~$z"]]],"^13","Sets the ambient reflectance for shapes drawn to the screen. This\n  is combined with the ambient light component of environment. The\n  color components set through the parameters define the\n  reflectance. For example in the default color mode, setting x=255,\n  y=126, z=0, would cause all the red light to reflect and half of the\n  green light to reflect. Used in combination with emissive, specular,\n  and shininess in setting the material properties of shapes."],"~$end-raw",["^ ","^O","Output","^P",null,"^Q",["^ ","^O","Output","^R","1.0","^S","Files","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",10,"^V","endRaw()","^W",3,"^X",true,"^Y",1636,"^Z",1636,"^[",["^10",["^11",["^10",[[]]]]],"^13","Complement to begin-raw; they must always be used together. See\n  the begin-raw docstring for details."],"^R","1.0","^B","~$quil.core/end-raw","^15",false,"^S","Files","^T","resources/public/js/development/quil/core.cljc","^U",10,"^V","endRaw()","^16",["^10",[[]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",1630,"^Z",1636,"^19",0,"^1:",true,"^[",["^10",["^11",["^10",[[]]]]],"^13","Complement to begin-raw; they must always be used together. See\n  the begin-raw docstring for details."],"~$radians",["^ ","^O","Math","^P",null,"^Q",["^ ","^O","Math","^R","1.0","^S","Trigonometry","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",10,"^V","radians()","^W",3,"^X",false,"^Y",3160,"^Z",3160,"^[",["^10",["^11",["^10",[["~$degrees"]]]]],"^13","Converts a degree measurement to its corresponding value in\n  radians. Radians and degrees are two ways of measuring the same\n  thing. There are 360 degrees in a circle and 2*PI radians in a\n  circle. For example, 90° = PI/2 = 1.5707964. All trigonometric\n  methods in Processing require their parameters to be specified in\n  radians."],"^R","1.0","^B","~$quil.core/radians","^15",false,"^S","Trigonometry","^T","resources/public/js/development/quil/core.cljc","^U",10,"^V","radians()","^16",["^10",[["^3>"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",false,"^Y",3154,"^Z",3160,"^19",1,"^1:",true,"^[",["^10",["^11",["^10",[["^3>"]]]]],"^13","Converts a degree measurement to its corresponding value in\n  radians. Radians and degrees are two ways of measuring the same\n  thing. There are 360 degrees in a circle and 2*PI radians in a\n  circle. For example, 90° = PI/2 = 1.5707964. All trigonometric\n  methods in Processing require their parameters to be specified in\n  radians."],"^3>",["^ ","^O","Math","^P",null,"^Q",["^ ","^O","Math","^R","1.0","^S","Trigonometry","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",10,"^V","degrees()","^W",3,"^X",false,"^Y",1438,"^Z",1438,"^[",["^10",["^11",["^10",[["^3="]]]]],"^13","Converts a radian measurement to its corresponding value in\n  degrees. Radians and degrees are two ways of measuring the same\n  thing. There are 360 degrees in a circle and (* 2 Math/PI) radians\n  in a circle. For example, (= 90° (/ Math/PI 2) 1.5707964). All\n  trigonometric methods in Processing require their parameters to be\n  specified in radians."],"^R","1.0","^B","~$quil.core/degrees","^15",false,"^S","Trigonometry","^T","resources/public/js/development/quil/core.cljc","^U",10,"^V","degrees()","^16",["^10",[["^3="]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",false,"^Y",1432,"^Z",1438,"^19",1,"^1:",true,"^[",["^10",["^11",["^10",[["^3="]]]]],"^13","Converts a radian measurement to its corresponding value in\n  degrees. Radians and degrees are two ways of measuring the same\n  thing. There are 360 degrees in a circle and (* 2 Math/PI) radians\n  in a circle. For example, (= 90° (/ Math/PI 2) 1.5707964). All\n  trigonometric methods in Processing require their parameters to be\n  specified in radians."],"~$acos",["^ ","^O","Math","^P",null,"^Q",["^ ","^O","Math","^R","1.0","^S","Trigonometry","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",7,"^V","acos()","^W",3,"^X",false,"^Y",300,"^Z",300,"^[",["^10",["^11",["^10",[["~$n"]]]]],"^13","The inverse of cos, returns the arc cosine of a value. This\n  function expects the values in the range of -1 to 1 and values are\n  returned in the range 0 to Math/PI (3.1415927)."],"^R","1.0","^B","~$quil.core/acos","^15",false,"^S","Trigonometry","^T","resources/public/js/development/quil/core.cljc","^U",7,"^V","acos()","^16",["^10",[["~$n"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",false,"^Y",294,"^Z",300,"^19",1,"^1:",true,"^[",["^10",["^11",["^10",[["~$n"]]]]],"^13","The inverse of cos, returns the arc cosine of a value. This\n  function expects the values in the range of -1 to 1 and values are\n  returned in the range 0 to Math/PI (3.1415927)."],"~$bezier-detail",["^ ","^O","Shape","^P",null,"^Q",["^ ","^O","Shape","^R","1.0","^S","Curves","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",16,"^V","bezierDetail()","^W",3,"^X",true,"^Y",693,"^Z",693,"^[",["^10",["^11",["^10",[["~$detail"]]]]],"^13","Sets the resolution at which Beziers display. The default value is\n  20. This function is only useful when using the :p3d or :opengl\n  renderer as the default (:java2d) renderer does not use this\n  information."],"^R","1.0","^B","~$quil.core/bezier-detail","^15",false,"^S","Curves","^T","resources/public/js/development/quil/core.cljc","^U",16,"^V","bezierDetail()","^16",["^10",[["^3D"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",687,"^Z",693,"^19",1,"^1:",true,"^[",["^10",["^11",["^10",[["^3D"]]]]],"^13","Sets the resolution at which Beziers display. The default value is\n  20. This function is only useful when using the :p3d or :opengl\n  renderer as the default (:java2d) renderer does not use this\n  information."],"~$texture",["^ ","^O","Shape","^P",null,"^Q",["^ ","^O","Shape","^R","1.0","^S","Vertex","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",10,"^V","texture()","^W",3,"^X",true,"^Y",4365,"^Z",4365,"^[",["^10",["^11",["^10",[["^2="]]]]],"^13","Sets a texture to be applied to vertex points. The texture fn must\n  be called between begin-shape and end-shape and before any calls to\n  vertex.\n\n  When textures are in use, the fill color is ignored. Instead, use\n  tint to specify the color of the texture as it is applied to the\n  shape."],"^R","1.0","^B","~$quil.core/texture","^15",false,"^S","Vertex","^T","resources/public/js/development/quil/core.cljc","^U",10,"^V","texture()","^16",["^10",[["^2="]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",4359,"^Z",4365,"^19",1,"^1:",true,"^[",["^10",["^11",["^10",[["^2="]]]]],"^13","Sets a texture to be applied to vertex points. The texture fn must\n  be called between begin-shape and end-shape and before any calls to\n  vertex.\n\n  When textures are in use, the fill color is ignored. Instead, use\n  tint to specify the color of the texture as it is applied to the\n  shape."],"~$stroke-int",["^ ","^O","Color","^P",null,"^Q",["^ ","^O","Color","^R","1.0","^S","Setting","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",13,"^1D",["^ ","^15",false,"^19",2,"^16",["^10",[["~$rgb"],["^3I","^2N"]]],"^[",["^10",[["^3I"],["^3I","^2N"]]],"^18",["^10",[null,null]]],"^V","stroke()","^W",3,"^X",true,"^Y",4046,"^Z",4046,"^[",["^10",["^11",["^10",[["^3I"],["^3I","^2N"]]]]],"^13","Sets the color used to draw lines and borders around\n  shapes. Converts rgb to int and alpha to a float."],"^R","1.0","^B","~$quil.core/stroke-int","^15",false,"^S","Setting","^T","resources/public/js/development/quil/core.cljc","^U",13,"^1D",["^ ","^15",false,"^19",2,"^16",["^10",[["^3I"],["^3I","^2N"]]],"^[",["^10",[["^3I"],["^3I","^2N"]]],"^18",["^10",[null,null]]],"^V","stroke()","^16",["^10",[["^3I"],["^3I","^2N"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",4040,"^Z",4046,"^19",2,"^1:",true,"^[",["^10",[["^3I"],["^3I","^2N"]]],"^13","Sets the color used to draw lines and borders around\n  shapes. Converts rgb to int and alpha to a float."],"~$print-camera",["^ ","^O","Lights, Camera","^P",null,"^Q",["^ ","^O","Lights, Camera","^R","1.0","^S","Camera","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",15,"^V","printCamera()","^W",3,"^X",true,"^Y",3046,"^Z",3046,"^[",["^10",["^11",["^10",[[]]]]],"^13","Prints the current camera matrix to std out. Useful for debugging."],"^R","1.0","^B","~$quil.core/print-camera","^15",false,"^S","Camera","^T","resources/public/js/development/quil/core.cljc","^U",15,"^V","printCamera()","^16",["^10",[[]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",3040,"^Z",3046,"^19",0,"^1:",true,"^[",["^10",["^11",["^10",[[]]]]],"^13","Prints the current camera matrix to std out. Useful for debugging."],"~$floor",["^ ","^O","Math","^P",null,"^Q",["^ ","^O","Math","^R","2.0","^S","Calculation","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",8,"^V","floor()","^W",3,"^X",false,"^Y",1827,"^Z",1827,"^[",["^10",["^11",["^10",[["~$n"]]]]],"^13","Calculates the closest int value that is less than or equal to the\n  value of the parameter. For example, (floor 9.03) returns the value 9."],"^R","2.0","^B","~$quil.core/floor","^15",false,"^S","Calculation","^T","resources/public/js/development/quil/core.cljc","^U",8,"^V","floor()","^16",["^10",[["~$n"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",false,"^Y",1821,"^Z",1827,"^19",1,"^1:",true,"^[",["^10",["^11",["^10",[["~$n"]]]]],"^13","Calculates the closest int value that is less than or equal to the\n  value of the parameter. For example, (floor 9.03) returns the value 9."],"~$atan2",["^ ","^O","Math","^P",null,"^Q",["^ ","^O","Math","^R","1.0","^S","Trigonometry","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",8,"^V","atan2()","^W",3,"^X",false,"^Y",474,"^Z",474,"^[",["^10",["^11",["^10",[["~$y","~$x"]]]]],"^13","Calculates the angle (in radians) from a specified point to the\n  coordinate origin as measured from the positive x-axis. Values are\n  returned as a float in the range from PI to -PI. The atan2 function\n  is most often used for orienting geometry to the position of the\n  cursor. Note: The y-coordinate of the point is the first parameter\n  and the x-coordinate is the second due to the structure of\n  calculating the tangent."],"^R","1.0","^B","~$quil.core/atan2","^15",false,"^S","Trigonometry","^T","resources/public/js/development/quil/core.cljc","^U",8,"^V","atan2()","^16",["^10",[["~$y","~$x"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",false,"^Y",468,"^Z",474,"^19",2,"^1:",true,"^[",["^10",["^11",["^10",[["~$y","~$x"]]]]],"^13","Calculates the angle (in radians) from a specified point to the\n  coordinate origin as measured from the positive x-axis. Values are\n  returned as a float in the range from PI to -PI. The atan2 function\n  is most often used for orienting geometry to the position of the\n  cursor. Note: The y-coordinate of the point is the first parameter\n  and the x-coordinate is the second due to the structure of\n  calculating the tangent."],"~$millis",["^ ","^O","Input","^P",null,"^Q",["^ ","^O","Input","^R","1.0","^S","Time & Date","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",9,"^V","millis()","^W",3,"^X",true,"^Y",2495,"^Z",2495,"^[",["^10",["^11",["^10",[[]]]]],"^13","Returns the number of milliseconds (thousandths of a second) since\n  starting the sketch. This information is often used for timing\n  animation sequences."],"^R","1.0","^B","~$quil.core/millis","^15",false,"^S","Time & Date","^T","resources/public/js/development/quil/core.cljc","^U",9,"^V","millis()","^16",["^10",[[]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",2489,"^Z",2495,"^19",0,"^1:",true,"^[",["^10",["^11",["^10",[[]]]]],"^13","Returns the number of milliseconds (thousandths of a second) since\n  starting the sketch. This information is often used for timing\n  animation sequences."],"~$lerp-color",["^ ","^O","Color","^P",null,"^Q",["^ ","^O","Color","^R","1.0","^S","Creating & Reading","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",13,"^V","lerpColor()","^W",3,"^X",true,"^Y",2250,"^Z",2250,"^[",["^10",["^11",["^10",[["~$c1","~$c2","^2Q"]]]]],"^13","Calculates a color or colors between two color at a specific\n  increment. The amt parameter is the amount to interpolate between\n  the two values where 0.0 equal to the first point, 0.1 is very near\n  the first point, 0.5 is half-way in between, etc."],"^R","1.0","^B","~$quil.core/lerp-color","^15",false,"^S","Creating & Reading","^T","resources/public/js/development/quil/core.cljc","^U",13,"^V","lerpColor()","^16",["^10",[["^3T","^3U","^2Q"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",2244,"^Z",2250,"^19",3,"^1:",true,"^[",["^10",["^11",["^10",[["^3T","^3U","^2Q"]]]]],"^13","Calculates a color or colors between two color at a specific\n  increment. The amt parameter is the amount to interpolate between\n  the two values where 0.0 equal to the first point, 0.1 is very near\n  the first point, 0.5 is half-way in between, etc."],"~$image-modes",["^ ","^B","~$quil.core/image-modes","^T","resources/public/js/development/quil/core.cljc","^Y",45,"^W",1,"^Z",63,"^U",13,"^Q",["^ ","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^Y",63,"^W",2,"^Z",63,"^U",13],"^1=","^1>"],"~$no-fill-prop",["^ ","^B","~$quil.core/no-fill-prop","^T","resources/public/js/development/quil/core.cljc","^Y",24,"^W",1,"^Z",24,"^U",35,"~:private",true,"^Q",["^ ","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^Y",24,"^W",23,"^Z",24,"^U",35,"^3[",true],"^1=","~$string"],"~$color-mode",["^ ","^O","Color","^P",null,"^Q",["^ ","^O","Color","^R","1.0","^S","Creating & Reading","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",13,"^1D",["^ ","^15",false,"^19",5,"^16",["^10",[["^1G"],["^1G","~$max"],["^1G","~$max-x","~$max-y","~$max-z"],["^1G","^43","^44","^45","~$max-a"]]],"^[",["^10",[["^1G"],["^1G","^42"],["^1G","^43","^44","^45"],["^1G","^43","^44","^45","^46"]]],"^18",["^10",[null,null,null,null]]],"^V","colorMode()","^W",3,"^X",true,"^Y",1042,"^Z",1042,"^[",["^10",["^11",["^10",[["^1G"],["^1G","^42"],["^1G","^43","^44","^45"],["^1G","^43","^44","^45","^46"]]]]],"^13","Changes the way Processing interprets color data. Available modes\n  are :rgb and :hsb.By default, the parameters for fill, stroke,\n  background, and color are defined by values between 0 and 255 using\n  the :rgb color model. The color-mode fn is used to change the\n  numerical range used for specifying colors and to switch color\n  systems. For example, calling\n  (color-mode :rgb 1.0) will specify that values are specified between\n  0 and 1. The limits for defining colors are altered by setting the\n  parameters range1, range2, range3, and range 4."],"^R","1.0","^B","~$quil.core/color-mode","^15",false,"^S","Creating & Reading","^T","resources/public/js/development/quil/core.cljc","^U",13,"^1D",["^ ","^15",false,"^19",5,"^16",["^10",[["^1G"],["^1G","^42"],["^1G","^43","^44","^45"],["^1G","^43","^44","^45","^46"]]],"^[",["^10",[["^1G"],["^1G","^42"],["^1G","^43","^44","^45"],["^1G","^43","^44","^45","^46"]]],"^18",["^10",[null,null,null,null]]],"^V","colorMode()","^16",["^10",[["^1G"],["^1G","^42"],["^1G","^43","^44","^45"],["^1G","^43","^44","^45","^46"]]],"^17",null,"^18",["^10",[null,null,null,null]],"^W",1,"^X",true,"^Y",1036,"^Z",1042,"^19",5,"^1:",true,"^[",["^10",[["^1G"],["^1G","^42"],["^1G","^43","^44","^45"],["^1G","^43","^44","^45","^46"]]],"^13","Changes the way Processing interprets color data. Available modes\n  are :rgb and :hsb.By default, the parameters for fill, stroke,\n  background, and color are defined by values between 0 and 255 using\n  the :rgb color model. The color-mode fn is used to change the\n  numerical range used for specifying colors and to switch color\n  systems. For example, calling\n  (color-mode :rgb 1.0) will specify that values are specified between\n  0 and 1. The limits for defining colors are altered by setting the\n  parameters range1, range2, range3, and range 4."],"~$create-image",["^ ","^O","Image","^P",null,"^Q",["^ ","^O","Image","^R","1.0","^S",null,"^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",15,"^V","createImage()","^W",3,"^X",true,"^Y",1243,"^Z",1243,"^[",["^10",["^11",["^10",[["~$w","~$h","~$format"]]]]],"^13","Creates a new PImage (the datatype for storing images). This\n  provides a fresh buffer of pixels to play with. Set the size of the\n  buffer with the width and height parameters. The format parameter\n  defines how the pixels are stored. See the PImage reference for more\n  information.\n\n  Possible formats: :rgb, :argb, :alpha (grayscale alpha channel)\n\n  Prefer using create-image over initialising new PImage instances\n  directly."],"^R","1.0","^B","~$quil.core/create-image","^15",false,"^S",null,"^T","resources/public/js/development/quil/core.cljc","^U",15,"^V","createImage()","^16",["^10",[["~$w","~$h","^49"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",1237,"^Z",1243,"^19",3,"^1:",true,"^[",["^10",["^11",["^10",[["~$w","~$h","^49"]]]]],"^13","Creates a new PImage (the datatype for storing images). This\n  provides a fresh buffer of pixels to play with. Set the size of the\n  buffer with the width and height parameters. The format parameter\n  defines how the pixels are stored. See the PImage reference for more\n  information.\n\n  Possible formats: :rgb, :argb, :alpha (grayscale alpha channel)\n\n  Prefer using create-image over initialising new PImage instances\n  directly."],"~$sq",["^ ","^O","Math","^P",null,"^Q",["^ ","^O","Math","^R","1.0","^S","Calculation","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",5,"^V","sq()","^W",3,"^X",false,"^Y",3991,"^Z",3991,"^[",["^10",["^11",["^10",[["~$a"]]]]],"^13","Squares a number (multiplies a number by itself). The result is\n  always a positive number, as multiplying two negative numbers always\n  yields a positive result. For example, -1 * -1 = 1."],"^R","1.0","^B","~$quil.core/sq","^15",false,"^S","Calculation","^T","resources/public/js/development/quil/core.cljc","^U",5,"^V","sq()","^16",["^10",[["~$a"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",false,"^Y",3985,"^Z",3991,"^19",1,"^1:",true,"^[",["^10",["^11",["^10",[["~$a"]]]]],"^13","Squares a number (multiplies a number by itself). The result is\n  always a positive number, as multiplying two negative numbers always\n  yields a positive result. For example, -1 * -1 = 1."],"^1P",["^ ","^O","Environment","^P",null,"^Q",["^ ","^O","Environment","^R","1.0","^S",null,"^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",9,"^V","getHeight()","^W",3,"~:processing-link",null,"^X",true,"^Y",1967,"^Z",1967,"^[",["^10",["^11",["^10",[[]]]]],"^13","Height of the display window. The value of height is zero until\n  size is called."],"^R","1.0","^B","~$quil.core/height","^15",false,"^S",null,"^T","resources/public/js/development/quil/core.cljc","^U",9,"^V","getHeight()","^16",["^10",[[]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^4=",null,"^X",true,"^Y",1960,"^Z",1967,"^19",0,"^1:",true,"^[",["^10",["^11",["^10",[[]]]]],"^13","Height of the display window. The value of height is zero until\n  size is called."],"~$no-loop",["^ ","^O","Structure","^P",null,"^Q",["^ ","^O","Structure","^R","1.0","^S",null,"^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",10,"^V","noLoop()","^W",3,"^X",true,"^Y",2769,"^Z",2769,"^[",["^10",["^11",["^10",[[]]]]],"^13","Stops Processing from continuously executing the code within\n  draw. If start-loop is called, the code in draw will begin to run\n  continuously again. If using no-loop in setup, it should be the last\n  line inside the block.\n\n  When no-loop is used, it's not possible to manipulate or access the\n  screen inside event handling functions such as mouse-pressed or\n  key-pressed. Instead, use those functions to call redraw or\n  loop which will run draw, which can update the screen\n  properly. This means that when no-loop has been called, no drawing\n  can happen, and functions like save-frame may not be used.\n\n  Note that if the sketch is resized, redraw will be called to\n  update the sketch, even after no-oop has been\n  specified. Otherwise, the sketch would enter an odd state until\n  loop was called."],"^R","1.0","^B","~$quil.core/no-loop","^15",false,"^S",null,"^T","resources/public/js/development/quil/core.cljc","^U",10,"^V","noLoop()","^16",["^10",[[]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",2763,"^Z",2769,"^19",0,"^1:",true,"^[",["^10",["^11",["^10",[[]]]]],"^13","Stops Processing from continuously executing the code within\n  draw. If start-loop is called, the code in draw will begin to run\n  continuously again. If using no-loop in setup, it should be the last\n  line inside the block.\n\n  When no-loop is used, it's not possible to manipulate or access the\n  screen inside event handling functions such as mouse-pressed or\n  key-pressed. Instead, use those functions to call redraw or\n  loop which will run draw, which can update the screen\n  properly. This means that when no-loop has been called, no drawing\n  can happen, and functions like save-frame may not be used.\n\n  Note that if the sketch is resized, redraw will be called to\n  update the sketch, even after no-oop has been\n  specified. Otherwise, the sketch would enter an odd state until\n  loop was called."],"~$minute",["^ ","^O","Input","^P",null,"^Q",["^ ","^O","Input","^R","1.0","^S","Time & Date","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",9,"^V","minute()","^W",3,"^X",false,"^Y",2508,"^Z",2508,"^[",["^10",["^11",["^10",[[]]]]],"^13","Returns the current minute as a value from 0 - 59"],"^R","1.0","^B","~$quil.core/minute","^15",false,"^S","Time & Date","^T","resources/public/js/development/quil/core.cljc","^U",9,"^V","minute()","^16",["^10",[[]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",false,"^Y",2502,"^Z",2508,"^19",0,"^1:",true,"^[",["^10",["^11",["^10",[[]]]]],"^13","Returns the current minute as a value from 0 - 59"],"~$text",["^ ","^O","Typography","^P",null,"^Q",["^ ","^O","Typography","^R","1.0","^S","Loading & Displaying","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",7,"^1D",["^ ","^15",false,"^19",5,"^16",["^10",[["~$s","~$x","~$y"],["~$s","~$x","~$y","~$z"],["~$s","~$x1","~$y1","~$x2","~$y2"]]],"^[",["^10",[["~$s","~$x","~$y"],["~$s","~$x","~$y","~$z"],["~$s","^4D","^4E","^4F","^4G"]]],"^18",["^10",[null,null,null]]],"^V","text()","^W",3,"^X",true,"^Y",4192,"^Z",4192,"^[",["^10",["^11",["^10",[["~$s","~$x","~$y"],["~$s","~$x","~$y","~$z"],["~$s","^4D","^4E","^4F","^4G"]]]]],"^13","Draws text to the screen in the position specified by the x and y\n  parameters and the optional z parameter. A default font will be used\n  unless a font is set with the text-font fn. Change the color of the\n  text with the fill fn. The text displays in relation to the\n  text-align fn, which gives the option to draw to the left, right, and\n  center of the coordinates.\n\n  The x1, y1, x2 and y2 parameters define a\n  rectangular area to display within and may only be used with string\n  data. For text drawn inside a rectangle, the coordinates are\n  interpreted based on the current rect-mode setting."],"^R","1.0","^B","~$quil.core/text","^15",false,"^S","Loading & Displaying","^T","resources/public/js/development/quil/core.cljc","^U",7,"^1D",["^ ","^15",false,"^19",5,"^16",["^10",[["~$s","~$x","~$y"],["~$s","~$x","~$y","~$z"],["~$s","^4D","^4E","^4F","^4G"]]],"^[",["^10",[["~$s","~$x","~$y"],["~$s","~$x","~$y","~$z"],["~$s","^4D","^4E","^4F","^4G"]]],"^18",["^10",[null,null,null]]],"^V","text()","^16",["^10",[["~$s","~$x","~$y"],["~$s","~$x","~$y","~$z"],["~$s","^4D","^4E","^4F","^4G"]]],"^17",null,"^18",["^10",[null,null,null]],"^W",1,"^X",true,"^Y",4186,"^Z",4192,"^19",5,"^1:",true,"^[",["^10",[["~$s","~$x","~$y"],["~$s","~$x","~$y","~$z"],["~$s","^4D","^4E","^4F","^4G"]]],"^13","Draws text to the screen in the position specified by the x and y\n  parameters and the optional z parameter. A default font will be used\n  unless a font is set with the text-font fn. Change the color of the\n  text with the fill fn. The text displays in relation to the\n  text-align fn, which gives the option to draw to the left, right, and\n  center of the coordinates.\n\n  The x1, y1, x2 and y2 parameters define a\n  rectangular area to display within and may only be used with string\n  data. For text drawn inside a rectangle, the coordinates are\n  interpreted based on the current rect-mode setting."],"~$available-fonts",["^ ","^O","Typography","^P",null,"^Q",["^ ","^O","Typography","^R","1.0","^S","Loading & Displaying","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",18,"^V","PFont.list()","^W",3,"^X",false,"^Y",492,"^Z",492,"^[",["^10",["^11",["^10",[[]]]]],"^13","A sequence of strings representing the fonts on this system\n  available for use.\n\n  Because of limitations in Java, not all fonts can be used and some\n  might work with one operating system and not others. When sharing a\n  sketch with other people or posting it on the web, you may need to\n  include a .ttf or .otf version of your font in the data directory of\n  the sketch because other people might not have the font installed on\n  their computer. Only fonts that can legally be distributed should be\n  included with a sketch."],"^R","1.0","^B","~$quil.core/available-fonts","^15",false,"^S","Loading & Displaying","^T","resources/public/js/development/quil/core.cljc","^U",18,"^V","PFont.list()","^16",["^10",[[]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",false,"^Y",486,"^Z",492,"^19",0,"^1:",true,"^[",["^10",["^11",["^10",[[]]]]],"^13","A sequence of strings representing the fonts on this system\n  available for use.\n\n  Because of limitations in Java, not all fonts can be used and some\n  might work with one operating system and not others. When sharing a\n  sketch with other people or posting it on the web, you may need to\n  include a .ttf or .otf version of your font in the data directory of\n  the sketch because other people might not have the font installed on\n  their computer. Only fonts that can legally be distributed should be\n  included with a sketch."],"~$rect-modes",["^ ","^B","~$quil.core/rect-modes","^T","resources/public/js/development/quil/core.cljc","^Y",45,"^W",1,"^Z",64,"^U",12,"^Q",["^ ","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^Y",64,"^W",2,"^Z",64,"^U",12],"^1=","^1>"],"~$THIRD-PI",["^ ","^B","~$quil.core/THIRD-PI","^T","resources/public/js/development/quil/core.cljc","^Y",80,"^W",1,"^Z",80,"^U",14,"^Q",["^ ","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^Y",80,"^W",6,"^Z",80,"^U",14],"^1=","~$number"],"~$binary",["^ ","^O","Data","^P",null,"^Q",["^ ","^O","Data","~:require-binding",false,"^R","1.0","^S","Conversion","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",9,"^1D",["^ ","^15",false,"^19",2,"^16",["^10",[["^34"],["^34","~$num-digits"]]],"^[",["^10",[["^34"],["^34","^4R"]]],"^18",["^10",[null,null]]],"^V","binary()","^W",3,"^Y",762,"^Z",762,"^[",["^10",["^11",["^10",[["^34"],["^34","^4R"]]]]],"^13","Returns a string representing the binary value of an int, char or\n  byte. When converting an int to a string, it is possible to specify\n  the number of digits used."],"^4Q",false,"^R","1.0","^B","~$quil.core/binary","^15",false,"^S","Conversion","^T","resources/public/js/development/quil/core.cljc","^U",9,"^1D",["^ ","^15",false,"^19",2,"^16",["^10",[["^34"],["^34","^4R"]]],"^[",["^10",[["^34"],["^34","^4R"]]],"^18",["^10",[null,null]]],"^V","binary()","^16",["^10",[["^34"],["^34","^4R"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^Y",756,"^Z",762,"^19",2,"^1:",true,"^[",["^10",[["^34"],["^34","^4R"]]],"^13","Returns a string representing the binary value of an int, char or\n  byte. When converting an int to a string, it is possible to specify\n  the number of digits used."],"~$random-2d",["^ ","^O","Math","^P",null,"^Q",["^ ","^O","Math","^R","2.6.1","^S","Random","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",12,"^V",null,"^W",3,"^X",true,"^Y",3196,"^Z",3196,"^[",["^10",["^11",["^10",[[]]]]],"^13","Returns a new 2D unit vector with a random direction"],"^R","2.6.1","^B","~$quil.core/random-2d","^15",false,"^S","Random","^T","resources/public/js/development/quil/core.cljc","^U",12,"^V",null,"^16",["^10",[[]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",3190,"^Z",3196,"^19",0,"^1:",true,"^[",["^10",["^11",["^10",[[]]]]],"^13","Returns a new 2D unit vector with a random direction"],"~$pop-matrix",["^ ","^O","Transform","^P",null,"^Q",["^ ","^O","Transform","^R","1.0","^S",null,"^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",13,"^V","popMatrix()","^W",3,"^X",true,"^Y",2997,"^Z",2997,"^[",["^10",["^11",["^10",[[]]]]],"^13","Pops the current transformation matrix off the matrix\n  stack. Understanding pushing and popping requires understanding the\n  concept of a matrix stack. The push-matrix fn saves the current\n  coordinate system to the stack and pop-matrix restores the prior\n  coordinate system. push-matrix and pop-matrix are used in conjuction\n  with the other transformation methods and may be embedded to control\n  the scope of the transformations."],"^R","1.0","^B","~$quil.core/pop-matrix","^15",false,"^S",null,"^T","resources/public/js/development/quil/core.cljc","^U",13,"^V","popMatrix()","^16",["^10",[[]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",2991,"^Z",2997,"^19",0,"^1:",true,"^[",["^10",["^11",["^10",[[]]]]],"^13","Pops the current transformation matrix off the matrix\n  stack. Understanding pushing and popping requires understanding the\n  concept of a matrix stack. The push-matrix fn saves the current\n  coordinate system to the stack and pop-matrix restores the prior\n  coordinate system. push-matrix and pop-matrix are used in conjuction\n  with the other transformation methods and may be embedded to control\n  the scope of the transformations."],"~$ceil",["^ ","^O","Math","^P",null,"^Q",["^ ","^O","Math","^R","1.0","^S","Calculation","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",7,"^V","ceil()","^W",3,"^X",false,"^Y",973,"^Z",973,"^[",["^10",["^11",["^10",[["~$n"]]]]],"^13","Calculates the closest int value that is greater than or equal to\n  the value of the parameter. For example, (ceil 9.03) returns the\n  value 10."],"^R","1.0","^B","~$quil.core/ceil","^15",false,"^S","Calculation","^T","resources/public/js/development/quil/core.cljc","^U",7,"^V","ceil()","^16",["^10",[["~$n"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",false,"^Y",967,"^Z",973,"^19",1,"^1:",true,"^[",["^10",["^11",["^10",[["~$n"]]]]],"^13","Calculates the closest int value that is greater than or equal to\n  the value of the parameter. For example, (ceil 9.03) returns the\n  value 10."],"~$key-code",["^ ","^O","Input","^P",null,"^Q",["^ ","^O","Input","^R","1.0","^S","Keyboard","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",11,"^V","keyCode","^W",3,"^X",true,"^Y",2164,"^Z",2164,"^[",["^10",["^11",["^10",[[]]]]],"^13","The variable keyCode is used to detect special keys such as the UP,\n  DOWN, LEFT, RIGHT arrow keys and ALT, CONTROL, SHIFT. When checking\n  for these keys, it's first necessary to check and see if the key is\n  coded. This is done with the conditional (= (key) CODED).\n\n  The keys included in the ASCII specification (BACKSPACE, TAB, ENTER,\n  RETURN, ESC, and DELETE) do not require checking to see if they key\n  is coded, and you should simply use the key variable instead of\n  key-code If you're making cross-platform projects, note that the\n  ENTER key is commonly used on PCs and Unix and the RETURN key is\n  used instead on Macintosh. Check for both ENTER and RETURN to make\n  sure your program will work for all platforms.\n\n  For users familiar with Java, the values for UP and DOWN are simply\n  shorter versions of Java's KeyEvent.VK_UP and\n  KeyEvent.VK_DOWN. Other keyCode values can be found in the Java\n  KeyEvent reference."],"^R","1.0","^B","~$quil.core/key-code","^15",false,"^S","Keyboard","^T","resources/public/js/development/quil/core.cljc","^U",11,"^V","keyCode","^16",["^10",[[]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",2158,"^Z",2164,"^19",0,"^1:",true,"^[",["^10",["^11",["^10",[[]]]]],"^13","The variable keyCode is used to detect special keys such as the UP,\n  DOWN, LEFT, RIGHT arrow keys and ALT, CONTROL, SHIFT. When checking\n  for these keys, it's first necessary to check and see if the key is\n  coded. This is done with the conditional (= (key) CODED).\n\n  The keys included in the ASCII specification (BACKSPACE, TAB, ENTER,\n  RETURN, ESC, and DELETE) do not require checking to see if they key\n  is coded, and you should simply use the key variable instead of\n  key-code If you're making cross-platform projects, note that the\n  ENTER key is commonly used on PCs and Unix and the RETURN key is\n  used instead on Macintosh. Check for both ENTER and RETURN to make\n  sure your program will work for all platforms.\n\n  For users familiar with Java, the values for UP and DOWN are simply\n  shorter versions of Java's KeyEvent.VK_UP and\n  KeyEvent.VK_DOWN. Other keyCode values can be found in the Java\n  KeyEvent reference."],"~$sphere",["^ ","^O","Shape","^P",null,"^Q",["^ ","^O","Shape","^R","1.0","^S","3D Primitives","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",9,"^V","sphere()","^W",3,"^X",true,"^Y",3939,"^Z",3939,"^[",["^10",["^11",["^10",[["~$radius"]]]]],"^13","Generates a hollow ball made from tessellated triangles."],"^R","1.0","^B","~$quil.core/sphere","^15",false,"^S","3D Primitives","^T","resources/public/js/development/quil/core.cljc","^U",9,"^V","sphere()","^16",["^10",[["^51"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",3933,"^Z",3939,"^19",1,"^1:",true,"^[",["^10",["^11",["^10",[["^51"]]]]],"^13","Generates a hollow ball made from tessellated triangles."],"~$request-image",["^ ","^O","Image","^P",null,"^Q",["^ ","^O","Image","^R","1.0","^S","Loading & Displaying","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",16,"^V","requestImage()","^W",3,"^X",true,"^Y",3366,"^Z",3366,"^[",["^10",["^11",["^10",[["~$filename"]]]]],"^13","This function load images on a separate thread so that your sketch\n  does not freeze while images load during setup. While the image is\n  loading, its width and height will be 0. If an error occurs while\n  loading the image, its width and height will be set to -1. You'll\n  know when the image has loaded properly because its width and height\n  will be greater than 0. Asynchronous image loading (particularly\n  when downloading from a server) can dramatically improve\n  performance."],"^R","1.0","^B","~$quil.core/request-image","^15",false,"^S","Loading & Displaying","^T","resources/public/js/development/quil/core.cljc","^U",16,"^V","requestImage()","^16",["^10",[["^54"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",3360,"^Z",3366,"^19",1,"^1:",true,"^[",["^10",["^11",["^10",[["^54"]]]]],"^13","This function load images on a separate thread so that your sketch\n  does not freeze while images load during setup. While the image is\n  loading, its width and height will be 0. If an error occurs while\n  loading the image, its width and height will be set to -1. You'll\n  know when the image has loaded properly because its width and height\n  will be greater than 0. Asynchronous image loading (particularly\n  when downloading from a server) can dramatically improve\n  performance."],"~$hue",["^ ","^O","Color","^P",null,"^Q",["^ ","^O","Color","^R","1.0","^S","Creating & Reading","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",6,"^V","hue()","^W",3,"^X",true,"^Y",2061,"^Z",2061,"^[",["^10",["^11",["^10",[["~$col"]]]]],"^13","Extracts the hue value from a color."],"^R","1.0","^B","~$quil.core/hue","^15",false,"^S","Creating & Reading","^T","resources/public/js/development/quil/core.cljc","^U",6,"^V","hue()","^16",["^10",[["^57"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",2055,"^Z",2061,"^19",1,"^1:",true,"^[",["^10",["^11",["^10",[["^57"]]]]],"^13","Extracts the hue value from a color."],"~$background-int",["^ ","^O","Color","^P",null,"^Q",["^ ","^O","Color","^R","1.0","^S","Setting","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",17,"^1D",["^ ","^15",false,"^19",2,"^16",["^10",[["^3I"],["^3I","^2N"]]],"^[",["^10",[["^3I"],["^3I","^2N"]]],"^18",["^10",[null,null]]],"^V","background()","^W",3,"^X",true,"^Y",533,"^Z",533,"^[",["^10",["^11",["^10",[["^3I"],["^3I","^2N"]]]]],"^13","Sets the color used for the background of the Processing\n  window. The default background is light gray. In the draw function,\n  the background color is used to clear the display window at the\n  beginning of each frame.\n\n  It is not possible to use transparency (alpha) in background colors\n  with the main drawing surface, however they will work properly with\n  create-graphics. Converts rgb to an int and alpha to a float."],"^R","1.0","^B","~$quil.core/background-int","^15",false,"^S","Setting","^T","resources/public/js/development/quil/core.cljc","^U",17,"^1D",["^ ","^15",false,"^19",2,"^16",["^10",[["^3I"],["^3I","^2N"]]],"^[",["^10",[["^3I"],["^3I","^2N"]]],"^18",["^10",[null,null]]],"^V","background()","^16",["^10",[["^3I"],["^3I","^2N"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",527,"^Z",533,"^19",2,"^1:",true,"^[",["^10",[["^3I"],["^3I","^2N"]]],"^13","Sets the color used for the background of the Processing\n  window. The default background is light gray. In the draw function,\n  the background color is used to clear the display window at the\n  beginning of each frame.\n\n  It is not possible to use transparency (alpha) in background colors\n  with the main drawing surface, however they will work properly with\n  create-graphics. Converts rgb to an int and alpha to a float."],"~$start-loop",["^ ","^O","Structure","^P",null,"^Q",["^ ","^O","Structure","^R","1.0","^S",null,"^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",13,"^V","loop()","^W",3,"^X",true,"^Y",4020,"^Z",4020,"^[",["^10",["^11",["^10",[[]]]]],"^13","Causes Processing to continuously execute the code within\n  draw. If no-loop is called, the code in draw stops executing."],"^R","1.0","^B","~$quil.core/start-loop","^15",false,"^S",null,"^T","resources/public/js/development/quil/core.cljc","^U",13,"^V","loop()","^16",["^10",[[]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",4014,"^Z",4020,"^19",0,"^1:",true,"^[",["^10",["^11",["^10",[[]]]]],"^13","Causes Processing to continuously execute the code within\n  draw. If no-loop is called, the code in draw stops executing."],"~$no-fill?",["^ ","^P",null,"^Q",["^ ","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^Y",4148,"^W",8,"^Z",4148,"^U",16,"^3[",true,"^[",["^10",["^11",["^10",[["^21"]]]]],"^13","Returns whether fill is disabled for current graphics."],"^3[",true,"^B","~$quil.core/no-fill?","^15",false,"^T","resources/public/js/development/quil/core.cljc","^U",16,"^16",["^10",[["^21"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^Y",4148,"^Z",4148,"^19",1,"^1:",true,"^[",["^10",["^11",["^10",[["^21"]]]]],"^13","Returns whether fill is disabled for current graphics."],"~$curve-vertex",["^ ","^O","Shape","^P",null,"^Q",["^ ","^O","Shape","^R","1.0","^S","Vertex","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",15,"^1D",["^ ","^15",false,"^19",3,"^16",["^10",[["~$x","~$y"],["~$x","~$y","~$z"]]],"^[",["^10",[["~$x","~$y"],["~$x","~$y","~$z"]]],"^18",["^10",[null,null]]],"^V","curveVertex()","^W",3,"^X",true,"^Y",1407,"^Z",1407,"^[",["^10",["^11",["^10",[["~$x","~$y"],["~$x","~$y","~$z"]]]]],"^13","Specifies vertex coordinates for curves. This function may only be\n  used between begin-shape and end-shape and only when there is no\n  mode keyword specified to begin-shape. The first and last points in a\n  series of curve-vertex lines will be used to guide the beginning and\n  end of a the curve. A minimum of four points is required to draw a\n  tiny curve between the second and third points. Adding a fifth point\n  with curve-vertex will draw the curve between the second, third, and\n  fourth points. The curve-vertex function is an implementation of\n  Catmull-Rom splines."],"^R","1.0","^B","~$quil.core/curve-vertex","^15",false,"^S","Vertex","^T","resources/public/js/development/quil/core.cljc","^U",15,"^1D",["^ ","^15",false,"^19",3,"^16",["^10",[["~$x","~$y"],["~$x","~$y","~$z"]]],"^[",["^10",[["~$x","~$y"],["~$x","~$y","~$z"]]],"^18",["^10",[null,null]]],"^V","curveVertex()","^16",["^10",[["~$x","~$y"],["~$x","~$y","~$z"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",1401,"^Z",1407,"^19",3,"^1:",true,"^[",["^10",[["~$x","~$y"],["~$x","~$y","~$z"]]],"^13","Specifies vertex coordinates for curves. This function may only be\n  used between begin-shape and end-shape and only when there is no\n  mode keyword specified to begin-shape. The first and last points in a\n  series of curve-vertex lines will be used to guide the beginning and\n  end of a the curve. A minimum of four points is required to draw a\n  tiny curve between the second and third points. Adding a fifth point\n  with curve-vertex will draw the curve between the second, third, and\n  fourth points. The curve-vertex function is an implementation of\n  Catmull-Rom splines."],"~$state-atom",["^ ","^O","State","^P",null,"^Q",["^ ","^O","State","^R","1.0","^S",null,"^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",13,"^W",3,"^X",true,"^Y",201,"^Z",201,"^[",["^10",["^11",["^10",[[]]]]],"^13","Retrieve sketch-specific state-atom. All changes to the\n  atom will be reflected in the state.\n\n  (set-state! :foo 1)\n  (state :foo) ;=> 1\n  (swap! (state-atom) update-in [:foo] inc)\n  (state :foo) ;=> 2"],"^R","1.0","^B","~$quil.core/state-atom","^15",false,"^S",null,"^T","resources/public/js/development/quil/core.cljc","^U",13,"^16",["^10",[[]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",196,"^Z",201,"^19",0,"^1:",true,"^[",["^10",["^11",["^10",[[]]]]],"^13","Retrieve sketch-specific state-atom. All changes to the\n  atom will be reflected in the state.\n\n  (set-state! :foo 1)\n  (state :foo) ;=> 1\n  (swap! (state-atom) update-in [:foo] inc)\n  (state :foo) ;=> 2"],"~$load-image",["^ ","^O","Image","^P",null,"^Q",["^ ","^O","Image","^R","1.0","^S","Loading & Displaying","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",13,"^V","loadImage()","^W",3,"^X",true,"^Y",2369,"^Z",2369,"^[",["^10",["^11",["^10",[["^54"]]]]],"^13","Loads an image into a variable of type PImage. Four types of\n  images ( .gif, .jpg, .tga, .png) images may be loaded. To load\n  correctly, images must be located in the data directory of the\n  current sketch. In most cases, load all images in setup to preload\n  them at the start of the program. Loading images inside draw will\n  reduce the speed of a program.\n\n  The filename parameter can also be a URL to a file found online.\n\n  If an image is not loaded successfully, the null value is returned\n  and an error message will be printed to the console. The error\n  message does not halt the program, however the null value may cause\n  a NullPointerException if your code does not check whether the value\n  returned from load-image is nil.\n\n  Depending on the type of error, a PImage object may still be\n  returned, but the width and height of the image will be set to\n  -1. This happens if bad image data is returned or cannot be decoded\n  properly. Sometimes this happens with image URLs that produce a 403\n  error or that redirect to a password prompt, because load-image\n  will attempt to interpret the HTML as image data."],"^R","1.0","^B","~$quil.core/load-image","^15",false,"^S","Loading & Displaying","^T","resources/public/js/development/quil/core.cljc","^U",13,"^V","loadImage()","^16",["^10",[["^54"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",2363,"^Z",2369,"^19",1,"^1:",true,"^[",["^10",["^11",["^10",[["^54"]]]]],"^13","Loads an image into a variable of type PImage. Four types of\n  images ( .gif, .jpg, .tga, .png) images may be loaded. To load\n  correctly, images must be located in the data directory of the\n  current sketch. In most cases, load all images in setup to preload\n  them at the start of the program. Loading images inside draw will\n  reduce the speed of a program.\n\n  The filename parameter can also be a URL to a file found online.\n\n  If an image is not loaded successfully, the null value is returned\n  and an error message will be printed to the console. The error\n  message does not halt the program, however the null value may cause\n  a NullPointerException if your code does not check whether the value\n  returned from load-image is nil.\n\n  Depending on the type of error, a PImage object may still be\n  returned, but the width and height of the image will be set to\n  -1. This happens if bad image data is returned or cannot be decoded\n  properly. Sometimes this happens with image URLs that produce a 403\n  error or that redirect to a password prompt, because load-image\n  will attempt to interpret the HTML as image data."],"~$bezier",["^ ","^O","Shape","^P",null,"^Q",["^ ","^O","Shape","^R","1.0","^S","Curves","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",9,"^1D",["^ ","^15",false,"^19",12,"^16",["^10",[["^4D","^4E","~$cx1","~$cy1","~$cx2","~$cy2","^4F","^4G"],["^4D","^4E","~$z1","^5F","^5G","~$cz1","^5H","^5I","~$cz2","^4F","^4G","~$z2"]]],"^[",["^10",[["^4D","^4E","^5F","^5G","^5H","^5I","^4F","^4G"],["^4D","^4E","^5J","^5F","^5G","^5K","^5H","^5I","^5L","^4F","^4G","^5M"]]],"^18",["^10",[null,null]]],"^V","bezier()","^W",3,"^X",true,"^Y",668,"^Z",668,"^[",["^10",["^11",["^10",[["^4D","^4E","^5F","^5G","^5H","^5I","^4F","^4G"],["^4D","^4E","^5J","^5F","^5G","^5K","^5H","^5I","^5L","^4F","^4G","^5M"]]]]],"^13","Draws a Bezier curve on the screen. These curves are defined by a\n  series of anchor and control points. The first two parameters\n  specify the first anchor point and the last two parameters specify\n  the other anchor point. The middle parameters specify the control\n  points which define the shape of the curve."],"^R","1.0","^B","~$quil.core/bezier","^15",false,"^S","Curves","^T","resources/public/js/development/quil/core.cljc","^U",9,"^1D",["^ ","^15",false,"^19",12,"^16",["^10",[["^4D","^4E","^5F","^5G","^5H","^5I","^4F","^4G"],["^4D","^4E","^5J","^5F","^5G","^5K","^5H","^5I","^5L","^4F","^4G","^5M"]]],"^[",["^10",[["^4D","^4E","^5F","^5G","^5H","^5I","^4F","^4G"],["^4D","^4E","^5J","^5F","^5G","^5K","^5H","^5I","^5L","^4F","^4G","^5M"]]],"^18",["^10",[null,null]]],"^V","bezier()","^16",["^10",[["^4D","^4E","^5F","^5G","^5H","^5I","^4F","^4G"],["^4D","^4E","^5J","^5F","^5G","^5K","^5H","^5I","^5L","^4F","^4G","^5M"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",662,"^Z",668,"^19",12,"^1:",true,"^[",["^10",[["^4D","^4E","^5F","^5G","^5H","^5I","^4F","^4G"],["^4D","^4E","^5J","^5F","^5G","^5K","^5H","^5I","^5L","^4F","^4G","^5M"]]],"^13","Draws a Bezier curve on the screen. These curves are defined by a\n  series of anchor and control points. The first two parameters\n  specify the first anchor point and the last two parameters specify\n  the other anchor point. The middle parameters specify the control\n  points which define the shape of the curve."],"~$smooth",["^ ","^O","Shape","^P",null,"^Q",["^ ","^O","Shape","^R","1.0","^S","Attributes","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",9,"^1D",["^ ","^15",false,"^19",1,"^16",["^10",[[],["^1H"]]],"^[",["^10",[[],["^1H"]]],"^18",["^10",[null,null]]],"^V","smooth()","^W",3,"^X",true,"^Y",3893,"^Z",3893,"^[",["^10",["^11",["^10",[[],["^1H"]]]]],"^13","Draws all geometry with smooth (anti-aliased) edges. This will slow\n  down the frame rate of the application, but will enhance the visual\n  refinement.\n\n  Must be called inside :settings handler.\n\n  The level parameter (int) increases the level of smoothness with the\n  P2D and P3D renderers. This is the level of over sampling applied to\n  the graphics buffer. The value '2' will double the rendering size\n  before scaling it down to the display size. This is called '2x\n  anti-aliasing.' The value 4 is used for 4x anti-aliasing and 8 is\n  specified for 8x anti-aliasing. If level is set to 0, it will disable\n  all smoothing; it's the equivalent of the function noSmooth().\n  The maximum anti-aliasing level is determined by the hardware of the\n  machine that is running the software.\n\n  Note that smooth will also improve image quality of resized images."],"^R","1.0","^B","~$quil.core/smooth","^15",false,"^S","Attributes","^T","resources/public/js/development/quil/core.cljc","^U",9,"^1D",["^ ","^15",false,"^19",1,"^16",["^10",[[],["^1H"]]],"^[",["^10",[[],["^1H"]]],"^18",["^10",[null,null]]],"^V","smooth()","^16",["^10",[[],["^1H"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",3887,"^Z",3893,"^19",1,"^1:",true,"^[",["^10",[[],["^1H"]]],"^13","Draws all geometry with smooth (anti-aliased) edges. This will slow\n  down the frame rate of the application, but will enhance the visual\n  refinement.\n\n  Must be called inside :settings handler.\n\n  The level parameter (int) increases the level of smoothness with the\n  P2D and P3D renderers. This is the level of over sampling applied to\n  the graphics buffer. The value '2' will double the rendering size\n  before scaling it down to the display size. This is called '2x\n  anti-aliasing.' The value 4 is used for 4x anti-aliasing and 8 is\n  specified for 8x anti-aliasing. If level is set to 0, it will disable\n  all smoothing; it's the equivalent of the function noSmooth().\n  The maximum anti-aliasing level is determined by the hardware of the\n  machine that is running the software.\n\n  Note that smooth will also improve image quality of resized images."],"~$filter-modes",["^ ","^B","~$quil.core/filter-modes","^T","resources/public/js/development/quil/core.cljc","^Y",45,"^W",1,"^Z",73,"^U",14,"^Q",["^ ","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^Y",73,"^W",2,"^Z",73,"^U",14],"^1=","^1>"],"~$shear-x",["^ ","^O","Transform","^P",null,"^Q",["^ ","^O","Transform","^R","1.0","^S",null,"^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",10,"^V","shearX()","^W",3,"^X",true,"^Y",3792,"^Z",3792,"^[",["^10",["^11",["^10",[["^12"]]]]],"^13","Shears a shape around the x-axis the amount specified by the angle\n  parameter. Angles should be specified in radians (values from 0 to\n  PI*2) or converted to radians with the radians() function. Objects\n  are always sheared around their relative position to the origin and\n  positive numbers shear objects in a clockwise direction.\n  Transformations apply to everything that happens after and\n  subsequent calls to the function accumulates the effect. For\n  example, calling (shear-x (/ PI 2)) and then (shear-x (/ PI 2)) is\n  the same as (shear-x PI). If shear-x is called within the draw fn,\n  the transformation is reset when the loop begins again. This\n  function works in P2D or JAVA2D mode.\n\n  Technically, shear-x multiplies the current transformation matrix\n  by a rotation matrix. This function can be further controlled by the\n  push-matrix and pop-matrix fns."],"^R","1.0","^B","~$quil.core/shear-x","^15",false,"^S",null,"^T","resources/public/js/development/quil/core.cljc","^U",10,"^V","shearX()","^16",["^10",[["^12"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",3786,"^Z",3792,"^19",1,"^1:",true,"^[",["^10",["^11",["^10",[["^12"]]]]],"^13","Shears a shape around the x-axis the amount specified by the angle\n  parameter. Angles should be specified in radians (values from 0 to\n  PI*2) or converted to radians with the radians() function. Objects\n  are always sheared around their relative position to the origin and\n  positive numbers shear objects in a clockwise direction.\n  Transformations apply to everything that happens after and\n  subsequent calls to the function accumulates the effect. For\n  example, calling (shear-x (/ PI 2)) and then (shear-x (/ PI 2)) is\n  the same as (shear-x PI). If shear-x is called within the draw fn,\n  the transformation is reset when the loop begins again. This\n  function works in P2D or JAVA2D mode.\n\n  Technically, shear-x multiplies the current transformation matrix\n  by a rotation matrix. This function can be further controlled by the\n  push-matrix and pop-matrix fns."],"~$stroke-weight",["^ ","^O","Shape","^P",null,"^Q",["^ ","^O","Shape","^R","1.0","^S","Attributes","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",16,"^V","strokeWeight()","^W",3,"^X",true,"^Y",4116,"^Z",4116,"^[",["^10",["^11",["^10",[["~$weight"]]]]],"^13","Sets the width of the stroke used for lines, points, and the border\n  around shapes. All widths are set in units of pixels. "],"^R","1.0","^B","~$quil.core/stroke-weight","^15",false,"^S","Attributes","^T","resources/public/js/development/quil/core.cljc","^U",16,"^V","strokeWeight()","^16",["^10",[["^5V"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",4110,"^Z",4116,"^19",1,"^1:",true,"^[",["^10",["^11",["^10",[["^5V"]]]]],"^13","Sets the width of the stroke used for lines, points, and the border\n  around shapes. All widths are set in units of pixels. "],"~$directional-light",["^ ","^O","Lights, Camera","^P",null,"^Q",["^ ","^O","Lights, Camera","^R","1.0","^S","Lights","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",20,"^V","directionalLight()","^W",3,"^X",true,"^Y",1473,"^Z",1473,"^[",["^10",["^11",["^10",[["~$r","~$g","~$b","~$nx","~$ny","~$nz"]]]]],"^13","Adds a directional light. Directional light comes from one\n  direction and is stronger when hitting a surface squarely and weaker\n  if it hits at a gentle angle. After hitting a surface, a\n  directional lights scatters in all directions. Lights need to be\n  included in the draw fn to remain persistent in a looping\n  program. Placing them in the setup fn of a looping program will cause\n  them to only have an effect the first time through the loop. The\n  affect of the r, g, and b parameters is determined by the current\n  color mode. The nx, ny, and nz parameters specify the direction the\n  light is facing. For example, setting ny to -1 will cause the\n  geometry to be lit from below (the light is facing directly upward)"],"^R","1.0","^B","~$quil.core/directional-light","^15",false,"^S","Lights","^T","resources/public/js/development/quil/core.cljc","^U",20,"^V","directionalLight()","^16",["^10",[["~$r","~$g","~$b","^5Y","^5Z","^5["]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",1467,"^Z",1473,"^19",6,"^1:",true,"^[",["^10",["^11",["^10",[["~$r","~$g","~$b","^5Y","^5Z","^5["]]]]],"^13","Adds a directional light. Directional light comes from one\n  direction and is stronger when hitting a surface squarely and weaker\n  if it hits at a gentle angle. After hitting a surface, a\n  directional lights scatters in all directions. Lights need to be\n  included in the draw fn to remain persistent in a looping\n  program. Placing them in the setup fn of a looping program will cause\n  them to only have an effect the first time through the loop. The\n  affect of the r, g, and b parameters is determined by the current\n  color mode. The nx, ny, and nz parameters specify the direction the\n  light is facing. For example, setting ny to -1 will cause the\n  geometry to be lit from below (the light is facing directly upward)"],"~$frame-rate",["^ ","^O","Environment","^P",null,"^Q",["^ ","^O","Environment","^R","1.0","^S",null,"^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",13,"^V","frameRate()","^W",3,"^X",true,"^Y",1876,"^Z",1876,"^[",["^10",["^11",["^10",[["~$new-rate"]]]]],"^13","Specifies a new target framerate (number of frames to be displayed every\n  second). If the processor is not fast enough to maintain the\n  specified rate, it will not be achieved. For example, the function\n  call (frame-rate 30) will attempt to refresh 30 times a second. It\n  is recommended to set the frame rate within setup. The default rate\n  is 60 frames per second."],"^R","1.0","^B","~$quil.core/frame-rate","^15",false,"^S",null,"^T","resources/public/js/development/quil/core.cljc","^U",13,"^V","frameRate()","^16",["^10",[["^62"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",1870,"^Z",1876,"^19",1,"^1:",true,"^[",["^10",["^11",["^10",[["^62"]]]]],"^13","Specifies a new target framerate (number of frames to be displayed every\n  second). If the processor is not fast enough to maintain the\n  specified rate, it will not be achieved. For example, the function\n  call (frame-rate 30) will attempt to refresh 30 times a second. It\n  is recommended to set the frame rate within setup. The default rate\n  is 60 frames per second."],"~$hour",["^ ","^O","Input","^P",null,"^Q",["^ ","^O","Input","^R","1.0","^S","Time & Date","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",7,"^V","hour()","^W",3,"^X",false,"^Y",2049,"^Z",2049,"^[",["^10",["^11",["^10",[[]]]]],"^13","Returns the current hour as a value from 0 - 23."],"^R","1.0","^B","~$quil.core/hour","^15",false,"^S","Time & Date","^T","resources/public/js/development/quil/core.cljc","^U",7,"^V","hour()","^16",["^10",[[]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",false,"^Y",2043,"^Z",2049,"^19",0,"^1:",true,"^[",["^10",["^11",["^10",[[]]]]],"^13","Returns the current hour as a value from 0 - 23."],"~$fill-int",["^ ","^O","Color","^P",null,"^Q",["^ ","^O","Color","^R","1.0","^S","Setting","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",11,"^1D",["^ ","^15",false,"^19",2,"^16",["^10",[["^3I"],["^3I","^2N"]]],"^[",["^10",[["^3I"],["^3I","^2N"]]],"^18",["^10",[null,null]]],"^V","fill()","^W",3,"^X",true,"^Y",1724,"^Z",1724,"^[",["^10",["^11",["^10",[["^3I"],["^3I","^2N"]]]]],"^13","Sets the color used to fill shapes."],"^R","1.0","^B","~$quil.core/fill-int","^15",false,"^S","Setting","^T","resources/public/js/development/quil/core.cljc","^U",11,"^1D",["^ ","^15",false,"^19",2,"^16",["^10",[["^3I"],["^3I","^2N"]]],"^[",["^10",[["^3I"],["^3I","^2N"]]],"^18",["^10",[null,null]]],"^V","fill()","^16",["^10",[["^3I"],["^3I","^2N"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",1718,"^Z",1724,"^19",2,"^1:",true,"^[",["^10",[["^3I"],["^3I","^2N"]]],"^13","Sets the color used to fill shapes."],"~$atan",["^ ","^O","Math","^P",null,"^Q",["^ ","^O","Math","^R","1.0","^S","Trigonometry","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",7,"^V","atan()","^W",3,"^X",false,"^Y",459,"^Z",459,"^[",["^10",["^11",["^10",[["~$n"]]]]],"^13","The inverse of tan, returns the arc tangent of a value. This\n  function expects the values in the range of -Infinity to\n  Infinity (exclusive) and values are returned in the range -PI/2 to\n  PI/2 ."],"^R","1.0","^B","~$quil.core/atan","^15",false,"^S","Trigonometry","^T","resources/public/js/development/quil/core.cljc","^U",7,"^V","atan()","^16",["^10",[["~$n"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",false,"^Y",453,"^Z",459,"^19",1,"^1:",true,"^[",["^10",["^11",["^10",[["~$n"]]]]],"^13","The inverse of tan, returns the arc tangent of a value. This\n  function expects the values in the range of -Infinity to\n  Infinity (exclusive) and values are returned in the range -PI/2 to\n  PI/2 ."],"~$stroke-join-modes",["^ ","^B","~$quil.core/stroke-join-modes","^T","resources/public/js/development/quil/core.cljc","^Y",45,"^W",1,"^Z",67,"^U",19,"^Q",["^ ","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^Y",67,"^W",2,"^Z",67,"^U",19],"^1=","^1>"],"~$rotate-y",["^ ","^O","Transform","^P",null,"^Q",["^ ","^O","Transform","^R","1.0","^S",null,"^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",11,"^V","rotateY()","^W",3,"^X",true,"^Y",3501,"^Z",3501,"^[",["^10",["^11",["^10",[["^12"]]]]],"^13","Rotates a shape around the y-axis the amount specified by the angle\n  parameter. Angles should be specified in radians (values from 0\n  to (* PI 2)) or converted to radians with the radians function.\n  Objects are always rotated around their relative position to the\n  origin and positive numbers rotate objects in a counterclockwise\n  direction. Transformations apply to everything that happens after\n  and subsequent calls to the function accumulates the effect. For\n  example, calling (rotate-y HALF-PI) and then (rotate-y HALF-PI) is\n  the same as (rotate-y PI). If rotate-y is called within the draw fn,\n  the transformation is reset when the loop begins again. This\n  function requires either the :p3d or :opengl renderer."],"^R","1.0","^B","~$quil.core/rotate-y","^15",false,"^S",null,"^T","resources/public/js/development/quil/core.cljc","^U",11,"^V","rotateY()","^16",["^10",[["^12"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",3495,"^Z",3501,"^19",1,"^1:",true,"^[",["^10",["^11",["^10",[["^12"]]]]],"^13","Rotates a shape around the y-axis the amount specified by the angle\n  parameter. Angles should be specified in radians (values from 0\n  to (* PI 2)) or converted to radians with the radians function.\n  Objects are always rotated around their relative position to the\n  origin and positive numbers rotate objects in a counterclockwise\n  direction. Transformations apply to everything that happens after\n  and subsequent calls to the function accumulates the effect. For\n  example, calling (rotate-y HALF-PI) and then (rotate-y HALF-PI) is\n  the same as (rotate-y PI). If rotate-y is called within the draw fn,\n  the transformation is reset when the loop begins again. This\n  function requires either the :p3d or :opengl renderer."],"~$day",["^ ","^O","Input","^P",null,"^Q",["^ ","^O","Input","^R","1.0","^S","Time & Date","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",6,"^V","day()","^W",3,"^X",false,"^Y",1426,"^Z",1426,"^[",["^10",["^11",["^10",[[]]]]],"^13","Get the current day of the month (1 through 31)."],"^R","1.0","^B","~$quil.core/day","^15",false,"^S","Time & Date","^T","resources/public/js/development/quil/core.cljc","^U",6,"^V","day()","^16",["^10",[[]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",false,"^Y",1420,"^Z",1426,"^19",0,"^1:",true,"^[",["^10",["^11",["^10",[[]]]]],"^13","Get the current day of the month (1 through 31)."],"~$point-light",["^ ","^O","Lights, Camera","^P",null,"^Q",["^ ","^O","Lights, Camera","^R","1.0","^S","Lights","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",14,"^V","pointLight()","^W",3,"^X",true,"^Y",2981,"^Z",2981,"^[",["^10",["^11",["^10",[["~$r","~$g","~$b","~$x","~$y","~$z"]]]]],"^13","Adds a point light. Lights need to be included in the draw() to\n  remain persistent in a looping program. Placing them in the setup()\n  of a looping program will cause them to only have an effect the\n  first time through the loop. The affect of the r, g, and b\n  parameters is determined by the current color mode. The x, y, and z\n  parameters set the position of the light"],"^R","1.0","^B","~$quil.core/point-light","^15",false,"^S","Lights","^T","resources/public/js/development/quil/core.cljc","^U",14,"^V","pointLight()","^16",["^10",[["~$r","~$g","~$b","~$x","~$y","~$z"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",2975,"^Z",2981,"^19",6,"^1:",true,"^[",["^10",["^11",["^10",[["~$r","~$g","~$b","~$x","~$y","~$z"]]]]],"^13","Adds a point light. Lights need to be included in the draw() to\n  remain persistent in a looping program. Placing them in the setup()\n  of a looping program will cause them to only have an effect the\n  first time through the loop. The affect of the r, g, and b\n  parameters is determined by the current color mode. The x, y, and z\n  parameters set the position of the light"],"~$pmouse-x",["^ ","^O","Input","^P",null,"^Q",["^ ","^O","Input","^R","1.0","^S","Mouse","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",11,"^V","pmouseX","^W",3,"^X",true,"^Y",2943,"^Z",2943,"^[",["^10",["^11",["^10",[[]]]]],"^13","Horizontal coordinate of the mouse in the previous frame"],"^R","1.0","^B","~$quil.core/pmouse-x","^15",false,"^S","Mouse","^T","resources/public/js/development/quil/core.cljc","^U",11,"^V","pmouseX","^16",["^10",[[]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",2937,"^Z",2943,"^19",0,"^1:",true,"^[",["^10",["^11",["^10",[[]]]]],"^13","Horizontal coordinate of the mouse in the previous frame"],"~$get-sketch-by-id",["^ ","^O",null,"^P",null,"^Q",["^ ","^O",null,"^R","1.0","^S",null,"^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",22,"^V","getSketchById()","^W",6,"^X",true,"^Y",187,"^Z",187,"^[",["^10",["^11",["^10",[["~$id"]]]]],"^13","Returns sketch object by id of canvas element of sketch."],"^R","1.0","^B","~$quil.core/get-sketch-by-id","^15",false,"^S",null,"^T","resources/public/js/development/quil/core.cljc","^U",22,"^V","getSketchById()","^16",["^10",[["^6E"]]],"^17",null,"^18",["^10",[null,null]],"^W",4,"^X",true,"^Y",181,"^Z",187,"^19",1,"^1:",true,"^[",["^10",["^11",["^10",[["^6E"]]]]],"^13","Returns sketch object by id of canvas element of sketch."],"~$stroke",["^ ","^O","Color","^P",null,"^Q",["^ ","^O","Color","^R","1.0","^S","Setting","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",9,"^1D",["^ ","^15",false,"^19",4,"^16",["^10",[["^3I"],["^3I","^2N"],["~$x","~$y","~$z"],["~$x","~$y","~$z","~$a"]]],"^[",["^10",[["^3I"],["^3I","^2N"],["~$x","~$y","~$z"],["~$x","~$y","~$z","~$a"]]],"^18",["^10",[null,null,null,null]]],"^V","stroke()","^W",3,"^X",true,"^Y",4058,"^Z",4058,"^[",["^10",["^11",["^10",[["^3I"],["^3I","^2N"],["~$x","~$y","~$z"],["~$x","~$y","~$z","~$a"]]]]],"^13","Sets the color used to draw lines and borders around shapes. This\n  color is either specified in terms of the RGB or HSB color depending\n  on the current color-mode (the default color space is RGB, with\n  each value in the range from 0 to 255)."],"^R","1.0","^B","~$quil.core/stroke","^15",false,"^S","Setting","^T","resources/public/js/development/quil/core.cljc","^U",9,"^1D",["^ ","^15",false,"^19",4,"^16",["^10",[["^3I"],["^3I","^2N"],["~$x","~$y","~$z"],["~$x","~$y","~$z","~$a"]]],"^[",["^10",[["^3I"],["^3I","^2N"],["~$x","~$y","~$z"],["~$x","~$y","~$z","~$a"]]],"^18",["^10",[null,null,null,null]]],"^V","stroke()","^16",["^10",[["^3I"],["^3I","^2N"],["~$x","~$y","~$z"],["~$x","~$y","~$z","~$a"]]],"^17",null,"^18",["^10",[null,null,null,null]],"^W",1,"^X",true,"^Y",4052,"^Z",4058,"^19",4,"^1:",true,"^[",["^10",[["^3I"],["^3I","^2N"],["~$x","~$y","~$z"],["~$x","~$y","~$z","~$a"]]],"^13","Sets the color used to draw lines and borders around shapes. This\n  color is either specified in terms of the RGB or HSB color depending\n  on the current color-mode (the default color space is RGB, with\n  each value in the range from 0 to 255)."],"~$mouse-pressed?",["^ ","^O","Input","^P",null,"^Q",["^ ","^O","Input","^R","1.0","^S","Mouse","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",17,"^V","mousePressed","^W",3,"^X",true,"^Y",2602,"^Z",2602,"^[",["^10",["^11",["^10",[[]]]]],"^13","Variable storing if a mouse button is pressed. The value of the\n  system variable mousePressed is true if a mouse button is pressed\n  and false if a button is not pressed."],"^R","1.0","^B","~$quil.core/mouse-pressed?","^15",false,"^S","Mouse","^T","resources/public/js/development/quil/core.cljc","^U",17,"^V","mousePressed","^16",["^10",[[]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",2596,"^Z",2602,"^19",0,"^1:",true,"^[",["^10",["^11",["^10",[[]]]]],"^13","Variable storing if a mouse button is pressed. The value of the\n  system variable mousePressed is true if a mouse button is pressed\n  and false if a button is not pressed."],"~$key-pressed?",["^ ","^O","Input","^P",null,"^Q",["^ ","^O","Input","^R","1.0","^S","Keyboard","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",15,"^V","keyPressed","^W",3,"^X",true,"^Y",2213,"^Z",2213,"^[",["^10",["^11",["^10",[[]]]]],"^13","true if any key is currently pressed, false otherwise."],"^R","1.0","^B","~$quil.core/key-pressed?","^15",false,"^S","Keyboard","^T","resources/public/js/development/quil/core.cljc","^U",15,"^V","keyPressed","^16",["^10",[[]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",2207,"^Z",2213,"^19",0,"^1:",true,"^[",["^10",["^11",["^10",[[]]]]],"^13","true if any key is currently pressed, false otherwise."],"~$quadratic-vertex",["^ ","^O","Shape","^P",null,"^Q",["^ ","^O","Shape","^R","2.0","^S","Vertex","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",19,"^1D",["^ ","^15",false,"^19",6,"^16",["^10",[["~$cx","~$cy","~$x3","~$y3"],["^6N","^6O","~$cz","^6P","^6Q","~$z3"]]],"^[",["^10",[["^6N","^6O","^6P","^6Q"],["^6N","^6O","^6R","^6P","^6Q","^6S"]]],"^18",["^10",[null,null]]],"^V","quadraticVertex()","^W",3,"^X",true,"^Y",3140,"^Z",3140,"^[",["^10",["^11",["^10",[["^6N","^6O","^6P","^6Q"],["^6N","^6O","^6R","^6P","^6Q","^6S"]]]]],"^13","Specifies vertex coordinates for quadratic Bezier curves. Each call to\n  quadratic-vertex defines the position of one control points and one\n  anchor point of a Bezier curve, adding a new segment to a line or shape.\n  The first time quadratic-vertex is used within a begin-shape call, it\n  must be prefaced with a call to vertex to set the first anchor point.\n  This function must be used between begin-shape and end-shape and only\n  when there is no MODE parameter specified to begin-shape. Using the 3D\n  version requires rendering with :p3d."],"^R","2.0","^B","~$quil.core/quadratic-vertex","^15",false,"^S","Vertex","^T","resources/public/js/development/quil/core.cljc","^U",19,"^1D",["^ ","^15",false,"^19",6,"^16",["^10",[["^6N","^6O","^6P","^6Q"],["^6N","^6O","^6R","^6P","^6Q","^6S"]]],"^[",["^10",[["^6N","^6O","^6P","^6Q"],["^6N","^6O","^6R","^6P","^6Q","^6S"]]],"^18",["^10",[null,null]]],"^V","quadraticVertex()","^16",["^10",[["^6N","^6O","^6P","^6Q"],["^6N","^6O","^6R","^6P","^6Q","^6S"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",3134,"^Z",3140,"^19",6,"^1:",true,"^[",["^10",[["^6N","^6O","^6P","^6Q"],["^6N","^6O","^6R","^6P","^6Q","^6S"]]],"^13","Specifies vertex coordinates for quadratic Bezier curves. Each call to\n  quadratic-vertex defines the position of one control points and one\n  anchor point of a Bezier curve, adding a new segment to a line or shape.\n  The first time quadratic-vertex is used within a begin-shape call, it\n  must be prefaced with a call to vertex to set the first anchor point.\n  This function must be used between begin-shape and end-shape and only\n  when there is no MODE parameter specified to begin-shape. Using the 3D\n  version requires rendering with :p3d."],"~$texture-wrap-modes",["^ ","^B","~$quil.core/texture-wrap-modes","^T","resources/public/js/development/quil/core.cljc","^Y",45,"^W",1,"^Z",72,"^U",20,"^Q",["^ ","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^Y",72,"^W",2,"^Z",72,"^U",20],"^1=","^1>"],"~$noise-seed",["^ ","^O","Math","^P",null,"^Q",["^ ","^O","Math","^R","1.0","^S","Random","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",13,"^V","noiseSeed()","^W",3,"^X",true,"^Y",2741,"^Z",2741,"^[",["^10",["^11",["^10",[["^34"]]]]],"^13","Sets the seed value for noise. By default, noise produces different\n  results each time the program is run. Set the value parameter to a\n  constant to return the same pseudo-random numbers each time the\n  software is run."],"^R","1.0","^B","~$quil.core/noise-seed","^15",false,"^S","Random","^T","resources/public/js/development/quil/core.cljc","^U",13,"^V","noiseSeed()","^16",["^10",[["^34"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",2735,"^Z",2741,"^19",1,"^1:",true,"^[",["^10",["^11",["^10",[["^34"]]]]],"^13","Sets the seed value for noise. By default, noise produces different\n  results each time the program is run. Set the value parameter to a\n  constant to return the same pseudo-random numbers each time the\n  software is run."],"~$apply-matrix",["^ ","^O","Transform","^P",null,"^Q",["^ ","^O","Transform","^R","1.0","^S",null,"^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",15,"^V","applyMatrix()","^W",3,"^X",true,"^Y",397,"^Z",397,"^[",["^10",["^11",["^10",[["~$n00","~$n01","~$n02","~$n03","~$n10","~$n11","~$n12","~$n13","~$n20","~$n21","~$n22","~$n23","~$n30","~$n31","~$n32","~$n33"]]]]],"^13","Multiplies the current matrix by the one specified through the\n  parameters. This is very slow because it will try to calculate the\n  inverse of the transform, so avoid it whenever possible. The\n  equivalent function in OpenGL is glMultMatrix()."],"^R","1.0","^B","~$quil.core/apply-matrix","^15",false,"^S",null,"^T","resources/public/js/development/quil/core.cljc","^U",15,"^V","applyMatrix()","^16",["^10",[["^6Z","^6[","^70","^71","^72","^73","^74","^75","^76","^77","^78","^79","^7:","^7;","^7<","^7="]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",391,"^Z",397,"^19",16,"^1:",true,"^[",["^10",["^11",["^10",[["^6Z","^6[","^70","^71","^72","^73","^74","^75","^76","^77","^78","^79","^7:","^7;","^7<","^7="]]]]],"^13","Multiplies the current matrix by the one specified through the\n  parameters. This is very slow because it will try to calculate the\n  inverse of the transform, so avoid it whenever possible. The\n  equivalent function in OpenGL is glMultMatrix()."],"~$copy",["^ ","^O","Image","^P",null,"^Q",["^ ","^O","Image","^R","1.0","^S","Pixels","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",7,"^1D",["^ ","^15",false,"^19",4,"^16",["^10",[[["~$sx","~$sy","~$swidth","~$sheight"],["^1Q","^1R","^1S","^1T"]],["^1U",["^7@","^7A","^7B","^7C"],["^1Q","^1R","^1S","^1T"]],["^1U","^1V",["^7@","^7A","^7B","^7C"],["^1Q","^1R","^1S","^1T"]]]],"^[",["^10",[[["^7@","^7A","^7B","^7C"],["^1Q","^1R","^1S","^1T"]],["^1U",["^7@","^7A","^7B","^7C"],["^1Q","^1R","^1S","^1T"]],["^1U","^1V",["^7@","^7A","^7B","^7C"],["^1Q","^1R","^1S","^1T"]]]],"^18",["^10",[null,null,null]]],"^V","copy()","^W",3,"^X",true,"^Y",1112,"^Z",1112,"^[",["^10",["^11",["^10",[[["^7@","^7A","^7B","^7C"],["^1Q","^1R","^1S","^1T"]],["^1U",["^7@","^7A","^7B","^7C"],["^1Q","^1R","^1S","^1T"]],["^1U","^1V",["^7@","^7A","^7B","^7C"],["^1Q","^1R","^1S","^1T"]]]]]],"^13","Copies a region of pixels from the one image to another. If src-img\n  is not specified it defaults to current-graphics. If dest-img is not\n  specified - it defaults to current-graphics. If the source\n  and destination regions aren't the same size, it will automatically\n  resize the source pixels to fit the specified target region. No\n  alpha information is used in the process, however if the source\n  image has an alpha channel set, it will be copied as well. "],"^R","1.0","^B","~$quil.core/copy","^15",false,"^S","Pixels","^T","resources/public/js/development/quil/core.cljc","^U",7,"^1D",["^ ","^15",false,"^19",4,"^16",["^10",[[["^7@","^7A","^7B","^7C"],["^1Q","^1R","^1S","^1T"]],["^1U",["^7@","^7A","^7B","^7C"],["^1Q","^1R","^1S","^1T"]],["^1U","^1V",["^7@","^7A","^7B","^7C"],["^1Q","^1R","^1S","^1T"]]]],"^[",["^10",[[["^7@","^7A","^7B","^7C"],["^1Q","^1R","^1S","^1T"]],["^1U",["^7@","^7A","^7B","^7C"],["^1Q","^1R","^1S","^1T"]],["^1U","^1V",["^7@","^7A","^7B","^7C"],["^1Q","^1R","^1S","^1T"]]]],"^18",["^10",[null,null,null]]],"^V","copy()","^16",["^10",[[["^7@","^7A","^7B","^7C"],["^1Q","^1R","^1S","^1T"]],["^1U",["^7@","^7A","^7B","^7C"],["^1Q","^1R","^1S","^1T"]],["^1U","^1V",["^7@","^7A","^7B","^7C"],["^1Q","^1R","^1S","^1T"]]]],"^17",null,"^18",["^10",[null,null,null]],"^W",1,"^X",true,"^Y",1106,"^Z",1112,"^19",4,"^1:",true,"^[",["^10",[[["^7@","^7A","^7B","^7C"],["^1Q","^1R","^1S","^1T"]],["^1U",["^7@","^7A","^7B","^7C"],["^1Q","^1R","^1S","^1T"]],["^1U","^1V",["^7@","^7A","^7B","^7C"],["^1Q","^1R","^1S","^1T"]]]],"^13","Copies a region of pixels from the one image to another. If src-img\n  is not specified it defaults to current-graphics. If dest-img is not\n  specified - it defaults to current-graphics. If the source\n  and destination regions aren't the same size, it will automatically\n  resize the source pixels to fit the specified target region. No\n  alpha information is used in the process, however if the source\n  image has an alpha channel set, it will be copied as well. "],"~$random-3d",["^ ","^O","Math","^P",null,"^Q",["^ ","^O","Math","^R","2.6.1","^S","Random","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",12,"^V",null,"^W",3,"^X",true,"^Y",3208,"^Z",3208,"^[",["^10",["^11",["^10",[[]]]]],"^13","Returns a new 3D unit vector with a random direction"],"^R","2.6.1","^B","~$quil.core/random-3d","^15",false,"^S","Random","^T","resources/public/js/development/quil/core.cljc","^U",12,"^V",null,"^16",["^10",[[]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",3202,"^Z",3208,"^19",0,"^1:",true,"^[",["^10",["^11",["^10",[[]]]]],"^13","Returns a new 3D unit vector with a random direction"],"~$begin-shape",["^ ","^O","Shape","^P",null,"^Q",["^ ","^O","Shape","^R","1.0","^S","Vertex","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",14,"^1D",["^ ","^15",false,"^19",1,"^16",["^10",[[],["^1G"]]],"^[",["^10",[[],["^1G"]]],"^18",["^10",[null,null]]],"^V","beginShape()","^W",3,"^X",true,"^Y",636,"^Z",636,"^[",["^10",["^11",["^10",[[],["^1G"]]]]],"^13","Enables the creation of complex forms. begin-shape begins recording\n  vertices for a shape and end-shape stops recording. Use the mode\n  keyword to specify which shape create from the provided\n  vertices. With no mode specified, the shape can be any irregular\n  polygon.\n\n  The available mode keywords are :points, :lines, :triangles,\n                                  :triangle-fan, :triangle-strip,\n                                  :quads, :quad-strip.\n\n  After calling the begin-shape function, a series of vertex commands\n  must follow. To stop drawing the shape, call end-shape. The vertex\n  function with two parameters specifies a position in 2D and the\n  vertex function with three parameters specifies a position in\n  3D. Each shape will be outlined with the current stroke color and\n  filled with the fill color.\n\n  Transformations such as translate, rotate, and scale do not work\n  within begin-shape. It is also not possible to use other shapes,\n  such as ellipse or rect within begin-shape."],"^R","1.0","^B","~$quil.core/begin-shape","^15",false,"^S","Vertex","^T","resources/public/js/development/quil/core.cljc","^U",14,"^1D",["^ ","^15",false,"^19",1,"^16",["^10",[[],["^1G"]]],"^[",["^10",[[],["^1G"]]],"^18",["^10",[null,null]]],"^V","beginShape()","^16",["^10",[[],["^1G"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",630,"^Z",636,"^19",1,"^1:",true,"^[",["^10",[[],["^1G"]]],"^13","Enables the creation of complex forms. begin-shape begins recording\n  vertices for a shape and end-shape stops recording. Use the mode\n  keyword to specify which shape create from the provided\n  vertices. With no mode specified, the shape can be any irregular\n  polygon.\n\n  The available mode keywords are :points, :lines, :triangles,\n                                  :triangle-fan, :triangle-strip,\n                                  :quads, :quad-strip.\n\n  After calling the begin-shape function, a series of vertex commands\n  must follow. To stop drawing the shape, call end-shape. The vertex\n  function with two parameters specifies a position in 2D and the\n  vertex function with three parameters specifies a position in\n  3D. Each shape will be outlined with the current stroke color and\n  filled with the fill color.\n\n  Transformations such as translate, rotate, and scale do not work\n  within begin-shape. It is also not possible to use other shapes,\n  such as ellipse or rect within begin-shape."],"~$set-state!",["^ ","^O","State","^P",null,"^Q",["^ ","^O","State","^R","1.0","^S",null,"^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",13,"^1D",["^ ","^15",true,"^19",0,"^16",[["^10",["~$state-vals"]]],"^[",["^10",[["~$&","^7J"]]],"^18",["^10",[null]]],"^W",3,"^X",true,"^Y",238,"^Z",238,"^[",["^10",["^11",["^10",[["~$&","^7J"]]]]],"^13","Set sketch-specific state. May only be called once (ideally in the\n  setup fn).  Subsequent calls have no effect.\n\n  Example:\n  (set-state! :foo 1 :bar (atom true) :baz (/ (width) 2))"],"^R","1.0","^B","~$quil.core/set-state!","^15",true,"^S",null,"^T","resources/public/js/development/quil/core.cljc","^U",13,"^1D",["^ ","^15",true,"^19",0,"^16",[["^10",["^7J"]]],"^[",["^10",[["~$&","^7J"]]],"^18",["^10",[null]]],"^16",[["^10",["^7J"]]],"^17",null,"^18",["^10",[null]],"^W",1,"^X",true,"^Y",233,"^Z",238,"^19",0,"^1:",true,"^[",["^10",[["~$&","^7J"]]],"^13","Set sketch-specific state. May only be called once (ideally in the\n  setup fn).  Subsequent calls have no effect.\n\n  Example:\n  (set-state! :foo 1 :bar (atom true) :baz (/ (width) 2))"],"~$stroke-join",["^ ","^O","Shape","^P",null,"^Q",["^ ","^O","Shape","^R","1.0","^S","Attributes","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",14,"^V","strokeJoin()","^W",3,"^X",true,"^Y",4096,"^Z",4096,"^[",["^10",["^11",["^10",[["~$join-mode"]]]]],"^13","Sets the style of the joints which connect line\n  segments. These joints are either mitered, beveled, or rounded and\n  specified with the corresponding parameters :miter, :bevel, and\n  :round. The default joint is :miter.\n\n  This function is not available with the :p2d, :p3d, or :opengl\n  renderers."],"^R","1.0","^B","~$quil.core/stroke-join","^15",false,"^S","Attributes","^T","resources/public/js/development/quil/core.cljc","^U",14,"^V","strokeJoin()","^16",["^10",[["^7M"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",4090,"^Z",4096,"^19",1,"^1:",true,"^[",["^10",["^11",["^10",[["^7M"]]]]],"^13","Sets the style of the joints which connect line\n  segments. These joints are either mitered, beveled, or rounded and\n  specified with the corresponding parameters :miter, :bevel, and\n  :round. The default joint is :miter.\n\n  This function is not available with the :p2d, :p3d, or :opengl\n  renderers."],"~$cos",["^ ","^O","Math","^P",null,"^Q",["^ ","^O","Math","^R","1.0","^S","Trigonometry","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",6,"^V","cos()","^W",3,"^X",false,"^Y",1138,"^Z",1138,"^[",["^10",["^11",["^10",[["^12"]]]]],"^13","Calculates the cosine of an angle. This function expects the values\n  of the angle parameter to be provided in radians (values from 0 to\n  Math/PI*2). Values are returned in the range -1 to 1."],"^R","1.0","^B","~$quil.core/cos","^15",false,"^S","Trigonometry","^T","resources/public/js/development/quil/core.cljc","^U",6,"^V","cos()","^16",["^10",[["^12"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",false,"^Y",1132,"^Z",1138,"^19",1,"^1:",true,"^[",["^10",["^11",["^10",[["^12"]]]]],"^13","Calculates the cosine of an angle. This function expects the values\n  of the angle parameter to be provided in radians (values from 0 to\n  Math/PI*2). Values are returned in the range -1 to 1."],"~$curve-tightness",["^ ","^O","Shape","^P",null,"^Q",["^ ","^O","Shape","^R","1.0","^S","Curves","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",18,"^V","curveTightness()","^W",3,"^X",true,"^Y",1389,"^Z",1389,"^[",["^10",["^11",["^10",[["~$ti"]]]]],"^13","Modifies the quality of forms created with curve and\n  curve-vertex. The parameter squishy determines how the curve fits\n  to the vertex points. The value 0.0 is the default value for\n  squishy (this value defines the curves to be Catmull-Rom splines)\n  and the value 1.0 connects all the points with straight\n  lines. Values within the range -5.0 and 5.0 will deform the curves\n  but will leave them recognizable and as values increase in\n  magnitude, they will continue to deform."],"^R","1.0","^B","~$quil.core/curve-tightness","^15",false,"^S","Curves","^T","resources/public/js/development/quil/core.cljc","^U",18,"^V","curveTightness()","^16",["^10",[["^7R"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",1383,"^Z",1389,"^19",1,"^1:",true,"^[",["^10",["^11",["^10",[["^7R"]]]]],"^13","Modifies the quality of forms created with curve and\n  curve-vertex. The parameter squishy determines how the curve fits\n  to the vertex points. The value 0.0 is the default value for\n  squishy (this value defines the curves to be Catmull-Rom splines)\n  and the value 1.0 connects all the points with straight\n  lines. Values within the range -5.0 and 5.0 will deform the curves\n  but will leave them recognizable and as values increase in\n  magnitude, they will continue to deform."],"~$tan",["^ ","^O","Math","^P",null,"^Q",["^ ","^O","Math","^R","1.0","^S","Trigonometry","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",6,"^V","tan()","^W",3,"^X",false,"^Y",4128,"^Z",4128,"^[",["^10",["^11",["^10",[["^12"]]]]],"^13","Calculates the ratio of the sine and cosine of an angle. This\n  function expects the values of the angle parameter to be provided in\n  radians (values from 0 to PI*2). Values are returned in the range\n  infinity to -infinity."],"^R","1.0","^B","~$quil.core/tan","^15",false,"^S","Trigonometry","^T","resources/public/js/development/quil/core.cljc","^U",6,"^V","tan()","^16",["^10",[["^12"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",false,"^Y",4122,"^Z",4128,"^19",1,"^1:",true,"^[",["^10",["^11",["^10",[["^12"]]]]],"^13","Calculates the ratio of the sine and cosine of an angle. This\n  function expects the values of the angle parameter to be provided in\n  radians (values from 0 to PI*2). Values are returned in the range\n  infinity to -infinity."],"~$triangle",["^ ","^O","Shape","^P",null,"^Q",["^ ","^O","Shape","^R","1.0","^S","2D Primitives","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",11,"^V","triangle()","^W",3,"^X",true,"^Y",4525,"^Z",4525,"^[",["^10",["^11",["^10",[["^4D","^4E","^4F","^4G","^6P","^6Q"]]]]],"^13","A triangle is a plane created by connecting three points. The first\n  two arguments specify the first point, the middle two arguments\n  specify the second point, and the last two arguments specify the\n  third point."],"^R","1.0","^B","~$quil.core/triangle","^15",false,"^S","2D Primitives","^T","resources/public/js/development/quil/core.cljc","^U",11,"^V","triangle()","^16",["^10",[["^4D","^4E","^4F","^4G","^6P","^6Q"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",4519,"^Z",4525,"^19",6,"^1:",true,"^[",["^10",["^11",["^10",[["^4D","^4E","^4F","^4G","^6P","^6Q"]]]]],"^13","A triangle is a plane created by connecting three points. The first\n  two arguments specify the first point, the middle two arguments\n  specify the second point, and the last two arguments specify the\n  third point."],"~$emissive",["^ ","^O","Lights, Camera","^P",null,"^Q",["^ ","^O","Lights, Camera","^R","1.0","^S","Material Properties","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",11,"^1D",["^ ","^15",false,"^19",3,"^16",["^10",[["~$c"],["~$r","~$g","~$b"]]],"^[",["^10",[["~$c"],["~$r","~$g","~$b"]]],"^18",["^10",[null,null]]],"^V","emissive()","^W",3,"^X",true,"^Y",1593,"^Z",1593,"^[",["^10",["^11",["^10",[["~$c"],["~$r","~$g","~$b"]]]]],"^13","Sets the emissive color of the material used for drawing shapes\n  drawn to the screen. Used in combination with ambient, specular, and\n  shininess in setting the material properties of shapes.\n\n  If passed one arg - it is assumed to be an int (i.e. a color),\n  multiple args are converted to floats."],"^R","1.0","^B","~$quil.core/emissive","^15",false,"^S","Material Properties","^T","resources/public/js/development/quil/core.cljc","^U",11,"^1D",["^ ","^15",false,"^19",3,"^16",["^10",[["~$c"],["~$r","~$g","~$b"]]],"^[",["^10",[["~$c"],["~$r","~$g","~$b"]]],"^18",["^10",[null,null]]],"^V","emissive()","^16",["^10",[["~$c"],["~$r","~$g","~$b"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",1587,"^Z",1593,"^19",3,"^1:",true,"^[",["^10",[["~$c"],["~$r","~$g","~$b"]]],"^13","Sets the emissive color of the material used for drawing shapes\n  drawn to the screen. Used in combination with ambient, specular, and\n  shininess in setting the material properties of shapes.\n\n  If passed one arg - it is assumed to be an int (i.e. a color),\n  multiple args are converted to floats."],"~$clear-no-fill-cljs",["^ ","^P",null,"^Q",["^ ","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^Y",1690,"^W",11,"^Z",1690,"^U",29,"^3[",true,"^[",["^10",["^11",["^10",[["^21"]]]]],"^13","Sets custom property on graphcs object indicating that it has\n  fill color."],"^3[",true,"^B","~$quil.core/clear-no-fill-cljs","^15",false,"^T","resources/public/js/development/quil/core.cljc","^U",29,"^16",["^10",[["^21"]]],"^17",null,"^18",["^10",[null,null]],"^W",4,"^Y",1690,"^Z",1690,"^19",1,"^1:",true,"^[",["^10",["^11",["^10",[["^21"]]]]],"^13","Sets custom property on graphcs object indicating that it has\n  fill color."],"~$sketch",["^ ","^O","Environment","^P",null,"^Q",["^ ","^O","Environment","^R","1.0","^S",null,"^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",9,"^1D",["^ ","^15",true,"^19",0,"^16",[["^10",["~$opts"]]],"^[",["^10",[["~$&","^81"]]],"^18",["^10",[null]]],"^W",3,"^X",false,"^Y",4740,"^Z",4740,"^[",["^10",["^11",["^10",[["~$&","^81"]]]]],"^13","Create and start a new visualisation applet. Can be used to create\n  new sketches programmatically. See documentation for 'defsketch' for\n  list of available options."],"^R","1.0","^B","~$quil.core/sketch","^15",true,"^S",null,"^T","resources/public/js/development/quil/core.cljc","^U",9,"^1D",["^ ","^15",true,"^19",0,"^16",[["^10",["^81"]]],"^[",["^10",[["~$&","^81"]]],"^18",["^10",[null]]],"^16",[["^10",["^81"]]],"^17",null,"^18",["^10",[null]],"^W",1,"^X",false,"^Y",4736,"^Z",4740,"^19",0,"^1:",true,"^[",["^10",[["~$&","^81"]]],"^13","Create and start a new visualisation applet. Can be used to create\n  new sketches programmatically. See documentation for 'defsketch' for\n  list of available options."],"~$color",["^ ","^O","Color","^P",null,"^Q",["^ ","^O","Color","^R","1.0","^S","Creating & Reading","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",8,"^1D",["^ ","^15",false,"^19",4,"^16",["^10",[["^2M"],["^2M","^2N"],["~$r","~$g","~$b"],["~$r","~$g","~$b","~$a"]]],"^[",["^10",[["^2M"],["^2M","^2N"],["~$r","~$g","~$b"],["~$r","~$g","~$b","~$a"]]],"^18",["^10",[null,null,null,null]]],"^V","color()","^W",3,"^X",true,"^Y",1020,"^Z",1020,"^[",["^10",["^11",["^10",[["^2M"],["^2M","^2N"],["~$r","~$g","~$b"],["~$r","~$g","~$b","~$a"]]]]],"^13","Creates an integer representation of a color The parameters are\n  interpreted as RGB or HSB values depending on the current\n  color-mode. The default mode is RGB values from 0 to 255 and\n  therefore, the function call (color 255 204 0) will return a bright\n  yellow. Args are cast to floats.\n\n  r - red or hue value\n  g - green or saturation value\n  b - blue or brightness value\n  a - alpha value"],"^R","1.0","^B","~$quil.core/color","^15",false,"^S","Creating & Reading","^T","resources/public/js/development/quil/core.cljc","^U",8,"^1D",["^ ","^15",false,"^19",4,"^16",["^10",[["^2M"],["^2M","^2N"],["~$r","~$g","~$b"],["~$r","~$g","~$b","~$a"]]],"^[",["^10",[["^2M"],["^2M","^2N"],["~$r","~$g","~$b"],["~$r","~$g","~$b","~$a"]]],"^18",["^10",[null,null,null,null]]],"^V","color()","^16",["^10",[["^2M"],["^2M","^2N"],["~$r","~$g","~$b"],["~$r","~$g","~$b","~$a"]]],"^17",null,"^18",["^10",[null,null,null,null]],"^W",1,"^X",true,"^Y",1014,"^Z",1020,"^19",4,"^1:",true,"^[",["^10",[["^2M"],["^2M","^2N"],["~$r","~$g","~$b"],["~$r","~$g","~$b","~$a"]]],"^13","Creates an integer representation of a color The parameters are\n  interpreted as RGB or HSB values depending on the current\n  color-mode. The default mode is RGB values from 0 to 255 and\n  therefore, the function call (color 255 204 0) will return a bright\n  yellow. Args are cast to floats.\n\n  r - red or hue value\n  g - green or saturation value\n  b - blue or brightness value\n  a - alpha value"],"~$arc",["^ ","^O","Shape","^P",null,"^Q",["^ ","^O","Shape","^R","1.0","^S","2D Primitives","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",6,"^V","arc()","^W",3,"^X",true,"^Y",423,"^Z",423,"^[",["^10",["^11",["^10",[["~$x","~$y","^1O","^1P","~$start","~$stop"]]]]],"^13","Draws an arc in the display window. Arcs are drawn along the outer\n  edge of an ellipse defined by the x, y, width and height\n  parameters. The origin or the arc's ellipse may be changed with the\n  ellipse-mode function. The start and stop parameters specify the\n  angles at which to draw the arc. The mode is either :open, :chord or :pie."],"^R","1.0","^B","~$quil.core/arc","^15",false,"^S","2D Primitives","^T","resources/public/js/development/quil/core.cljc","^U",6,"^V","arc()","^16",["^10",[["~$x","~$y","^1O","^1P","^86","^87"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",417,"^Z",423,"^19",6,"^1:",true,"^[",["^10",["^11",["^10",[["~$x","~$y","^1O","^1P","^86","^87"]]]]],"^13","Draws an arc in the display window. Arcs are drawn along the outer\n  edge of an ellipse defined by the x, y, width and height\n  parameters. The origin or the arc's ellipse may be changed with the\n  ellipse-mode function. The start and stop parameters specify the\n  angles at which to draw the arc. The mode is either :open, :chord or :pie."],"~$text-align",["^ ","^O","Typography","^P",null,"^Q",["^ ","^O","Typography","^R","1.0","^S","Attributes","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",13,"^1D",["^ ","^15",false,"^19",2,"^16",["^10",[["~$align"],["~$align-x","~$align-y"]]],"^[",["^10",[["^8:"],["^8;","^8<"]]],"^18",["^10",[null,null]]],"^V","textAlign()","^W",3,"^X",true,"^Y",4220,"^Z",4220,"^[",["^10",["^11",["^10",[["^8:"],["^8;","^8<"]]]]],"^13","Sets the current alignment for drawing text. Available modes are:\n\n  horizontal - :left, :center, and :right\n  vertical   - :top, :bottom, :center, and :baseline\n\n  An optional second parameter specifies the vertical alignment\n  mode. :baseline is the default. The :top and :center parameters are\n  straightforward. The :bottom parameter offsets the line based on the\n  current text-descent. For multiple lines, the final line will be\n  aligned to the bottom, with the previous lines appearing above it.\n\n  When using text with width and height parameters, :baseline is\n  ignored, and treated as :top. (Otherwise, text would by default draw\n  outside the box, since :baseline is the default setting. :baseline is\n  not a useful drawing mode for text drawn in a rectangle.)\n\n  The vertical alignment is based on the value of text-ascent, which\n  many fonts do not specify correctly. It may be necessary to use a\n  hack and offset by a few pixels by hand so that the offset looks\n  correct. To do this as less of a hack, use some percentage of\n  text-ascent or text-descent so that the hack works even if you\n  change the size of the font."],"^R","1.0","^B","~$quil.core/text-align","^15",false,"^S","Attributes","^T","resources/public/js/development/quil/core.cljc","^U",13,"^1D",["^ ","^15",false,"^19",2,"^16",["^10",[["^8:"],["^8;","^8<"]]],"^[",["^10",[["^8:"],["^8;","^8<"]]],"^18",["^10",[null,null]]],"^V","textAlign()","^16",["^10",[["^8:"],["^8;","^8<"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",4214,"^Z",4220,"^19",2,"^1:",true,"^[",["^10",[["^8:"],["^8;","^8<"]]],"^13","Sets the current alignment for drawing text. Available modes are:\n\n  horizontal - :left, :center, and :right\n  vertical   - :top, :bottom, :center, and :baseline\n\n  An optional second parameter specifies the vertical alignment\n  mode. :baseline is the default. The :top and :center parameters are\n  straightforward. The :bottom parameter offsets the line based on the\n  current text-descent. For multiple lines, the final line will be\n  aligned to the bottom, with the previous lines appearing above it.\n\n  When using text with width and height parameters, :baseline is\n  ignored, and treated as :top. (Otherwise, text would by default draw\n  outside the box, since :baseline is the default setting. :baseline is\n  not a useful drawing mode for text drawn in a rectangle.)\n\n  The vertical alignment is based on the value of text-ascent, which\n  many fonts do not specify correctly. It may be necessary to use a\n  hack and offset by a few pixels by hand so that the offset looks\n  correct. To do this as less of a hack, use some percentage of\n  text-ascent or text-descent so that the hack works even if you\n  change the size of the font."],"~$text-width",["^ ","^O","Typography","^P",null,"^Q",["^ ","^O","Typography","^R","1.0","^S","Attributes","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",13,"^V","textWidth()","^W",3,"^X",true,"^Y",4418,"^Z",4418,"^[",["^10",["^11",["^10",[["~$data"]]]]],"^13","Calculates and returns the width of any text string."],"^R","1.0","^B","~$quil.core/text-width","^15",false,"^S","Attributes","^T","resources/public/js/development/quil/core.cljc","^U",13,"^V","textWidth()","^16",["^10",[["^8?"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",4412,"^Z",4418,"^19",1,"^1:",true,"^[",["^10",["^11",["^10",[["^8?"]]]]],"^13","Calculates and returns the width of any text string."],"~$mouse-x",["^ ","^O","Input","^P",null,"^Q",["^ ","^O","Input","^R","1.0","^S","Mouse","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",10,"^V","mouseX","^W",3,"^X",true,"^Y",2616,"^Z",2616,"^[",["^10",["^11",["^10",[[]]]]],"^13","Current horizontal coordinate of the mouse."],"^R","1.0","^B","~$quil.core/mouse-x","^15",false,"^S","Mouse","^T","resources/public/js/development/quil/core.cljc","^U",10,"^V","mouseX","^16",["^10",[[]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",2610,"^Z",2616,"^19",0,"^1:",true,"^[",["^10",["^11",["^10",[[]]]]],"^13","Current horizontal coordinate of the mouse."],"~$TWO-PI",["^ ","^B","~$quil.core/TWO-PI","^T","resources/public/js/development/quil/core.cljc","^Y",82,"^W",1,"^Z",82,"^U",12,"^Q",["^ ","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^Y",82,"^W",6,"^Z",82,"^U",12],"^1=","^4O"],"~$mag",["^ ","^O","Math","^P",null,"^Q",["^ ","^O","Math","^R","1.0","^S","Calculation","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",6,"^1D",["^ ","^15",false,"^19",3,"^16",["^10",[["~$a","~$b"],["~$a","~$b","~$c"]]],"^[",["^10",[["~$a","~$b"],["~$a","~$b","~$c"]]],"^18",["^10",[null,null]]],"^V","mag()","^W",3,"^X",false,"^Y",2438,"^Z",2438,"^[",["^10",["^11",["^10",[["~$a","~$b"],["~$a","~$b","~$c"]]]]],"^13","Calculates the magnitude (or length) of a vector. A vector is a\n  direction in space commonly used in computer graphics and linear\n  algebra. Because it has no start position, the magnitude of a vector\n  can be thought of as the distance from coordinate (0,0) to its (x,y)\n  value. Therefore, mag is a shortcut for writing (dist 0 0 x y)."],"^R","1.0","^B","~$quil.core/mag","^15",false,"^S","Calculation","^T","resources/public/js/development/quil/core.cljc","^U",6,"^1D",["^ ","^15",false,"^19",3,"^16",["^10",[["~$a","~$b"],["~$a","~$b","~$c"]]],"^[",["^10",[["~$a","~$b"],["~$a","~$b","~$c"]]],"^18",["^10",[null,null]]],"^V","mag()","^16",["^10",[["~$a","~$b"],["~$a","~$b","~$c"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",false,"^Y",2432,"^Z",2438,"^19",3,"^1:",true,"^[",["^10",[["~$a","~$b"],["~$a","~$b","~$c"]]],"^13","Calculates the magnitude (or length) of a vector. A vector is a\n  direction in space commonly used in computer graphics and linear\n  algebra. Because it has no start position, the magnitude of a vector\n  can be thought of as the distance from coordinate (0,0) to its (x,y)\n  value. Therefore, mag is a shortcut for writing (dist 0 0 x y)."],"~$exit",["^ ","^O","Structure","^P",null,"^Q",["^ ","^O","Structure","^R","1.0","^S",null,"^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",7,"^V","exit()","^W",3,"^X",true,"^Y",1668,"^Z",1668,"^[",["^10",["^11",["^10",[[]]]]],"^13","Quits/stops/exits the program.  Rather than terminating\n  immediately, exit will cause the sketch to exit after draw has\n  completed (or after setup completes if called during the setup\n  method). "],"^R","1.0","^B","~$quil.core/exit","^15",false,"^S",null,"^T","resources/public/js/development/quil/core.cljc","^U",7,"^V","exit()","^16",["^10",[[]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",1662,"^Z",1668,"^19",0,"^1:",true,"^[",["^10",["^11",["^10",[[]]]]],"^13","Quits/stops/exits the program.  Rather than terminating\n  immediately, exit will cause the sketch to exit after draw has\n  completed (or after setup completes if called during the setup\n  method). "],"~$map-range",["^ ","^O","Math","^P",null,"^Q",["^ ","^O","Math","^R","1.0","^S","Calculation","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",12,"^V","map()","^W",3,"^X",false,"^Y",2457,"^Z",2457,"^[",["^10",["^11",["^10",[["^34","~$low1","~$high1","~$low2","~$high2"]]]]],"^13","Re-maps a number from one range to another.\n\n  Numbers outside the range are not clamped to 0 and 1, because\n  out-of-range values are often intentional and useful."],"^R","1.0","^B","~$quil.core/map-range","^15",false,"^S","Calculation","^T","resources/public/js/development/quil/core.cljc","^U",12,"^V","map()","^16",["^10",[["^34","^8J","^8K","^8L","^8M"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",false,"^Y",2451,"^Z",2457,"^19",5,"^1:",true,"^[",["^10",["^11",["^10",[["^34","^8J","^8K","^8L","^8M"]]]]],"^13","Re-maps a number from one range to another.\n\n  Numbers outside the range are not clamped to 0 and 1, because\n  out-of-range values are often intentional and useful."],"~$model-x",["^ ","^O","Lights, Camera","^P",null,"^Q",["^ ","^O","Lights, Camera","^R","1.0","^S","Coordinates","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",10,"^V","modelX()","^W",3,"^X",true,"^Y",2520,"^Z",2520,"^[",["^10",["^11",["^10",[["~$x","~$y","~$z"]]]]],"^13","Returns the three-dimensional x, y, z position in model space. This\n  returns the x value for a given coordinate based on the current set\n  of transformations (scale, rotate, translate, etc.) The x value can\n  be used to place an object in space relative to the location of the\n  original point once the transformations are no longer in use."],"^R","1.0","^B","~$quil.core/model-x","^15",false,"^S","Coordinates","^T","resources/public/js/development/quil/core.cljc","^U",10,"^V","modelX()","^16",["^10",[["~$x","~$y","~$z"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",2514,"^Z",2520,"^19",3,"^1:",true,"^[",["^10",["^11",["^10",[["~$x","~$y","~$z"]]]]],"^13","Returns the three-dimensional x, y, z position in model space. This\n  returns the x value for a given coordinate based on the current set\n  of transformations (scale, rotate, translate, etc.) The x value can\n  be used to place an object in space relative to the location of the\n  original point once the transformations are no longer in use."],"~$sqrt",["^ ","^O","Math","^P",null,"^Q",["^ ","^O","Math","^R","1.0","^S","Calculation","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",7,"^V","sqrt()","^W",3,"^X",false,"^Y",4005,"^Z",4005,"^[",["^10",["^11",["^10",[["~$a"]]]]],"^13","Calculates the square root of a number. The square root of a number\n  is always positive, even though there may be a valid negative\n  root. The square root s of number a is such that (= a (* s s)) . It\n  is the opposite of squaring."],"^R","1.0","^B","~$quil.core/sqrt","^15",false,"^S","Calculation","^T","resources/public/js/development/quil/core.cljc","^U",7,"^V","sqrt()","^16",["^10",[["~$a"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",false,"^Y",3999,"^Z",4005,"^19",1,"^1:",true,"^[",["^10",["^11",["^10",[["~$a"]]]]],"^13","Calculates the square root of a number. The square root of a number\n  is always positive, even though there may be a valid negative\n  root. The square root s of number a is such that (= a (* s s)) . It\n  is the opposite of squaring."],"~$saturation",["^ ","^O","Color","^P",null,"^Q",["^ ","^O","Color","^R","1.0","^S","Creating & Reading","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",13,"^V","saturation()","^W",3,"^X",true,"^Y",3556,"^Z",3556,"^[",["^10",["^11",["^10",[["~$c"]]]]],"^13","Extracts the saturation value from a color."],"^R","1.0","^B","~$quil.core/saturation","^15",false,"^S","Creating & Reading","^T","resources/public/js/development/quil/core.cljc","^U",13,"^V","saturation()","^16",["^10",[["~$c"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",3550,"^Z",3556,"^19",1,"^1:",true,"^[",["^10",["^11",["^10",[["~$c"]]]]],"^13","Extracts the saturation value from a color."],"~$prc-print",["^ ","^O","Output","^P",null,"^Q",["^ ","^O","Output","^R","1.0","^S","Text area","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",15,"^W",6,"~:require-bindings",true,"^Y",172,"^Z",172,"^[",["^10",["^11",["^10",[["~$msg"]]]]],"^13","Writes to the console area of the Processing environment.\n  This is often helpful for looking at the data a program is producing.\n  The companion function println() works like print(), but creates a new line of text for each call to the function.\n   Individual elements can be separated with quotes (\"\") and joined with the addition operator (+). "],"^R","1.0","^B","~$quil.core/prc-print","^15",false,"^S","Text area","^T","resources/public/js/development/quil/core.cljc","^U",15,"^16",["^10",[["^8W"]]],"^17",null,"^18",["^10",[null,null]],"^W",4,"^8V",true,"^Y",167,"^Z",172,"^19",1,"^1:",true,"^[",["^10",["^11",["^10",[["^8W"]]]]],"^13","Writes to the console area of the Processing environment.\n  This is often helpful for looking at the data a program is producing.\n  The companion function println() works like print(), but creates a new line of text for each call to the function.\n   Individual elements can be separated with quotes (\"\") and joined with the addition operator (+). "],"~$text-font",["^ ","^O","Typography","^P",null,"^Q",["^ ","^O","Typography","^R","1.0","^S","Loading & Displaying","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",12,"^1D",["^ ","^15",false,"^19",2,"^16",["^10",[["~$font"],["^8Z","^2H"]]],"^[",["^10",[["^8Z"],["^8Z","^2H"]]],"^18",["^10",[null,null]]],"^V","textFont()","^W",3,"^X",true,"^Y",4285,"^Z",4285,"^[",["^10",["^11",["^10",[["^8Z"],["^8Z","^2H"]]]]],"^13","Sets the current font that will be drawn with the text\n  function. Fonts must be loaded with load-font before it can be\n  used. This font will be used in all subsequent calls to the text\n  function. If no size parameter is input, the font will appear at its\n  original size until it is changed with text-size.\n\n  Because fonts are usually bitmaped, you should create fonts at the\n  sizes that will be used most commonly. Using textFont without the\n  size parameter will result in the cleanest-looking text.\n\n  With the default (JAVA2D) and PDF renderers, it's also possible to\n  enable the use of native fonts via the command\n  (hint :enable-native-fonts). This will produce vector text in JAVA2D\n  sketches and PDF output in cases where the vector data is available:\n  when the font is still installed, or the font is created via the\n  create-font fn"],"^R","1.0","^B","~$quil.core/text-font","^15",false,"^S","Loading & Displaying","^T","resources/public/js/development/quil/core.cljc","^U",12,"^1D",["^ ","^15",false,"^19",2,"^16",["^10",[["^8Z"],["^8Z","^2H"]]],"^[",["^10",[["^8Z"],["^8Z","^2H"]]],"^18",["^10",[null,null]]],"^V","textFont()","^16",["^10",[["^8Z"],["^8Z","^2H"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",4279,"^Z",4285,"^19",2,"^1:",true,"^[",["^10",[["^8Z"],["^8Z","^2H"]]],"^13","Sets the current font that will be drawn with the text\n  function. Fonts must be loaded with load-font before it can be\n  used. This font will be used in all subsequent calls to the text\n  function. If no size parameter is input, the font will appear at its\n  original size until it is changed with text-size.\n\n  Because fonts are usually bitmaped, you should create fonts at the\n  sizes that will be used most commonly. Using textFont without the\n  size parameter will result in the cleanest-looking text.\n\n  With the default (JAVA2D) and PDF renderers, it's also possible to\n  enable the use of native fonts via the command\n  (hint :enable-native-fonts). This will produce vector text in JAVA2D\n  sketches and PDF output in cases where the vector data is available:\n  when the font is still installed, or the font is created via the\n  create-font fn"],"~$scale",["^ ","^O","Transform","^P",null,"^Q",["^ ","^O","Transform","^R","1.0","^S",null,"^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",8,"^1D",["^ ","^15",false,"^19",3,"^16",["^10",[["~$s"],["^7@","^7A"],["^7@","^7A","~$sz"]]],"^[",["^10",[["~$s"],["^7@","^7A"],["^7@","^7A","^91"]]],"^18",["^10",[null,null,null]]],"^V","scale()","^W",3,"^X",true,"^Y",3605,"^Z",3605,"^[",["^10",["^11",["^10",[["~$s"],["^7@","^7A"],["^7@","^7A","^91"]]]]],"^13","Increases or decreases the size of a shape by expanding and\n  contracting vertices. Objects always scale from their relative\n  origin to the coordinate system. Scale values are specified as\n  decimal percentages. For example, the function call (scale 2)\n  increases the dimension of a shape by 200%. Transformations apply to\n  everything that happens after and subsequent calls to the function\n  multiply the effect. For example, calling (scale 2) and then\n  (scale 1.5) is the same as (scale 3). If scale is called within\n  draw, the transformation is reset when the loop begins again. Using\n  this fuction with the z parameter requires specfying :p3d or :opengl\n  as the renderer. This function can be further controlled by\n  push-matrix and pop-matrix."],"^R","1.0","^B","~$quil.core/scale","^15",false,"^S",null,"^T","resources/public/js/development/quil/core.cljc","^U",8,"^1D",["^ ","^15",false,"^19",3,"^16",["^10",[["~$s"],["^7@","^7A"],["^7@","^7A","^91"]]],"^[",["^10",[["~$s"],["^7@","^7A"],["^7@","^7A","^91"]]],"^18",["^10",[null,null,null]]],"^V","scale()","^16",["^10",[["~$s"],["^7@","^7A"],["^7@","^7A","^91"]]],"^17",null,"^18",["^10",[null,null,null]],"^W",1,"^X",true,"^Y",3599,"^Z",3605,"^19",3,"^1:",true,"^[",["^10",[["~$s"],["^7@","^7A"],["^7@","^7A","^91"]]],"^13","Increases or decreases the size of a shape by expanding and\n  contracting vertices. Objects always scale from their relative\n  origin to the coordinate system. Scale values are specified as\n  decimal percentages. For example, the function call (scale 2)\n  increases the dimension of a shape by 200%. Transformations apply to\n  everything that happens after and subsequent calls to the function\n  multiply the effect. For example, calling (scale 2) and then\n  (scale 1.5) is the same as (scale 3). If scale is called within\n  draw, the transformation is reset when the loop begins again. Using\n  this fuction with the z parameter requires specfying :p3d or :opengl\n  as the renderer. This function can be further controlled by\n  push-matrix and pop-matrix."],"~$defsketch",["^ ","^O","Environment","^P",null,"^Q",["^ ","^O","Environment","^R","1.0","^S",null,"^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",12,"^1D",["^ ","^15",true,"^19",3,"^16",[["^10",["^1[","^20","~$app-name","~$options"]]],"^[",["^10",[["^1[","^20","^94","~$&","^95"]]],"^18",["^10",[null]]],"^W",3,"^X",false,"^Y",4752,"^23",true,"^Z",4752,"^[",["^10",["^11",["^10",[["^94","~$&","^95"]]]]],"^13","Define and start a sketch and bind it to a var with the symbol\n  app-name. If any of the options to the various callbacks are\n  symbols, it wraps them in a call to var to ensure they aren't\n  inlined and that redefinitions to the original fns are reflected in\n  the visualisation.\n\n  Available options:\n\n   :size           - A vector of width and height for the sketch or :fullscreen.\n                     Defaults to [500 300]. If you're using :fullscreen you may\n                     want to enable present mode - :features [:present]\n\n   :renderer       - Specifies the renderer type. One of :p2d, :p3d, :java2d,\n                     :opengl, :pdf). Defaults to :java2d. :dxf renderer\n                     can't be used as sketch renderer. Use begin-raw method\n                     instead. In clojurescript only :p2d and :p3d renderers\n                     are supported.\n\n   :output-file    - Specifies an output file path. Only used in :pdf mode.\n                     Not supported in clojurescript.\n\n   :title          - A string which will be displayed at the top of\n                     the sketch window. Not supported in clojurescript.\n\n   :features       - A vector of keywords customizing sketch behaviour.\n                     Supported features:\n\n                     :keep-on-top - Sketch window will always be above other\n                                    windows. Note: some platforms might not\n                                    support always-on-top windows.\n                                    Not supported in clojurescript.\n\n                     :exit-on-close - Shutdown JVM  when sketch is closed.\n                                      Not supported in clojurescript.\n\n                     :resizable - Makes sketch resizable.\n                                  Not supported in clojurescript.\n\n                     :no-safe-fns - Do not catch and print exceptions thrown\n                                    inside functions provided to sketch (like\n                                    draw, mouse-click, key-pressed and\n                                    other). By default all exceptions thrown\n                                    inside these functions are catched. This\n                                    prevents sketch from breaking when bad\n                                    function was provided and allows you to\n                                    fix it and reload it on fly. You can\n                                    disable this behaviour by enabling\n                                    :no-safe-fns feature.\n                                    Not supported in clojurescript.\n\n                     :present - Switch to present mode (fullscreen without\n                                borders, OS panels). You may want to use\n                                this feature together with :size :fullscreen.\n                                Not supported in clojurescript.\n\n                     :no-start - Disables autostart if sketch was created using\n                                 defsketch macro. To start sketch you have to\n                                 call function created defsketch.\n                                 Supported only in clojurescript.\n\n                     :global-key-events - Allows a sketch to receive any\n                                          keyboard event sent to the page,\n                                          regardless of whether the canvas it is\n                                          loaded in has focus or not.\n                                          Supported only in clojurescript.\n\n                     Usage example: :features [:keep-on-top :present]\n\n   :bgcolor        - Sets background color for unused space in present mode.\n                     Color is specified in hex format: #XXXXXX.\n                     Example: :bgcolor \"#00FFFF\" (cyan background)\n                     Not supported in clojurescript.\n\n   :display        - Sets what display should be used by this sketch.\n                     Displays are numbered starting from 0. Example: :display 1.\n                     Not supported in clojurescript.\n\n   :setup          - A function to be called once when setting the sketch up.\n\n   :draw           - A function to be repeatedly called at most n times per\n                     second where n is the target frame-rate set for\n                     the visualisation.\n\n   :host           - String id of canvas element or DOM element itself.\n                     Specifies host for the sketch. Must be specified in sketch,\n                     may be omitted in defsketch. If ommitted in defsketch,\n                     :host is set to the name of the sketch. If element with\n                     specified id is not found on the page and page is empty -\n                     new canvas element will be created. Used in clojurescript.\n\n   :focus-gained   - Called when the sketch gains focus.\n                     Not supported in clojurescript.\n\n   :focus-lost     - Called when the sketch loses focus.\n                     Not supported in clojurescript.\n\n   :mouse-entered  - Called when the mouse enters the sketch window.\n\n   :mouse-exited   - Called when the mouse leaves the sketch window\n\n   :mouse-pressed  - Called every time a mouse button is pressed.\n\n   :mouse-released - Called every time a mouse button is released.\n\n   :mouse-clicked  - called once after a mouse button has been pressed\n                     and then released.\n\n   :mouse-moved    - Called every time the mouse moves and a button is\n                     not pressed.\n\n   :mouse-dragged  - Called every time the mouse moves and a button is\n                     pressed.\n\n   :mouse-wheel    - Called every time mouse wheel is rotated.\n                     Takes 1 argument - wheel rotation, an int.\n                     Negative values if the mouse wheel was rotated\n                     up/away from the user, and positive values\n                     if the mouse wheel was rotated down/ towards the user\n\n   :key-pressed    - Called every time any key is pressed.\n\n   :key-released   - Called every time any key is released.\n\n   :key-typed      - Called once every time non-modifier keys are\n                     pressed.\n\n   :on-close       - Called once, when sketch is closed\n                     Not supported in clojurescript.\n\n   :middleware     - Vector of middleware to be applied to the sketch.\n                     Middleware will be applied in the same order as in comp\n                     function: [f g] will be applied as (f (g options)).\n\n   :settings       - cousin of :setup. A function to be called once when\n                     setting sketch up. Should be used only for (smooth) and\n                     (no-smooth). Due to Processing limitations these functions\n                     cannot be used neither in :setup nor in :draw."],"^R","1.0","^B","~$quil.core/defsketch","^15",true,"^S",null,"^T","resources/public/js/development/quil/core.cljc","^U",12,"^1D",["^ ","^15",true,"^19",3,"^16",[["^10",["^1[","^20","^94","^95"]]],"^[",["^10",[["^1[","^20","^94","~$&","^95"]]],"^18",["^10",[null]]],"^16",[["^10",["^1[","^20","^94","^95"]]],"^17",null,"^18",["^10",[null]],"^W",1,"^X",false,"^Y",4748,"^23",true,"^Z",4752,"^19",3,"^1:",false,"^[",["^10",[["^1[","^20","^94","~$&","^95"]]],"^13","Define and start a sketch and bind it to a var with the symbol\n  app-name. If any of the options to the various callbacks are\n  symbols, it wraps them in a call to var to ensure they aren't\n  inlined and that redefinitions to the original fns are reflected in\n  the visualisation.\n\n  Available options:\n\n   :size           - A vector of width and height for the sketch or :fullscreen.\n                     Defaults to [500 300]. If you're using :fullscreen you may\n                     want to enable present mode - :features [:present]\n\n   :renderer       - Specifies the renderer type. One of :p2d, :p3d, :java2d,\n                     :opengl, :pdf). Defaults to :java2d. :dxf renderer\n                     can't be used as sketch renderer. Use begin-raw method\n                     instead. In clojurescript only :p2d and :p3d renderers\n                     are supported.\n\n   :output-file    - Specifies an output file path. Only used in :pdf mode.\n                     Not supported in clojurescript.\n\n   :title          - A string which will be displayed at the top of\n                     the sketch window. Not supported in clojurescript.\n\n   :features       - A vector of keywords customizing sketch behaviour.\n                     Supported features:\n\n                     :keep-on-top - Sketch window will always be above other\n                                    windows. Note: some platforms might not\n                                    support always-on-top windows.\n                                    Not supported in clojurescript.\n\n                     :exit-on-close - Shutdown JVM  when sketch is closed.\n                                      Not supported in clojurescript.\n\n                     :resizable - Makes sketch resizable.\n                                  Not supported in clojurescript.\n\n                     :no-safe-fns - Do not catch and print exceptions thrown\n                                    inside functions provided to sketch (like\n                                    draw, mouse-click, key-pressed and\n                                    other). By default all exceptions thrown\n                                    inside these functions are catched. This\n                                    prevents sketch from breaking when bad\n                                    function was provided and allows you to\n                                    fix it and reload it on fly. You can\n                                    disable this behaviour by enabling\n                                    :no-safe-fns feature.\n                                    Not supported in clojurescript.\n\n                     :present - Switch to present mode (fullscreen without\n                                borders, OS panels). You may want to use\n                                this feature together with :size :fullscreen.\n                                Not supported in clojurescript.\n\n                     :no-start - Disables autostart if sketch was created using\n                                 defsketch macro. To start sketch you have to\n                                 call function created defsketch.\n                                 Supported only in clojurescript.\n\n                     :global-key-events - Allows a sketch to receive any\n                                          keyboard event sent to the page,\n                                          regardless of whether the canvas it is\n                                          loaded in has focus or not.\n                                          Supported only in clojurescript.\n\n                     Usage example: :features [:keep-on-top :present]\n\n   :bgcolor        - Sets background color for unused space in present mode.\n                     Color is specified in hex format: #XXXXXX.\n                     Example: :bgcolor \"#00FFFF\" (cyan background)\n                     Not supported in clojurescript.\n\n   :display        - Sets what display should be used by this sketch.\n                     Displays are numbered starting from 0. Example: :display 1.\n                     Not supported in clojurescript.\n\n   :setup          - A function to be called once when setting the sketch up.\n\n   :draw           - A function to be repeatedly called at most n times per\n                     second where n is the target frame-rate set for\n                     the visualisation.\n\n   :host           - String id of canvas element or DOM element itself.\n                     Specifies host for the sketch. Must be specified in sketch,\n                     may be omitted in defsketch. If ommitted in defsketch,\n                     :host is set to the name of the sketch. If element with\n                     specified id is not found on the page and page is empty -\n                     new canvas element will be created. Used in clojurescript.\n\n   :focus-gained   - Called when the sketch gains focus.\n                     Not supported in clojurescript.\n\n   :focus-lost     - Called when the sketch loses focus.\n                     Not supported in clojurescript.\n\n   :mouse-entered  - Called when the mouse enters the sketch window.\n\n   :mouse-exited   - Called when the mouse leaves the sketch window\n\n   :mouse-pressed  - Called every time a mouse button is pressed.\n\n   :mouse-released - Called every time a mouse button is released.\n\n   :mouse-clicked  - called once after a mouse button has been pressed\n                     and then released.\n\n   :mouse-moved    - Called every time the mouse moves and a button is\n                     not pressed.\n\n   :mouse-dragged  - Called every time the mouse moves and a button is\n                     pressed.\n\n   :mouse-wheel    - Called every time mouse wheel is rotated.\n                     Takes 1 argument - wheel rotation, an int.\n                     Negative values if the mouse wheel was rotated\n                     up/away from the user, and positive values\n                     if the mouse wheel was rotated down/ towards the user\n\n   :key-pressed    - Called every time any key is pressed.\n\n   :key-released   - Called every time any key is released.\n\n   :key-typed      - Called once every time non-modifier keys are\n                     pressed.\n\n   :on-close       - Called once, when sketch is closed\n                     Not supported in clojurescript.\n\n   :middleware     - Vector of middleware to be applied to the sketch.\n                     Middleware will be applied in the same order as in comp\n                     function: [f g] will be applied as (f (g options)).\n\n   :settings       - cousin of :setup. A function to be called once when\n                     setting sketch up. Should be used only for (smooth) and\n                     (no-smooth). Due to Processing limitations these functions\n                     cannot be used neither in :setup nor in :draw."],"~$no-stroke",["^ ","^O","Color","^P",null,"^Q",["^ ","^O","Color","^R","1.0","^S","Setting","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",12,"^V","noStroke()","^W",3,"^X",true,"^Y",2834,"^Z",2834,"^[",["^10",["^11",["^10",[[]]]]],"^13","Disables drawing the stroke (outline). If both no-stroke and\n  no-fill are called, nothing will be drawn to the screen."],"^R","1.0","^B","~$quil.core/no-stroke","^15",false,"^S","Setting","^T","resources/public/js/development/quil/core.cljc","^U",12,"^V","noStroke()","^16",["^10",[[]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",2828,"^Z",2834,"^19",0,"^1:",true,"^[",["^10",["^11",["^10",[[]]]]],"^13","Disables drawing the stroke (outline). If both no-stroke and\n  no-fill are called, nothing will be drawn to the screen."],"~$end-camera",["^ ","^O","Lights, Camera","^P",null,"^Q",["^ ","^O","Lights, Camera","^R","1.0","^S","Camera","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",13,"^V","endCamera()","^W",3,"^X",true,"^Y",1611,"^Z",1611,"^[",["^10",["^11",["^10",[[]]]]],"^13","Unsets the matrix mode from the camera matrix. See begin-camera."],"^R","1.0","^B","~$quil.core/end-camera","^15",false,"^S","Camera","^T","resources/public/js/development/quil/core.cljc","^U",13,"^V","endCamera()","^16",["^10",[[]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",1605,"^Z",1611,"^19",0,"^1:",true,"^[",["^10",["^11",["^10",[[]]]]],"^13","Unsets the matrix mode from the camera matrix. See begin-camera."],"~$random-seed",["^ ","^O","Math","^P",null,"^Q",["^ ","^O","Math","^R","1.0","^S","Random","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",14,"^V","randomSeed()","^W",3,"^X",true,"^Y",3243,"^Z",3243,"^[",["^10",["^11",["^10",[["~$w"]]]]],"^13","Sets the seed value for random. By default, random produces\n  different results each time the program is run. Set the value\n  parameter to a constant to return the same pseudo-random numbers\n  each time the software is run."],"^R","1.0","^B","~$quil.core/random-seed","^15",false,"^S","Random","^T","resources/public/js/development/quil/core.cljc","^U",14,"^V","randomSeed()","^16",["^10",[["~$w"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",3237,"^Z",3243,"^19",1,"^1:",true,"^[",["^10",["^11",["^10",[["~$w"]]]]],"^13","Sets the seed value for random. By default, random produces\n  different results each time the program is run. Set the value\n  parameter to a constant to return the same pseudo-random numbers\n  each time the software is run."],"~$model-z",["^ ","^O","Lights, Camera","^P",null,"^Q",["^ ","^O","Lights, Camera","^R","1.0","^S","Coordinates","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",10,"^V","modelZ()","^W",3,"^X",true,"^Y",2550,"^Z",2550,"^[",["^10",["^11",["^10",[["~$x","~$y","~$z"]]]]],"^13","Returns the three-dimensional x, y, z position in model space. This\n  returns the z value for a given coordinate based on the current set\n  of transformations (scale, rotate, translate, etc.) The z value can\n  be used to place an object in space relative to the location of the\n  original point once the transformations are no longer in use."],"^R","1.0","^B","~$quil.core/model-z","^15",false,"^S","Coordinates","^T","resources/public/js/development/quil/core.cljc","^U",10,"^V","modelZ()","^16",["^10",[["~$x","~$y","~$z"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",2544,"^Z",2550,"^19",3,"^1:",true,"^[",["^10",["^11",["^10",[["~$x","~$y","~$z"]]]]],"^13","Returns the three-dimensional x, y, z position in model space. This\n  returns the z value for a given coordinate based on the current set\n  of transformations (scale, rotate, translate, etc.) The z value can\n  be used to place an object in space relative to the location of the\n  original point once the transformations are no longer in use."],"~$light-specular",["^ ","^O","Lights, Camera","^P",null,"^Q",["^ ","^O","Lights, Camera","^R","1.0","^S","Lights","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",17,"^V","lightSpecular()","^W",3,"^X",true,"^Y",2303,"^Z",2303,"^[",["^10",["^11",["^10",[["~$r","~$g","~$b"]]]]],"^13","Sets the specular color for lights. Like fill, it affects only the\n  elements which are created after it in the code. Specular refers to\n  light which bounces off a surface in a perferred direction (rather\n  than bouncing in all directions like a diffuse light) and is used\n  for creating highlights. The specular quality of a light interacts\n  with the specular material qualities set through the specular and\n  shininess functions."],"^R","1.0","^B","~$quil.core/light-specular","^15",false,"^S","Lights","^T","resources/public/js/development/quil/core.cljc","^U",17,"^V","lightSpecular()","^16",["^10",[["~$r","~$g","~$b"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",2297,"^Z",2303,"^19",3,"^1:",true,"^[",["^10",["^11",["^10",[["~$r","~$g","~$b"]]]]],"^13","Sets the specular color for lights. Like fill, it affects only the\n  elements which are created after it in the code. Specular refers to\n  light which bounces off a surface in a perferred direction (rather\n  than bouncing in all directions like a diffuse light) and is used\n  for creating highlights. The specular quality of a light interacts\n  with the specular material qualities set through the specular and\n  shininess functions."],"~$key-as-keyword",["^ ","^O","Input","^P",null,"^Q",["^ ","^O","Input","^R","1.6","^S","Keyboard","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",17,"^V",null,"^W",3,"^X",true,"^Y",4917,"^Z",4917,"^[",["^10",["^11",["^10",[[]]]]],"^13","Returns a keyword representing the currently pressed key. Modifier\n  keys are represented as: :up, :down, :left, :right, :alt, :control,\n  :shift, :command, :f1-24"],"^R","1.6","^B","~$quil.core/key-as-keyword","^15",false,"^S","Keyboard","^T","resources/public/js/development/quil/core.cljc","^U",17,"^V",null,"^16",["^10",[[]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",4912,"^Z",4917,"^19",0,"^1:",true,"^[",["^10",["^11",["^10",[[]]]]],"^13","Returns a keyword representing the currently pressed key. Modifier\n  keys are represented as: :up, :down, :left, :right, :alt, :control,\n  :shift, :command, :f1-24"],"~$dist",["^ ","^O","Math","^P",null,"^Q",["^ ","^O","Math","^R","1.0","^S","Calculation","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",7,"^1D",["^ ","^15",false,"^19",6,"^16",["^10",[["^4D","^4E","^4F","^4G"],["^4D","^4E","^5J","^4F","^4G","^5M"]]],"^[",["^10",[["^4D","^4E","^4F","^4G"],["^4D","^4E","^5J","^4F","^4G","^5M"]]],"^18",["^10",[null,null]]],"^V","dist()","^W",3,"^X",false,"^Y",1495,"^Z",1495,"^[",["^10",["^11",["^10",[["^4D","^4E","^4F","^4G"],["^4D","^4E","^5J","^4F","^4G","^5M"]]]]],"^13","Calculates the distance between two points"],"^R","1.0","^B","~$quil.core/dist","^15",false,"^S","Calculation","^T","resources/public/js/development/quil/core.cljc","^U",7,"^1D",["^ ","^15",false,"^19",6,"^16",["^10",[["^4D","^4E","^4F","^4G"],["^4D","^4E","^5J","^4F","^4G","^5M"]]],"^[",["^10",[["^4D","^4E","^4F","^4G"],["^4D","^4E","^5J","^4F","^4G","^5M"]]],"^18",["^10",[null,null]]],"^V","dist()","^16",["^10",[["^4D","^4E","^4F","^4G"],["^4D","^4E","^5J","^4F","^4G","^5M"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",false,"^Y",1489,"^Z",1495,"^19",6,"^1:",true,"^[",["^10",[["^4D","^4E","^4F","^4G"],["^4D","^4E","^5J","^4F","^4G","^5M"]]],"^13","Calculates the distance between two points"],"^8",["^ ","^B","~$quil.core/PI","^T","resources/public/js/development/quil/core.cljc","^Y",78,"^W",10,"^Z",78,"^U",17,"^Q",["^ ","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^Y",78,"^W",15,"^Z",78,"^U",17],"^1=","~$js"],"~$norm",["^ ","^O","Math","^P",null,"^Q",["^ ","^O","Math","^R","1.0","^S","Calculation","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",7,"^V","norm()","^W",3,"^X",true,"^Y",2795,"^Z",2795,"^[",["^10",["^11",["^10",[["^34","^86","^87"]]]]],"^13","Normalize a value to exist between 0 and 1 (inclusive)."],"^R","1.0","^B","~$quil.core/norm","^15",false,"^S","Calculation","^T","resources/public/js/development/quil/core.cljc","^U",7,"^V","norm()","^16",["^10",[["^34","^86","^87"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",2789,"^Z",2795,"^19",3,"^1:",true,"^[",["^10",["^11",["^10",[["^34","^86","^87"]]]]],"^13","Normalize a value to exist between 0 and 1 (inclusive)."],"~$end-shape",["^ ","^O","Shape","^P",null,"^Q",["^ ","^O","Shape","^R","1.0","^S","Vertex","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",12,"^1D",["^ ","^15",false,"^19",1,"^16",["^10",[[],["^1G"]]],"^[",["^10",[[],["^1G"]]],"^18",["^10",[null,null]]],"^V","endShape()","^W",3,"^X",true,"^Y",1648,"^Z",1648,"^[",["^10",["^11",["^10",[[],["^1G"]]]]],"^13","May only be called after begin-shape. When end-shape is called,\n  all of image data defined since the previous call to begin-shape is\n  written into the image buffer. The keyword :close may be passed to\n  close the shape (to connect the beginning and the end)."],"^R","1.0","^B","~$quil.core/end-shape","^15",false,"^S","Vertex","^T","resources/public/js/development/quil/core.cljc","^U",12,"^1D",["^ ","^15",false,"^19",1,"^16",["^10",[[],["^1G"]]],"^[",["^10",[[],["^1G"]]],"^18",["^10",[null,null]]],"^V","endShape()","^16",["^10",[[],["^1G"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",1642,"^Z",1648,"^19",1,"^1:",true,"^[",["^10",[[],["^1G"]]],"^13","May only be called after begin-shape. When end-shape is called,\n  all of image data defined since the previous call to begin-shape is\n  written into the image buffer. The keyword :close may be passed to\n  close the shape (to connect the beginning and the end)."],"~$fill",["^ ","^O","Color","^P",null,"^Q",["^ ","^O","Color","^R","1.0","^S","Setting","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",7,"^1D",["^ ","^15",false,"^19",4,"^16",["^10",[["^3I"],["^3I","^2N"],["~$r","~$g","~$b"],["~$r","~$g","~$b","~$a"]]],"^[",["^10",[["^3I"],["^3I","^2N"],["~$r","~$g","~$b"],["~$r","~$g","~$b","~$a"]]],"^18",["^10",[null,null,null,null]]],"^V","fill()","^W",3,"^X",true,"^Y",1739,"^Z",1739,"^[",["^10",["^11",["^10",[["^3I"],["^3I","^2N"],["~$r","~$g","~$b"],["~$r","~$g","~$b","~$a"]]]]],"^13","Sets the color used to fill shapes."],"^R","1.0","^B","~$quil.core/fill","^15",false,"^S","Setting","^T","resources/public/js/development/quil/core.cljc","^U",7,"^1D",["^ ","^15",false,"^19",4,"^16",["^10",[["^3I"],["^3I","^2N"],["~$r","~$g","~$b"],["~$r","~$g","~$b","~$a"]]],"^[",["^10",[["^3I"],["^3I","^2N"],["~$r","~$g","~$b"],["~$r","~$g","~$b","~$a"]]],"^18",["^10",[null,null,null,null]]],"^V","fill()","^16",["^10",[["^3I"],["^3I","^2N"],["~$r","~$g","~$b"],["~$r","~$g","~$b","~$a"]]],"^17",null,"^18",["^10",[null,null,null,null]],"^W",1,"^X",true,"^Y",1733,"^Z",1739,"^19",4,"^1:",true,"^[",["^10",[["^3I"],["^3I","^2N"],["~$r","~$g","~$b"],["~$r","~$g","~$b","~$a"]]],"^13","Sets the color used to fill shapes."],"~$with-translation",["^ ","^O","Transform","^P",null,"^Q",["^ ","^O","Transform","^R","1.0","^S","Utility Macros","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",19,"^1D",["^ ","^15",true,"^19",3,"^16",[["^10",["^1[","^20","~$translation-vector","^22"]]],"^[",["^10",[["^1[","^20","^9N","~$&","^22"]]],"^18",["^10",[null]]],"^V",null,"^W",3,"^X",true,"^Y",4686,"^23",true,"^Z",4686,"^[",["^10",["^11",["^10",[["^9N","~$&","^22"]]]]],"^13","Performs body with translation, restores current transformation on\n  exit."],"^R","1.0","^B","~$quil.core/with-translation","^15",true,"^S","Utility Macros","^T","resources/public/js/development/quil/core.cljc","^U",19,"^1D",["^ ","^15",true,"^19",3,"^16",[["^10",["^1[","^20","^9N","^22"]]],"^[",["^10",[["^1[","^20","^9N","~$&","^22"]]],"^18",["^10",[null]]],"^V",null,"^16",[["^10",["^1[","^20","^9N","^22"]]],"^17",null,"^18",["^10",[null]],"^W",1,"^X",true,"^Y",4680,"^23",true,"^Z",4686,"^19",3,"^1:",false,"^[",["^10",[["^1[","^20","^9N","~$&","^22"]]],"^13","Performs body with translation, restores current transformation on\n  exit."],"~$reset-matrix",["^ ","^O","Transform","^P",null,"^Q",["^ ","^O","Transform","^R","1.0","^S",null,"^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",15,"^V","resetMatrix()","^W",3,"^X",true,"^Y",3383,"^Z",3383,"^[",["^10",["^11",["^10",[[]]]]],"^13","Replaces the current matrix with the identity matrix. The\n  equivalent function in OpenGL is glLoadIdentity()"],"^R","1.0","^B","~$quil.core/reset-matrix","^15",false,"^S",null,"^T","resources/public/js/development/quil/core.cljc","^U",15,"^V","resetMatrix()","^16",["^10",[[]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",3377,"^Z",3383,"^19",0,"^1:",true,"^[",["^10",["^11",["^10",[[]]]]],"^13","Replaces the current matrix with the identity matrix. The\n  equivalent function in OpenGL is glLoadIdentity()"],"~$emissive-float",["^ ","^O","Lights, Camera","^P",null,"^Q",["^ ","^O","Lights, Camera","^R","1.0","^S","Material Properties","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",17,"^1D",["^ ","^15",false,"^19",3,"^16",["^10",[["~$float-val"],["~$r","~$g","~$b"]]],"^[",["^10",[["^9S"],["~$r","~$g","~$b"]]],"^18",["^10",[null,null]]],"^V","emissive()","^W",3,"^X",true,"^Y",1566,"^Z",1566,"^[",["^10",["^11",["^10",[["^9S"],["~$r","~$g","~$b"]]]]],"^13","Sets the emissive color of the material used for drawing shapes\n drawn to the screen. Used in combination with ambient, specular, and\n shininess in setting the material properties of shapes. Converts all\n args to floats"],"^R","1.0","^B","~$quil.core/emissive-float","^15",false,"^S","Material Properties","^T","resources/public/js/development/quil/core.cljc","^U",17,"^1D",["^ ","^15",false,"^19",3,"^16",["^10",[["^9S"],["~$r","~$g","~$b"]]],"^[",["^10",[["^9S"],["~$r","~$g","~$b"]]],"^18",["^10",[null,null]]],"^V","emissive()","^16",["^10",[["^9S"],["~$r","~$g","~$b"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",1560,"^Z",1566,"^19",3,"^1:",true,"^[",["^10",[["^9S"],["~$r","~$g","~$b"]]],"^13","Sets the emissive color of the material used for drawing shapes\n drawn to the screen. Used in combination with ambient, specular, and\n shininess in setting the material properties of shapes. Converts all\n args to floats"],"~$shape-modes",["^ ","^B","~$quil.core/shape-modes","^T","resources/public/js/development/quil/core.cljc","^Y",45,"^W",1,"^Z",48,"^U",13,"^Q",["^ ","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^Y",48,"^W",2,"^Z",48,"^U",13],"^1=","^1>"],"~$green",["^ ","^O","Color","^P",null,"^Q",["^ ","^O","Color","^R","1.0","^S","Creating & Reading","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",8,"^V","green()","^W",3,"^X",true,"^Y",1936,"^Z",1936,"^[",["^10",["^11",["^10",[["^57"]]]]],"^13","Extracts the green value from a color, scaled to match current\n  color-mode. This value is always returned as a float so be careful\n  not to assign it to an int value."],"^R","1.0","^B","~$quil.core/green","^15",false,"^S","Creating & Reading","^T","resources/public/js/development/quil/core.cljc","^U",8,"^V","green()","^16",["^10",[["^57"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",1930,"^Z",1936,"^19",1,"^1:",true,"^[",["^10",["^11",["^10",[["^57"]]]]],"^13","Extracts the green value from a color, scaled to match current\n  color-mode. This value is always returned as a float so be careful\n  not to assign it to an int value."],"~$HALF-PI",["^ ","^B","~$quil.core/HALF-PI","^T","resources/public/js/development/quil/core.cljc","^Y",79,"^W",1,"^Z",79,"^U",13,"^Q",["^ ","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^Y",79,"^W",6,"^Z",79,"^U",13],"^1=","^4O"],"~$begin-contour",["^ ","^O","Shape","^P",null,"^Q",["^ ","^O","Shape","^R","2.0","^S","Vertex","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",16,"^V","beginContour()","^W",3,"^X",true,"^Y",603,"^Z",603,"^[",["^10",["^11",["^10",[[]]]]],"^13","Use the begin-contour and end-contour function to create negative\n  shapes within shapes. These functions can only be within a\n  begin-shape/end-shape pair and they only work with the :p2d and :p3d\n  renderers."],"^R","2.0","^B","~$quil.core/begin-contour","^15",false,"^S","Vertex","^T","resources/public/js/development/quil/core.cljc","^U",16,"^V","beginContour()","^16",["^10",[[]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",597,"^Z",603,"^19",0,"^1:",true,"^[",["^10",["^11",["^10",[[]]]]],"^13","Use the begin-contour and end-contour function to create negative\n  shapes within shapes. These functions can only be within a\n  begin-shape/end-shape pair and they only work with the :p2d and :p3d\n  renderers."],"~$DEG-TO-RAD",["^ ","^B","~$quil.core/DEG-TO-RAD","^T","resources/public/js/development/quil/core.cljc","^Y",84,"^W",1,"^Z",84,"^U",16,"^Q",["^ ","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^Y",84,"^W",6,"^Z",84,"^U",16],"^1=","^4O"],"~$pow",["^ ","^O","Math","^P",null,"^Q",["^ ","^O","Math","^R","1.0","^S","Calculation","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",6,"^V","pow()","^W",3,"^X",false,"^Y",3030,"^Z",3030,"^[",["^10",["^11",["^10",[["~$num","~$exponent"]]]]],"^13","Facilitates exponential expressions. The pow() function is an\n  efficient way of multiplying numbers by themselves (or their\n  reciprocal) in large quantities. For example, (pow 3 5) is\n  equivalent to the expression (* 3 3 3 3 3) and (pow 3 -5) is\n  equivalent to (/ 1 (* 3 3 3 3 3))."],"^R","1.0","^B","~$quil.core/pow","^15",false,"^S","Calculation","^T","resources/public/js/development/quil/core.cljc","^U",6,"^V","pow()","^16",["^10",[["^:4","^:5"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",false,"^Y",3024,"^Z",3030,"^19",2,"^1:",true,"^[",["^10",["^11",["^10",[["^:4","^:5"]]]]],"^13","Facilitates exponential expressions. The pow() function is an\n  efficient way of multiplying numbers by themselves (or their\n  reciprocal) in large quantities. For example, (pow 3 5) is\n  equivalent to the expression (* 3 3 3 3 3) and (pow 3 -5) is\n  equivalent to (/ 1 (* 3 3 3 3 3))."],"~$box",["^ ","^O","Shape","^P",null,"^Q",["^ ","^O","Shape","^R","1.0","^S","3D Primitives","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",6,"^1D",["^ ","^15",false,"^19",3,"^16",["^10",[["^2H"],["^1O","^1P","~$depth"]]],"^[",["^10",[["^2H"],["^1O","^1P","^:8"]]],"^18",["^10",[null,null]]],"^V","box()","^W",3,"^X",true,"^Y",918,"^Z",918,"^[",["^10",["^11",["^10",[["^2H"],["^1O","^1P","^:8"]]]]],"^13","Creates an extruded rectangle."],"^R","1.0","^B","~$quil.core/box","^15",false,"^S","3D Primitives","^T","resources/public/js/development/quil/core.cljc","^U",6,"^1D",["^ ","^15",false,"^19",3,"^16",["^10",[["^2H"],["^1O","^1P","^:8"]]],"^[",["^10",[["^2H"],["^1O","^1P","^:8"]]],"^18",["^10",[null,null]]],"^V","box()","^16",["^10",[["^2H"],["^1O","^1P","^:8"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",912,"^Z",918,"^19",3,"^1:",true,"^[",["^10",[["^2H"],["^1O","^1P","^:8"]]],"^13","Creates an extruded rectangle."],"~$exp",["^ ","^O","Math","^P",null,"^Q",["^ ","^O","Math","^R","1.0","^S","Calculation","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",6,"^V","exp()","^W",3,"^X",false,"^Y",1682,"^Z",1682,"^[",["^10",["^11",["^10",[["^34"]]]]],"^13","Returns Euler's number e (2.71828...) raised to the power of the\n  value parameter."],"^R","1.0","^B","~$quil.core/exp","^15",false,"^S","Calculation","^T","resources/public/js/development/quil/core.cljc","^U",6,"^V","exp()","^16",["^10",[["^34"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",false,"^Y",1676,"^Z",1682,"^19",1,"^1:",true,"^[",["^10",["^11",["^10",[["^34"]]]]],"^13","Returns Euler's number e (2.71828...) raised to the power of the\n  value parameter."],"~$with-sketch",["^ ","^P",null,"^Q",["^ ","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^Y",192,"^W",11,"^Z",192,"^U",22,"^23",true,"^[",["^10",["^11",["^10",[["~$applet","~$&","^22"]]]]],"^1D",["^ ","^15",true,"^19",3,"^16",[["^10",["^1[","^20","^:=","^22"]]],"^[",["^10",[["^1[","^20","^:=","~$&","^22"]]],"^18",["^10",[null]]]],"^B","~$quil.core/with-sketch","^15",true,"^T","resources/public/js/development/quil/core.cljc","^U",22,"^1D",["^ ","^15",true,"^19",3,"^16",[["^10",["^1[","^20","^:=","^22"]]],"^[",["^10",[["^1[","^20","^:=","~$&","^22"]]],"^18",["^10",[null]]],"^16",[["^10",["^1[","^20","^:=","^22"]]],"^17",null,"^18",["^10",[null]],"^W",1,"^Y",192,"^23",true,"^Z",192,"^19",3,"^1:",false,"^[",["^10",[["^1[","^20","^:=","~$&","^22"]]]],"~$text-ascent",["^ ","^O","Typography","^P",null,"^Q",["^ ","^O","Typography","^R","1.0","^S","Metrics","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",14,"^V","textAscent()","^W",3,"^X",true,"^Y",4257,"^Z",4257,"^[",["^10",["^11",["^10",[[]]]]],"^13","Returns the ascent of the current font at its current size. This\n  information is useful for determining the height of the font above\n  the baseline. For example, adding the text-ascent and text-descent\n  values will give you the total height of the line."],"^R","1.0","^B","~$quil.core/text-ascent","^15",false,"^S","Metrics","^T","resources/public/js/development/quil/core.cljc","^U",14,"^V","textAscent()","^16",["^10",[[]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",4251,"^Z",4257,"^19",0,"^1:",true,"^[",["^10",["^11",["^10",[[]]]]],"^13","Returns the ascent of the current font at its current size. This\n  information is useful for determining the height of the font above\n  the baseline. For example, adding the text-ascent and text-descent\n  values will give you the total height of the line."],"~$tint-int",["^ ","^O","Image","^P",null,"^Q",["^ ","^O","Image","^R","1.0","^S","Loading & Displaying","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",11,"^1D",["^ ","^15",false,"^19",2,"^16",["^10",[["^3I"],["^3I","^2N"]]],"^[",["^10",[["^3I"],["^3I","^2N"]]],"^18",["^10",[null,null]]],"^V","tint()","^W",3,"^X",true,"^Y",4454,"^Z",4454,"^[",["^10",["^11",["^10",[["^3I"],["^3I","^2N"]]]]],"^13","Sets the fill value for displaying images. Images can be tinted to\n  specified colors or made transparent by setting the alpha.\n\n  To make an image transparent, but not change it's color, use white\n  as the tint color and specify an alpha value. For instance,\n  tint(255, 128) will make an image 50% transparent (unless\n  colorMode() has been used).\n\n  The value for the parameter gray must be less than or equal to the\n  current maximum value as specified by colorMode(). The default\n  maximum value is 255.\n\n  Also used to control the coloring of textures in 3D."],"^R","1.0","^B","~$quil.core/tint-int","^15",false,"^S","Loading & Displaying","^T","resources/public/js/development/quil/core.cljc","^U",11,"^1D",["^ ","^15",false,"^19",2,"^16",["^10",[["^3I"],["^3I","^2N"]]],"^[",["^10",[["^3I"],["^3I","^2N"]]],"^18",["^10",[null,null]]],"^V","tint()","^16",["^10",[["^3I"],["^3I","^2N"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",4448,"^Z",4454,"^19",2,"^1:",true,"^[",["^10",[["^3I"],["^3I","^2N"]]],"^13","Sets the fill value for displaying images. Images can be tinted to\n  specified colors or made transparent by setting the alpha.\n\n  To make an image transparent, but not change it's color, use white\n  as the tint color and specify an alpha value. For instance,\n  tint(255, 128) will make an image 50% transparent (unless\n  colorMode() has been used).\n\n  The value for the parameter gray must be less than or equal to the\n  current maximum value as specified by colorMode(). The default\n  maximum value is 255.\n\n  Also used to control the coloring of textures in 3D."],"~$shininess",["^ ","^O","Lights, Camera","^P",null,"^Q",["^ ","^O","Lights, Camera","^R","1.0","^S","Material Properties","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",12,"^V","shininess()","^W",3,"^X",true,"^Y",3866,"^Z",3866,"^[",["^10",["^11",["^10",[["~$shine"]]]]],"^13","Sets the amount of gloss in the surface of shapes. Used in\n  combination with ambient, specular, and emissive in setting\n  the material properties of shapes."],"^R","1.0","^B","~$quil.core/shininess","^15",false,"^S","Material Properties","^T","resources/public/js/development/quil/core.cljc","^U",12,"^V","shininess()","^16",["^10",[["^:D"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",3860,"^Z",3866,"^19",1,"^1:",true,"^[",["^10",["^11",["^10",[["^:D"]]]]],"^13","Sets the amount of gloss in the surface of shapes. Used in\n  combination with ambient, specular, and emissive in setting\n  the material properties of shapes."],"~$rect-mode",["^ ","^O","Shape","^P",null,"^Q",["^ ","^O","Shape","^R","1.0","^S","Attributes","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",12,"^V","rectMode()","^W",3,"^X",true,"^Y",3302,"^Z",3302,"^[",["^10",["^11",["^10",[["^1G"]]]]],"^13","Modifies the location from which rectangles draw. The default mode\n  is :corner. Available modes are:\n\n\n  :corner  - Specifies the location to be the upper left corner of the\n             shape and uses the third and fourth parameters of rect to\n             specify the width and height.\n\n  :corners - Uses the first and second parameters of rect to set the\n             location of one corner and uses the third and fourth\n             parameters to set the opposite corner.\n\n  :center  - Draws the image from its center point and uses the third\n             and forth parameters of rect to specify the image's width\n             and height.\n\n  :radius  - Draws the image from its center point and uses the third\n             and forth parameters of rect() to specify half of the\n             image's width and height."],"^R","1.0","^B","~$quil.core/rect-mode","^15",false,"^S","Attributes","^T","resources/public/js/development/quil/core.cljc","^U",12,"^V","rectMode()","^16",["^10",[["^1G"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",3296,"^Z",3302,"^19",1,"^1:",true,"^[",["^10",["^11",["^10",[["^1G"]]]]],"^13","Modifies the location from which rectangles draw. The default mode\n  is :corner. Available modes are:\n\n\n  :corner  - Specifies the location to be the upper left corner of the\n             shape and uses the third and fourth parameters of rect to\n             specify the width and height.\n\n  :corners - Uses the first and second parameters of rect to set the\n             location of one corner and uses the third and fourth\n             parameters to set the opposite corner.\n\n  :center  - Draws the image from its center point and uses the third\n             and forth parameters of rect to specify the image's width\n             and height.\n\n  :radius  - Draws the image from its center point and uses the third\n             and forth parameters of rect() to specify half of the\n             image's width and height."],"~$ellipse-mode",["^ ","^O","Shape","^P",null,"^Q",["^ ","^O","Shape","^R","1.0","^S","Attributes","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",15,"^V","ellipseMode()","^W",3,"^X",true,"^Y",1544,"^Z",1544,"^[",["^10",["^11",["^10",[["^1G"]]]]],"^13","Modifies the origin of the ellispse according to the specified mode:\n\n  :center  - specifies the location of the ellipse as\n             the center of the shape. (Default).\n  :radius  - similar to center, but the width and height parameters to\n             ellipse specify the radius of the ellipse, rather than the\n             diameter.\n  :corner  - draws the shape from the upper-left corner of its bounding\n             box.\n  :corners - uses the four parameters to ellipse to set two opposing\n             corners of the ellipse's bounding box."],"^R","1.0","^B","~$quil.core/ellipse-mode","^15",false,"^S","Attributes","^T","resources/public/js/development/quil/core.cljc","^U",15,"^V","ellipseMode()","^16",["^10",[["^1G"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",1538,"^Z",1544,"^19",1,"^1:",true,"^[",["^10",["^11",["^10",[["^1G"]]]]],"^13","Modifies the origin of the ellispse according to the specified mode:\n\n  :center  - specifies the location of the ellipse as\n             the center of the shape. (Default).\n  :radius  - similar to center, but the width and height parameters to\n             ellipse specify the radius of the ellipse, rather than the\n             diameter.\n  :corner  - draws the shape from the upper-left corner of its bounding\n             box.\n  :corners - uses the four parameters to ellipse to set two opposing\n             corners of the ellipse's bounding box."],"~$month",["^ ","^O","Input","^P",null,"^Q",["^ ","^O","Input","^R","1.0","^S","Time & Date","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",8,"^V","month()","^W",3,"^X",false,"^Y",2565,"^Z",2565,"^[",["^10",["^11",["^10",[[]]]]],"^13","Returns the current month as a value from 1 - 12."],"^R","1.0","^B","~$quil.core/month","^15",false,"^S","Time & Date","^T","resources/public/js/development/quil/core.cljc","^U",8,"^V","month()","^16",["^10",[[]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",false,"^Y",2559,"^Z",2565,"^19",0,"^1:",true,"^[",["^10",["^11",["^10",[[]]]]],"^13","Returns the current month as a value from 1 - 12."],"~$texture-modes",["^ ","^B","~$quil.core/texture-modes","^T","resources/public/js/development/quil/core.cljc","^Y",45,"^W",1,"^Z",71,"^U",15,"^Q",["^ ","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^Y",71,"^W",2,"^Z",71,"^U",15],"^1=","^1>"],"~$tint-float",["^ ","^O","Image","^P",null,"^Q",["^ ","^O","Image","^R","1.0","^S","Loading & Displaying","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",13,"^1D",["^ ","^15",false,"^19",4,"^16",["^10",[["^2M"],["^2M","^2N"],["~$r","~$g","~$b"],["~$r","~$g","~$b","~$a"]]],"^[",["^10",[["^2M"],["^2M","^2N"],["~$r","~$g","~$b"],["~$r","~$g","~$b","~$a"]]],"^18",["^10",[null,null,null,null]]],"^V","tint()","^W",3,"^X",true,"^Y",4429,"^Z",4429,"^[",["^10",["^11",["^10",[["^2M"],["^2M","^2N"],["~$r","~$g","~$b"],["~$r","~$g","~$b","~$a"]]]]],"^13","Sets the fill value for displaying images. Images can be tinted to\n  specified colors or made transparent by setting the alpha.\n\n  To make an image transparent, but not change it's color, use white\n  as the tint color and specify an alpha value. For instance,\n  tint(255, 128) will make an image 50% transparent (unless\n  colorMode() has been used).\n\n  The value for the parameter gray must be less than or equal to the\n  current maximum value as specified by colorMode(). The default\n  maximum value is 255.\n\n  Also used to control the coloring of textures in 3D."],"^R","1.0","^B","~$quil.core/tint-float","^15",false,"^S","Loading & Displaying","^T","resources/public/js/development/quil/core.cljc","^U",13,"^1D",["^ ","^15",false,"^19",4,"^16",["^10",[["^2M"],["^2M","^2N"],["~$r","~$g","~$b"],["~$r","~$g","~$b","~$a"]]],"^[",["^10",[["^2M"],["^2M","^2N"],["~$r","~$g","~$b"],["~$r","~$g","~$b","~$a"]]],"^18",["^10",[null,null,null,null]]],"^V","tint()","^16",["^10",[["^2M"],["^2M","^2N"],["~$r","~$g","~$b"],["~$r","~$g","~$b","~$a"]]],"^17",null,"^18",["^10",[null,null,null,null]],"^W",1,"^X",true,"^Y",4423,"^Z",4429,"^19",4,"^1:",true,"^[",["^10",[["^2M"],["^2M","^2N"],["~$r","~$g","~$b"],["~$r","~$g","~$b","~$a"]]],"^13","Sets the fill value for displaying images. Images can be tinted to\n  specified colors or made transparent by setting the alpha.\n\n  To make an image transparent, but not change it's color, use white\n  as the tint color and specify an alpha value. For instance,\n  tint(255, 128) will make an image 50% transparent (unless\n  colorMode() has been used).\n\n  The value for the parameter gray must be less than or equal to the\n  current maximum value as specified by colorMode(). The default\n  maximum value is 255.\n\n  Also used to control the coloring of textures in 3D."],"^1O",["^ ","^O","Environment","^P",null,"^Q",["^ ","^O","Environment","^R","1.0","^S",null,"^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",8,"^V","getWidth()","^W",3,"^4=",null,"^X",true,"^Y",4636,"^Z",4636,"^[",["^10",["^11",["^10",[[]]]]],"^13","Width of the display window. The value of width is zero until size is\n  called."],"^R","1.0","^B","~$quil.core/width","^15",false,"^S",null,"^T","resources/public/js/development/quil/core.cljc","^U",8,"^V","getWidth()","^16",["^10",[[]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^4=",null,"^X",true,"^Y",4629,"^Z",4636,"^19",0,"^1:",true,"^[",["^10",["^11",["^10",[[]]]]],"^13","Width of the display window. The value of width is zero until size is\n  called."],"~$background",["^ ","^O","Color","^P",null,"^Q",["^ ","^O","Color","^R","1.0","^S","Setting","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",13,"^1D",["^ ","^15",false,"^19",4,"^16",["^10",[["^3I"],["^3I","^2N"],["~$r","~$g","~$b"],["~$r","~$g","~$b","~$a"]]],"^[",["^10",[["^3I"],["^3I","^2N"],["~$r","~$g","~$b"],["~$r","~$g","~$b","~$a"]]],"^18",["^10",[null,null,null,null]]],"^V","background()","^W",3,"^X",true,"^Y",551,"^Z",551,"^[",["^10",["^11",["^10",[["^3I"],["^3I","^2N"],["~$r","~$g","~$b"],["~$r","~$g","~$b","~$a"]]]]],"^13","Sets the color used for the background of the Processing\n  window. The default background is light gray. In the draw function,\n  the background color is used to clear the display window at the\n  beginning of each frame.\n\n  It is not possible to use transparency (alpha) in background colors\n  with the main drawing surface, however they will work properly with\n  create-graphics. Converts args to floats."],"^R","1.0","^B","~$quil.core/background","^15",false,"^S","Setting","^T","resources/public/js/development/quil/core.cljc","^U",13,"^1D",["^ ","^15",false,"^19",4,"^16",["^10",[["^3I"],["^3I","^2N"],["~$r","~$g","~$b"],["~$r","~$g","~$b","~$a"]]],"^[",["^10",[["^3I"],["^3I","^2N"],["~$r","~$g","~$b"],["~$r","~$g","~$b","~$a"]]],"^18",["^10",[null,null,null,null]]],"^V","background()","^16",["^10",[["^3I"],["^3I","^2N"],["~$r","~$g","~$b"],["~$r","~$g","~$b","~$a"]]],"^17",null,"^18",["^10",[null,null,null,null]],"^W",1,"^X",true,"^Y",545,"^Z",551,"^19",4,"^1:",true,"^[",["^10",[["^3I"],["^3I","^2N"],["~$r","~$g","~$b"],["~$r","~$g","~$b","~$a"]]],"^13","Sets the color used for the background of the Processing\n  window. The default background is light gray. In the draw function,\n  the background color is used to clear the display window at the\n  beginning of each frame.\n\n  It is not possible to use transparency (alpha) in background colors\n  with the main drawing surface, however they will work properly with\n  create-graphics. Converts args to floats."],"~$ortho",["^ ","^O","Lights, Camera","^P",null,"^Q",["^ ","^O","Lights, Camera","^R","1.0","^S","Camera","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",8,"^1D",["^ ","^15",false,"^19",6,"^16",["^10",[[],["~$left","~$right","~$bottom","~$top"],["^:T","^:U","^:V","^:W","~$near","~$far"]]],"^[",["^10",[[],["^:T","^:U","^:V","^:W"],["^:T","^:U","^:V","^:W","^:X","^:Y"]]],"^18",["^10",[null,null,null]]],"^V","ortho()","^W",3,"^X",true,"^Y",2858,"^Z",2858,"^[",["^10",["^11",["^10",[[],["^:T","^:U","^:V","^:W"],["^:T","^:U","^:V","^:W","^:X","^:Y"]]]]],"^13","Sets an orthographic projection and defines a parallel clipping\n  volume. All objects with the same dimension appear the same size,\n  regardless of whether they are near or far from the camera. The\n  parameters to this function specify the clipping volume where left\n  and right are the minimum and maximum x values, top and bottom are\n  the minimum and maximum y values, and near and far are the minimum\n  and maximum z values. If no parameters are given, the default is\n  used: (ortho 0 width 0 height -10 10)"],"^R","1.0","^B","~$quil.core/ortho","^15",false,"^S","Camera","^T","resources/public/js/development/quil/core.cljc","^U",8,"^1D",["^ ","^15",false,"^19",6,"^16",["^10",[[],["^:T","^:U","^:V","^:W"],["^:T","^:U","^:V","^:W","^:X","^:Y"]]],"^[",["^10",[[],["^:T","^:U","^:V","^:W"],["^:T","^:U","^:V","^:W","^:X","^:Y"]]],"^18",["^10",[null,null,null]]],"^V","ortho()","^16",["^10",[[],["^:T","^:U","^:V","^:W"],["^:T","^:U","^:V","^:W","^:X","^:Y"]]],"^17",null,"^18",["^10",[null,null,null]],"^W",1,"^X",true,"^Y",2852,"^Z",2858,"^19",6,"^1:",true,"^[",["^10",[[],["^:T","^:U","^:V","^:W"],["^:T","^:U","^:V","^:W","^:X","^:Y"]]],"^13","Sets an orthographic projection and defines a parallel clipping\n  volume. All objects with the same dimension appear the same size,\n  regardless of whether they are near or far from the camera. The\n  parameters to this function specify the clipping volume where left\n  and right are the minimum and maximum x values, top and bottom are\n  the minimum and maximum y values, and near and far are the minimum\n  and maximum z values. If no parameters are given, the default is\n  used: (ortho 0 width 0 height -10 10)"],"~$hint-options",["^ ","^B","~$quil.core/hint-options","^T","resources/public/js/development/quil/core.cljc","^Y",45,"^W",1,"^Z",54,"^U",14,"^Q",["^ ","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^Y",54,"^W",2,"^Z",54,"^U",14],"^1=","^1>"],"~$prc-println",["^ ","^O","Output","^P",null,"^Q",["^ ","^O","Output","^R","1.0","^S","Text area","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",17,"^W",6,"^8V",true,"^Y",154,"^Z",154,"^[",["^10",["^11",["^10",[["^8W"]]]]],"^13","Writes to the text area of the Processing environment's console.\n  This is often helpful for looking at the data a program is producing.\n  Each call to this function creates a new line of output.\n  Individual elements can be separated with quotes (\"\") and joined with the string concatenation operator (+).\n  Also writes the content of an array to the text area of the Processing environment.\n  This is often helpful for looking at the data a program is producing.\n  A new line is put between each element of the array. This function can only print 1D arrays,\n  but can test to see if the content are null or not null for 2+ dimensional arrays."],"^R","1.0","^B","~$quil.core/prc-println","^15",false,"^S","Text area","^T","resources/public/js/development/quil/core.cljc","^U",17,"^16",["^10",[["^8W"]]],"^17",null,"^18",["^10",[null,null]],"^W",4,"^8V",true,"^Y",149,"^Z",154,"^19",1,"^1:",true,"^[",["^10",["^11",["^10",[["^8W"]]]]],"^13","Writes to the text area of the Processing environment's console.\n  This is often helpful for looking at the data a program is producing.\n  Each call to this function creates a new line of output.\n  Individual elements can be separated with quotes (\"\") and joined with the string concatenation operator (+).\n  Also writes the content of an array to the text area of the Processing environment.\n  This is often helpful for looking at the data a program is producing.\n  A new line is put between each element of the array. This function can only print 1D arrays,\n  but can test to see if the content are null or not null for 2+ dimensional arrays."],"~$brightness",["^ ","^O","Color","^P",null,"^Q",["^ ","^O","Color","^R","1.0","^S","Creating & Reading","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",13,"^V","brightness()","^W",3,"^X",true,"^Y",929,"^Z",929,"^[",["^10",["^11",["^10",[["^83"]]]]],"^13","Extracts the brightness value from a color. Returns a float."],"^R","1.0","^B","~$quil.core/brightness","^15",false,"^S","Creating & Reading","^T","resources/public/js/development/quil/core.cljc","^U",13,"^V","brightness()","^16",["^10",[["^83"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",923,"^Z",929,"^19",1,"^1:",true,"^[",["^10",["^11",["^10",[["^83"]]]]],"^13","Extracts the brightness value from a color. Returns a float."],"~$arc-modes",["^ ","^B","~$quil.core/arc-modes","^T","resources/public/js/development/quil/core.cljc","^Y",45,"^W",1,"^Z",47,"^U",11,"^Q",["^ ","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^Y",47,"^W",2,"^Z",47,"^U",11],"^1=","^1>"],"~$specular",["^ ","^O","Lights, Camera","^P",null,"^Q",["^ ","^O","Lights, Camera","^R","1.0","^S","Material Properties","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",11,"^1D",["^ ","^15",false,"^19",3,"^16",["^10",[["^2M"],["~$x","~$y","~$z"]]],"^[",["^10",[["^2M"],["~$x","~$y","~$z"]]],"^18",["^10",[null,null]]],"^V","specular()","^W",3,"^X",true,"^Y",3923,"^Z",3923,"^[",["^10",["^11",["^10",[["^2M"],["~$x","~$y","~$z"]]]]],"^13","Sets the specular color of the materials used for shapes drawn to\n  the screen, which sets the color of hightlights. Specular refers to\n  light which bounces off a surface in a perferred direction (rather\n  than bouncing in all directions like a diffuse light). Used in\n  combination with emissive, ambient, and shininess in setting\n  the material properties of shapes."],"^R","1.0","^B","~$quil.core/specular","^15",false,"^S","Material Properties","^T","resources/public/js/development/quil/core.cljc","^U",11,"^1D",["^ ","^15",false,"^19",3,"^16",["^10",[["^2M"],["~$x","~$y","~$z"]]],"^[",["^10",[["^2M"],["~$x","~$y","~$z"]]],"^18",["^10",[null,null]]],"^V","specular()","^16",["^10",[["^2M"],["~$x","~$y","~$z"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",3917,"^Z",3923,"^19",3,"^1:",true,"^[",["^10",[["^2M"],["~$x","~$y","~$z"]]],"^13","Sets the specular color of the materials used for shapes drawn to\n  the screen, which sets the color of hightlights. Specular refers to\n  light which bounces off a surface in a perferred direction (rather\n  than bouncing in all directions like a diffuse light). Used in\n  combination with emissive, ambient, and shininess in setting\n  the material properties of shapes."],"~$save-frame",["^ ","^O","Output","^P",null,"^Q",["^ ","^O","Output","^R","1.0","^S","Image","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",13,"^1D",["^ ","^15",false,"^19",1,"^16",["^10",[[],["~$name"]]],"^[",["^10",[[],["^;:"]]],"^18",["^10",[null,null]]],"^V","saveFrame()","^W",3,"^X",true,"^Y",3585,"^Z",3585,"^[",["^10",["^11",["^10",[[],["^;:"]]]]],"^13","Saves an image identical to the current display window as a\n  file. May be called multple times - each file saved will have a\n  unique name. Name and image formate may be modified by passing a\n  string parameter of the form \"foo-####.ext\" where foo- can be any\n  arbitrary string, #### will be replaced with the current frame id\n  and .ext is one of .tiff, .targa, .png, .jpeg or .jpg\n\n  Examples:\n  (save-frame)\n  (save-frame \"pretty-pic-####.jpg\")"],"^R","1.0","^B","~$quil.core/save-frame","^15",false,"^S","Image","^T","resources/public/js/development/quil/core.cljc","^U",13,"^1D",["^ ","^15",false,"^19",1,"^16",["^10",[[],["^;:"]]],"^[",["^10",[[],["^;:"]]],"^18",["^10",[null,null]]],"^V","saveFrame()","^16",["^10",[[],["^;:"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",3579,"^Z",3585,"^19",1,"^1:",true,"^[",["^10",[[],["^;:"]]],"^13","Saves an image identical to the current display window as a\n  file. May be called multple times - each file saved will have a\n  unique name. Name and image formate may be modified by passing a\n  string parameter of the form \"foo-####.ext\" where foo- can be any\n  arbitrary string, #### will be replaced with the current frame id\n  and .ext is one of .tiff, .targa, .png, .jpeg or .jpg\n\n  Examples:\n  (save-frame)\n  (save-frame \"pretty-pic-####.jpg\")"],"~$cursor",["^ ","^O","Environment","^P",null,"^Q",["^ ","^O","Environment","^R","1.0","^S",null,"^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",9,"^1D",["^ ","^15",false,"^19",1,"^16",["^10",[[],["~$cursor-mode"]]],"^[",["^10",[[],["^;="]]],"^18",["^10",[null,null]]],"^V","cursor()","^W",3,"^X",true,"^Y",1286,"^Z",1286,"^[",["^10",["^11",["^10",[[],["^;="]]]]],"^13","Sets the cursor to a predefined symbol or makes it\n  visible if already hidden (after no-cursor was called).\n\n  Available modes: :arrow, :cross, :hand, :move, :text, :wait\n\n  See cursor-image for specifying a generic image as the cursor\n  symbol."],"^R","1.0","^B","~$quil.core/cursor","^15",false,"^S",null,"^T","resources/public/js/development/quil/core.cljc","^U",9,"^1D",["^ ","^15",false,"^19",1,"^16",["^10",[[],["^;="]]],"^[",["^10",[[],["^;="]]],"^18",["^10",[null,null]]],"^V","cursor()","^16",["^10",[[],["^;="]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",1280,"^Z",1286,"^19",1,"^1:",true,"^[",["^10",[[],["^;="]]],"^13","Sets the cursor to a predefined symbol or makes it\n  visible if already hidden (after no-cursor was called).\n\n  Available modes: :arrow, :cross, :hand, :move, :text, :wait\n\n  See cursor-image for specifying a generic image as the cursor\n  symbol."],"~$noise",["^ ","^O","Math","^P",null,"^Q",["^ ","^O","Math","^R","1.0","^S","Random","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",8,"^1D",["^ ","^15",false,"^19",3,"^16",["^10",[["~$x"],["~$x","~$y"],["~$x","~$y","~$z"]]],"^[",["^10",[["~$x"],["~$x","~$y"],["~$x","~$y","~$z"]]],"^18",["^10",[null,null,null]]],"^V","noise()","^W",3,"^X",true,"^Y",2674,"^Z",2674,"^[",["^10",["^11",["^10",[["~$x"],["~$x","~$y"],["~$x","~$y","~$z"]]]]],"^13","Returns the Perlin noise value at specified coordinates. Perlin\n  noise is a random sequence generator producing a more natural\n  ordered, harmonic succession of numbers compared to the standard\n  random function. It was invented by Ken Perlin in the 1980s and\n  been used since in graphical applications to produce procedural\n  textures, natural motion, shapes, terrains etc.\n\n  The main difference to the random function is that Perlin noise is\n  defined in an infinite n-dimensional space where each pair of\n  coordinates corresponds to a fixed semi-random value (fixed only for\n  the lifespan of the program). The resulting value will always be\n  between 0.0 and 1.0. Processing can compute 1D, 2D and 3D noise,\n  depending on the number of coordinates given. The noise value can be\n  animated by moving through the noise space and the 2nd and 3rd\n  dimensions can also be interpreted as time.\n\n  The actual noise is structured similar to an audio signal, in\n  respect to the function's use of frequencies. Similar to the concept\n  of harmonics in physics, perlin noise is computed over several\n  octaves which are added together for the final result.\n\n  Another way to adjust the character of the resulting sequence is the\n  scale of the input coordinates. As the function works within an\n  infinite space the value of the coordinates doesn't matter as such,\n  only the distance between successive coordinates does (eg. when\n  using noise within a loop). As a general rule the smaller the\n  difference between coordinates, the smoother the resulting noise\n  sequence will be. Steps of 0.005-0.03 work best for most\n  applications, but this will differ depending on use."],"^R","1.0","^B","~$quil.core/noise","^15",false,"^S","Random","^T","resources/public/js/development/quil/core.cljc","^U",8,"^1D",["^ ","^15",false,"^19",3,"^16",["^10",[["~$x"],["~$x","~$y"],["~$x","~$y","~$z"]]],"^[",["^10",[["~$x"],["~$x","~$y"],["~$x","~$y","~$z"]]],"^18",["^10",[null,null,null]]],"^V","noise()","^16",["^10",[["~$x"],["~$x","~$y"],["~$x","~$y","~$z"]]],"^17",null,"^18",["^10",[null,null,null]],"^W",1,"^X",true,"^Y",2668,"^Z",2674,"^19",3,"^1:",true,"^[",["^10",[["~$x"],["~$x","~$y"],["~$x","~$y","~$z"]]],"^13","Returns the Perlin noise value at specified coordinates. Perlin\n  noise is a random sequence generator producing a more natural\n  ordered, harmonic succession of numbers compared to the standard\n  random function. It was invented by Ken Perlin in the 1980s and\n  been used since in graphical applications to produce procedural\n  textures, natural motion, shapes, terrains etc.\n\n  The main difference to the random function is that Perlin noise is\n  defined in an infinite n-dimensional space where each pair of\n  coordinates corresponds to a fixed semi-random value (fixed only for\n  the lifespan of the program). The resulting value will always be\n  between 0.0 and 1.0. Processing can compute 1D, 2D and 3D noise,\n  depending on the number of coordinates given. The noise value can be\n  animated by moving through the noise space and the 2nd and 3rd\n  dimensions can also be interpreted as time.\n\n  The actual noise is structured similar to an audio signal, in\n  respect to the function's use of frequencies. Similar to the concept\n  of harmonics in physics, perlin noise is computed over several\n  octaves which are added together for the final result.\n\n  Another way to adjust the character of the resulting sequence is the\n  scale of the input coordinates. As the function works within an\n  infinite space the value of the coordinates doesn't matter as such,\n  only the distance between successive coordinates does (eg. when\n  using noise within a loop). As a general rule the smaller the\n  difference between coordinates, the smoother the resulting noise\n  sequence will be. Steps of 0.005-0.03 work best for most\n  applications, but this will differ depending on use."],"~$push-style",["^ ","^O","Structure","^P",null,"^Q",["^ ","^O","Structure","^R","1.0","^S",null,"^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",13,"^V","pushStyle()","^W",3,"^X",true,"^Y",3098,"^Z",3098,"^[",["^10",["^11",["^10",[[]]]]],"^13","Saves the current style settings onto a 'style stack'. Use with\n  pop-style which restores the prior settings. Note that these\n  functions are always used together. They allow you to change the\n  style settings and later return to what you had. When a new style is\n  started with push-style, it builds on the current style\n  information. The push-style and pop-style fns can be embedded to\n  provide more control.\n\n  The style information controlled by the following functions are\n  included in the style: fill, stroke, tint, stroke-weight,\n  stroke-cap, stroke-join, image-mode, rect-mode, ellipse-mode,\n  shape-mode, color-mode, text-align, text-font, text-mode, text-size,\n  text-leading, emissive, specular, shininess, and ambient"],"^R","1.0","^B","~$quil.core/push-style","^15",false,"^S",null,"^T","resources/public/js/development/quil/core.cljc","^U",13,"^V","pushStyle()","^16",["^10",[[]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",3092,"^Z",3098,"^19",0,"^1:",true,"^[",["^10",["^11",["^10",[[]]]]],"^13","Saves the current style settings onto a 'style stack'. Use with\n  pop-style which restores the prior settings. Note that these\n  functions are always used together. They allow you to change the\n  style settings and later return to what you had. When a new style is\n  started with push-style, it builds on the current style\n  information. The push-style and pop-style fns can be embedded to\n  provide more control.\n\n  The style information controlled by the following functions are\n  included in the style: fill, stroke, tint, stroke-weight,\n  stroke-cap, stroke-join, image-mode, rect-mode, ellipse-mode,\n  shape-mode, color-mode, text-align, text-font, text-mode, text-size,\n  text-leading, emissive, specular, shininess, and ambient"],"~$bezier-vertex",["^ ","^O","Shape","^P",null,"^Q",["^ ","^O","Shape","^R","1.0","^S","Vertex","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",16,"^1D",["^ ","^15",false,"^19",9,"^16",["^10",[["^5F","^5G","^5H","^5I","~$x","~$y"],["^5F","^5G","^5K","^5H","^5I","^5L","~$x","~$y","~$z"]]],"^[",["^10",[["^5F","^5G","^5H","^5I","~$x","~$y"],["^5F","^5G","^5K","^5H","^5I","^5L","~$x","~$y","~$z"]]],"^18",["^10",[null,null]]],"^V","bezierVertex()","^W",3,"^X",true,"^Y",736,"^Z",736,"^[",["^10",["^11",["^10",[["^5F","^5G","^5H","^5I","~$x","~$y"],["^5F","^5G","^5K","^5H","^5I","^5L","~$x","~$y","~$z"]]]]],"^13","Specifies vertex coordinates for Bezier curves. Each call to\n  bezier-vertex defines the position of two control points and one\n  anchor point of a Bezier curve, adding a new segment to a line or\n  shape. The first time bezier-vertex is used within a begin-shape\n  call, it must be prefaced with a call to vertex to set the first\n  anchor point. This function must be used between begin-shape and\n  end-shape and only when there is no parameter specified to\n  begin-shape."],"^R","1.0","^B","~$quil.core/bezier-vertex","^15",false,"^S","Vertex","^T","resources/public/js/development/quil/core.cljc","^U",16,"^1D",["^ ","^15",false,"^19",9,"^16",["^10",[["^5F","^5G","^5H","^5I","~$x","~$y"],["^5F","^5G","^5K","^5H","^5I","^5L","~$x","~$y","~$z"]]],"^[",["^10",[["^5F","^5G","^5H","^5I","~$x","~$y"],["^5F","^5G","^5K","^5H","^5I","^5L","~$x","~$y","~$z"]]],"^18",["^10",[null,null]]],"^V","bezierVertex()","^16",["^10",[["^5F","^5G","^5H","^5I","~$x","~$y"],["^5F","^5G","^5K","^5H","^5I","^5L","~$x","~$y","~$z"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",730,"^Z",736,"^19",9,"^1:",true,"^[",["^10",[["^5F","^5G","^5H","^5I","~$x","~$y"],["^5F","^5G","^5K","^5H","^5I","^5L","~$x","~$y","~$z"]]],"^13","Specifies vertex coordinates for Bezier curves. Each call to\n  bezier-vertex defines the position of two control points and one\n  anchor point of a Bezier curve, adding a new segment to a line or\n  shape. The first time bezier-vertex is used within a begin-shape\n  call, it must be prefaced with a call to vertex to set the first\n  anchor point. This function must be used between begin-shape and\n  end-shape and only when there is no parameter specified to\n  begin-shape."],"~$light-falloff",["^ ","^O","Lights, Camera","^P",null,"^Q",["^ ","^O","Lights, Camera","^R","1.0","^S","Lights","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",16,"^V","lightFalloff()","^W",3,"^X",true,"^Y",2225,"^Z",2225,"^[",["^10",["^11",["^10",[["~$constant","~$linear","~$quadratic"]]]]],"^13","Sets the falloff rates for point lights, spot lights, and ambient\n  lights. The parameters are used to determine the falloff with the\n  following equation:\n\n  d = distance from light position to vertex position\n  falloff = 1 / (CONSTANT + d * LINEAR + (d*d) * QUADRATIC)\n\n  Like fill, it affects only the elements which are created after it\n  in the code. The default value is (light-falloff 1.0 0.0 0.0).\n  Thinking about an ambient light with a falloff can be tricky. It is\n  used, for example, if you wanted a region of your scene to be lit\n  ambiently one color and another region to be lit ambiently by\n  another color, you would use an ambient light with location and\n  falloff. You can think of it as a point light that doesn't care\n  which direction a surface is facing."],"^R","1.0","^B","~$quil.core/light-falloff","^15",false,"^S","Lights","^T","resources/public/js/development/quil/core.cljc","^U",16,"^V","lightFalloff()","^16",["^10",[["^;F","^;G","^;H"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",2219,"^Z",2225,"^19",3,"^1:",true,"^[",["^10",["^11",["^10",[["^;F","^;G","^;H"]]]]],"^13","Sets the falloff rates for point lights, spot lights, and ambient\n  lights. The parameters are used to determine the falloff with the\n  following equation:\n\n  d = distance from light position to vertex position\n  falloff = 1 / (CONSTANT + d * LINEAR + (d*d) * QUADRATIC)\n\n  Like fill, it affects only the elements which are created after it\n  in the code. The default value is (light-falloff 1.0 0.0 0.0).\n  Thinking about an ambient light with a falloff can be tricky. It is\n  used, for example, if you wanted a region of your scene to be lit\n  ambiently one color and another region to be lit ambiently by\n  another color, you would use an ambient light with location and\n  falloff. You can think of it as a point light that doesn't care\n  which direction a surface is facing."],"~$noise-detail",["^ ","^O","Math","^P",null,"^Q",["^ ","^O","Math","^R","1.0","^S","Random","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",15,"^1D",["^ ","^15",false,"^19",2,"^16",["^10",[["~$octaves"],["^;K","~$falloff"]]],"^[",["^10",[["^;K"],["^;K","^;L"]]],"^18",["^10",[null,null]]],"^V","noiseDetail()","^W",3,"^X",true,"^Y",2714,"^Z",2714,"^[",["^10",["^11",["^10",[["^;K"],["^;K","^;L"]]]]],"^13","Adjusts the character and level of detail produced by the Perlin\n  noise function. Similar to harmonics in physics, noise is computed\n  over several octaves. Lower octaves contribute more to the output\n  signal and as such define the overal intensity of the noise, whereas\n  higher octaves create finer grained details in the noise\n  sequence. By default, noise is computed over 4 octaves with each\n  octave contributing exactly half than its predecessor, starting at\n  50% strength for the 1st octave. This falloff amount can be changed\n  by adding an additional function parameter. Eg. a falloff factor of\n  0.75 means each octave will now have 75% impact (25% less) of the\n  previous lower octave. Any value between 0.0 and 1.0 is valid,\n  however note that values greater than 0.5 might result in greater\n  than 1.0 values returned by noise.\n\n  By changing these parameters, the signal created by the noise\n  function can be adapted to fit very specific needs and\n  characteristics."],"^R","1.0","^B","~$quil.core/noise-detail","^15",false,"^S","Random","^T","resources/public/js/development/quil/core.cljc","^U",15,"^1D",["^ ","^15",false,"^19",2,"^16",["^10",[["^;K"],["^;K","^;L"]]],"^[",["^10",[["^;K"],["^;K","^;L"]]],"^18",["^10",[null,null]]],"^V","noiseDetail()","^16",["^10",[["^;K"],["^;K","^;L"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",2708,"^Z",2714,"^19",2,"^1:",true,"^[",["^10",[["^;K"],["^;K","^;L"]]],"^13","Adjusts the character and level of detail produced by the Perlin\n  noise function. Similar to harmonics in physics, noise is computed\n  over several octaves. Lower octaves contribute more to the output\n  signal and as such define the overal intensity of the noise, whereas\n  higher octaves create finer grained details in the noise\n  sequence. By default, noise is computed over 4 octaves with each\n  octave contributing exactly half than its predecessor, starting at\n  50% strength for the 1st octave. This falloff amount can be changed\n  by adding an additional function parameter. Eg. a falloff factor of\n  0.75 means each octave will now have 75% impact (25% less) of the\n  previous lower octave. Any value between 0.0 and 1.0 is valid,\n  however note that values greater than 0.5 might result in greater\n  than 1.0 values returned by noise.\n\n  By changing these parameters, the signal created by the noise\n  function can be adapted to fit very specific needs and\n  characteristics."],"~$save",["^ ","^O","Output","^P",null,"^Q",["^ ","^O","Output","^R","1.0","^S","Image","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",7,"^V","save()","^W",3,"^X",true,"^Y",3567,"^Z",3567,"^[",["^10",["^11",["^10",[["^54"]]]]],"^13","Saves an image from the display window. Images are saved in TIFF,\n  TARGA, JPEG, and PNG format depending on the extension within the\n  filename parameter. For example, image.tif will have a TIFF image\n  and image.png will save a PNG image. If no extension is included in\n  the filename, the image will save in TIFF format and .tif will be\n  added to the name. All images saved from the main drawing window\n  will be opaque. To save images without a background, use\n  create-graphics."],"^R","1.0","^B","~$quil.core/save","^15",false,"^S","Image","^T","resources/public/js/development/quil/core.cljc","^U",7,"^V","save()","^16",["^10",[["^54"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",3561,"^Z",3567,"^19",1,"^1:",true,"^[",["^10",["^11",["^10",[["^54"]]]]],"^13","Saves an image from the display window. Images are saved in TIFF,\n  TARGA, JPEG, and PNG format depending on the extension within the\n  filename parameter. For example, image.tif will have a TIFF image\n  and image.png will save a PNG image. If no extension is included in\n  the filename, the image will save in TIFF format and .tif will be\n  added to the name. All images saved from the main drawing window\n  will be opaque. To save images without a background, use\n  create-graphics."],"~$curve-point",["^ ","^O","Shape","^P",null,"^Q",["^ ","^O","Shape","^R","1.0","^S","Curves","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",14,"^V","curvePoint()","^W",3,"^X",true,"^Y",1362,"^Z",1362,"^[",["^10",["^11",["^10",[["~$a","~$b","~$c","~$d","~$t"]]]]],"^13","Evalutes the curve at point t for points a, b, c, d. The parameter\n  t varies between 0 and 1, a and d are points on the curve, and b c\n  and are the control points. This can be done once with the x\n  coordinates and a second time with the y coordinates to get the\n  location of a curve at t."],"^R","1.0","^B","~$quil.core/curve-point","^15",false,"^S","Curves","^T","resources/public/js/development/quil/core.cljc","^U",14,"^V","curvePoint()","^16",["^10",[["~$a","~$b","~$c","~$d","~$t"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",1356,"^Z",1362,"^19",5,"^1:",true,"^[",["^10",["^11",["^10",[["~$a","~$b","~$c","~$d","~$t"]]]]],"^13","Evalutes the curve at point t for points a, b, c, d. The parameter\n  t varies between 0 and 1, a and d are points on the curve, and b c\n  and are the control points. This can be done once with the x\n  coordinates and a second time with the y coordinates to get the\n  location of a curve at t."],"~$state",["^ ","^O","State","^P",null,"^Q",["^ ","^O","State","^R","1.0","^S",null,"^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",8,"^1D",["^ ","^15",false,"^19",1,"^16",["^10",[[],["~$key"]]],"^[",["^10",[[],["^;S"]]],"^18",["^10",[null,null]]],"^W",3,"^X",true,"^Y",217,"^Z",217,"^[",["^10",["^11",["^10",[[],["^;S"]]]]],"^13","Retrieve sketch-specific state by key. Must initially call\n  set-state! to store state. If no parameter passed whole\n  state map is returned.\n\n  (set-state! :foo 1)\n  (state :foo) ;=> 1\n  (state) ;=> {:foo 1}"],"^R","1.0","^B","~$quil.core/state","^15",false,"^S",null,"^T","resources/public/js/development/quil/core.cljc","^U",8,"^1D",["^ ","^15",false,"^19",1,"^16",["^10",[[],["^;S"]]],"^[",["^10",[[],["^;S"]]],"^18",["^10",[null,null]]],"^16",["^10",[[],["^;S"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",212,"^Z",217,"^19",1,"^1:",true,"^[",["^10",[[],["^;S"]]],"^13","Retrieve sketch-specific state by key. Must initially call\n  set-state! to store state. If no parameter passed whole\n  state map is returned.\n\n  (set-state! :foo 1)\n  (state :foo) ;=> 1\n  (state) ;=> {:foo 1}"],"~$load-shader",["^ ","^O","Rendering","^P",null,"^Q",["^ ","^O","Rendering","^R","2.0","^S","Shaders","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",14,"^1D",["^ ","^15",false,"^19",2,"^16",["^10",[["~$fragment-filename"],["^;V","~$vertex-filename"]]],"^[",["^10",[["^;V"],["^;V","^;W"]]],"^18",["^10",[null,null]]],"^V","loadShader()","^W",3,"^X",true,"^Y",2400,"^Z",2400,"^[",["^10",["^11",["^10",[["^;V"],["^;V","^;W"]]]]],"^13","Loads a shader into the PShader object. Shaders are compatible with the\n  P2D and P3D renderers, but not with the default renderer."],"^R","2.0","^B","~$quil.core/load-shader","^15",false,"^S","Shaders","^T","resources/public/js/development/quil/core.cljc","^U",14,"^1D",["^ ","^15",false,"^19",2,"^16",["^10",[["^;V"],["^;V","^;W"]]],"^[",["^10",[["^;V"],["^;V","^;W"]]],"^18",["^10",[null,null]]],"^V","loadShader()","^16",["^10",[["^;V"],["^;V","^;W"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",2394,"^Z",2400,"^19",2,"^1:",true,"^[",["^10",[["^;V"],["^;V","^;W"]]],"^13","Loads a shader into the PShader object. Shaders are compatible with the\n  P2D and P3D renderers, but not with the default renderer."],"~$resize",["^ ","^O","Image","^P",null,"^Q",["^ ","^O","Image","^R","2.1.0","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",9,"^V","resize()","^W",3,"^4=","http://processing.org/reference/PImage_resize_.html","^X",true,"^Y",3417,"^Z",3417,"^[",["^10",["^11",["^10",[["^2=","~$w","~$h"]]]]],"^13","Resize the image to a new width and height.\n  To make the image scale proportionally, use 0 as the value for the wide or\n  high parameter. For instance, to make the width of an image 150 pixels,\n  and change the height using the same proportion, use resize(150, 0).\n\n  Even though a PGraphics is technically a PImage, it is not possible\n  to rescale the image data found in a PGraphics.\n  (It's simply not possible to do this consistently across renderers:\n  technically infeasible with P3D, or what would it even do with PDF?)\n  If you want to resize PGraphics content, first get a copy of its image data\n  using the get() method, and call resize() on the PImage that is returned."],"^R","2.1.0","^B","~$quil.core/resize","^15",false,"^T","resources/public/js/development/quil/core.cljc","^U",9,"^V","resize()","^16",["^10",[["^2=","~$w","~$h"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^4=","http://processing.org/reference/PImage_resize_.html","^X",true,"^Y",3411,"^Z",3417,"^19",3,"^1:",true,"^[",["^10",["^11",["^10",[["^2=","~$w","~$h"]]]]],"^13","Resize the image to a new width and height.\n  To make the image scale proportionally, use 0 as the value for the wide or\n  high parameter. For instance, to make the width of an image 150 pixels,\n  and change the height using the same proportion, use resize(150, 0).\n\n  Even though a PGraphics is technically a PImage, it is not possible\n  to rescale the image data found in a PGraphics.\n  (It's simply not possible to do this consistently across renderers:\n  technically infeasible with P3D, or what would it even do with PDF?)\n  If you want to resize PGraphics content, first get a copy of its image data\n  using the get() method, and call resize() on the PImage that is returned."],"~$normal",["^ ","^O","Lights, Camera","^P",null,"^Q",["^ ","^O","Lights, Camera","^R","1.0","^S","Lights","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",9,"^V","normal()","^W",3,"^X",true,"^Y",2807,"^Z",2807,"^[",["^10",["^11",["^10",[["^5Y","^5Z","^5["]]]]],"^13","Sets the current normal vector. This is for drawing three\n  dimensional shapes and surfaces and specifies a vector perpendicular\n  to the surface of the shape which determines how lighting affects\n  it. Processing attempts to automatically assign normals to shapes,\n  but since that's imperfect, this is a better option when you want\n  more control. This function is identical to glNormal3f() in OpenGL."],"^R","1.0","^B","~$quil.core/normal","^15",false,"^S","Lights","^T","resources/public/js/development/quil/core.cljc","^U",9,"^V","normal()","^16",["^10",[["^5Y","^5Z","^5["]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",2801,"^Z",2807,"^19",3,"^1:",true,"^[",["^10",["^11",["^10",[["^5Y","^5Z","^5["]]]]],"^13","Sets the current normal vector. This is for drawing three\n  dimensional shapes and surfaces and specifies a vector perpendicular\n  to the surface of the shape which determines how lighting affects\n  it. Processing attempts to automatically assign normals to shapes,\n  but since that's imperfect, this is a better option when you want\n  more control. This function is identical to glNormal3f() in OpenGL."],"~$perspective",["^ ","^O","Lights, Camera","^P",null,"^Q",["^ ","^O","Lights, Camera","^R","1.0","^S","Camera","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",14,"^1D",["^ ","^15",false,"^19",4,"^16",["^10",[[],["~$fovy","~$aspect","~$z-near","~$z-far"]]],"^[",["^10",[[],["^<2","^<3","^<4","^<5"]]],"^18",["^10",[null,null]]],"^V","perspective()","^W",3,"^X",true,"^Y",2879,"^Z",2879,"^[",["^10",["^11",["^10",[[],["^<2","^<3","^<4","^<5"]]]]],"^13","Sets a perspective projection applying foreshortening, making\n  distant objects appear smaller than closer ones. The parameters\n  define a viewing volume with the shape of truncated pyramid. Objects\n  near to the front of the volume appear their actual size, while\n  farther objects appear smaller. This projection simulates the\n  perspective of the world more accurately than orthographic\n  projection. The version of perspective without parameters sets the\n  default perspective and the version with four parameters allows the\n  programmer to set the area precisely. The default values are:\n  perspective(PI/3.0, width/height, cameraZ/10.0, cameraZ*10.0) where\n  cameraZ is ((height/2.0) / tan(PI*60.0/360.0));"],"^R","1.0","^B","~$quil.core/perspective","^15",false,"^S","Camera","^T","resources/public/js/development/quil/core.cljc","^U",14,"^1D",["^ ","^15",false,"^19",4,"^16",["^10",[[],["^<2","^<3","^<4","^<5"]]],"^[",["^10",[[],["^<2","^<3","^<4","^<5"]]],"^18",["^10",[null,null]]],"^V","perspective()","^16",["^10",[[],["^<2","^<3","^<4","^<5"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",2873,"^Z",2879,"^19",4,"^1:",true,"^[",["^10",[[],["^<2","^<3","^<4","^<5"]]],"^13","Sets a perspective projection applying foreshortening, making\n  distant objects appear smaller than closer ones. The parameters\n  define a viewing volume with the shape of truncated pyramid. Objects\n  near to the front of the volume appear their actual size, while\n  farther objects appear smaller. This projection simulates the\n  perspective of the world more accurately than orthographic\n  projection. The version of perspective without parameters sets the\n  default perspective and the version with four parameters allows the\n  programmer to set the area precisely. The default values are:\n  perspective(PI/3.0, width/height, cameraZ/10.0, cameraZ*10.0) where\n  cameraZ is ((height/2.0) / tan(PI*60.0/360.0));"],"~$seconds",["^ ","^O","Input","^P",null,"^Q",["^ ","^O","Input","^R","1.0","^S","Time & Date","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",10,"^V","second()","^W",3,"^X",false,"^Y",3700,"^Z",3700,"^[",["^10",["^11",["^10",[[]]]]],"^13","Returns the current second as a value from 0 - 59."],"^R","1.0","^B","~$quil.core/seconds","^15",false,"^S","Time & Date","^T","resources/public/js/development/quil/core.cljc","^U",10,"^V","second()","^16",["^10",[[]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",false,"^Y",3694,"^Z",3700,"^19",0,"^1:",true,"^[",["^10",["^11",["^10",[[]]]]],"^13","Returns the current second as a value from 0 - 59."],"~$hint",["^ ","^O","Rendering","^P",null,"^Q",["^ ","^O","Rendering","^R","1.0","^S",null,"^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",7,"^V","hint()","^W",3,"^4=",null,"^X",true,"^Y",1980,"^Z",1980,"^[",["^10",["^11",["^10",[["~$hint-type"]]]]],"^13","Set various hints and hacks for the renderer. This is used to\n  handle obscure rendering features that cannot be implemented in a\n  consistent manner across renderers. Many options will often graduate\n  to standard features instead of hints over time.\n\n  Options:\n\n  :enable-native-fonts - Use the native version fonts when they are\n    installed, rather than the bitmapped version from a .vlw\n    file. This is useful with the default (or JAVA2D) renderer\n    setting, as it will improve font rendering speed. This is not\n    enabled by default, because it can be misleading while testing\n    because the type will look great on your machine (because you have\n    the font installed) but lousy on others' machines if the identical\n    font is unavailable. This option can only be set per-sketch, and\n    must be called before any use of text-font.\n\n  :disable-native-fonts - Disables native font support.\n\n  :disable-depth-test - Disable the zbuffer, allowing you to draw on\n    top of everything at will. When depth testing is disabled, items\n    will be drawn to the screen sequentially, like a painting. This\n    hint is most often used to draw in 3D, then draw in 2D on top of\n    it (for instance, to draw GUI controls in 2D on top of a 3D\n    interface). Starting in release 0149, this will also clear the\n    depth buffer. Restore the default with :enable-depth-test\n    but note that with the depth buffer cleared, any 3D drawing that\n    happens later in draw will ignore existing shapes on the screen.\n\n  :enable-depth-test - Enables the zbuffer.\n\n  :enable-depth-sort - Enable primitive z-sorting of triangles and\n    lines in :p3d and :opengl rendering modes. This can slow\n    performance considerably, and the algorithm is not yet perfect.\n\n  :disable-depth-sort - Disables hint :enable-depth-sort\n\n  :disable-opengl-errors - Speeds up the OPENGL renderer setting\n     by not checking for errors while running.\n\n  :enable-opengl-errors - Turns on OpenGL error checking\n\n  :enable-depth-mask\n  :disable-depth-mask\n\n  :enable-optimized-stroke\n  :disable-optimized-stroke\n  :enable-retina-pixels\n  :disable-retina-pixels\n  :enable-stroke-perspective\n  :disable-stroke-perspective\n  :enable-stroke-pure\n  :disable-stroke-pure\n  :enable-texture-mipmaps\n  :disable-texture-mipmaps\n"],"^R","1.0","^B","~$quil.core/hint","^15",false,"^S",null,"^T","resources/public/js/development/quil/core.cljc","^U",7,"^V","hint()","^16",["^10",[["^<:"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^4=",null,"^X",true,"^Y",1973,"^Z",1980,"^19",1,"^1:",true,"^[",["^10",["^11",["^10",[["^<:"]]]]],"^13","Set various hints and hacks for the renderer. This is used to\n  handle obscure rendering features that cannot be implemented in a\n  consistent manner across renderers. Many options will often graduate\n  to standard features instead of hints over time.\n\n  Options:\n\n  :enable-native-fonts - Use the native version fonts when they are\n    installed, rather than the bitmapped version from a .vlw\n    file. This is useful with the default (or JAVA2D) renderer\n    setting, as it will improve font rendering speed. This is not\n    enabled by default, because it can be misleading while testing\n    because the type will look great on your machine (because you have\n    the font installed) but lousy on others' machines if the identical\n    font is unavailable. This option can only be set per-sketch, and\n    must be called before any use of text-font.\n\n  :disable-native-fonts - Disables native font support.\n\n  :disable-depth-test - Disable the zbuffer, allowing you to draw on\n    top of everything at will. When depth testing is disabled, items\n    will be drawn to the screen sequentially, like a painting. This\n    hint is most often used to draw in 3D, then draw in 2D on top of\n    it (for instance, to draw GUI controls in 2D on top of a 3D\n    interface). Starting in release 0149, this will also clear the\n    depth buffer. Restore the default with :enable-depth-test\n    but note that with the depth buffer cleared, any 3D drawing that\n    happens later in draw will ignore existing shapes on the screen.\n\n  :enable-depth-test - Enables the zbuffer.\n\n  :enable-depth-sort - Enable primitive z-sorting of triangles and\n    lines in :p3d and :opengl rendering modes. This can slow\n    performance considerably, and the algorithm is not yet perfect.\n\n  :disable-depth-sort - Disables hint :enable-depth-sort\n\n  :disable-opengl-errors - Speeds up the OPENGL renderer setting\n     by not checking for errors while running.\n\n  :enable-opengl-errors - Turns on OpenGL error checking\n\n  :enable-depth-mask\n  :disable-depth-mask\n\n  :enable-optimized-stroke\n  :disable-optimized-stroke\n  :enable-retina-pixels\n  :disable-retina-pixels\n  :enable-stroke-perspective\n  :disable-stroke-perspective\n  :enable-stroke-pure\n  :disable-stroke-pure\n  :enable-texture-mipmaps\n  :disable-texture-mipmaps\n"],"~$sphere-detail",["^ ","^O","Shape","^P",null,"^Q",["^ ","^O","Shape","^R","1.0","^S","3D Primitives","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",16,"^1D",["^ ","^15",false,"^19",2,"^16",["^10",[["~$res"],["~$ures","~$vres"]]],"^[",["^10",[["^<="],["^<>","^<?"]]],"^18",["^10",[null,null]]],"^V","sphereDetail()","^W",3,"^X",true,"^Y",3949,"^Z",3949,"^[",["^10",["^11",["^10",[["^<="],["^<>","^<?"]]]]],"^13","Controls the detail used to render a sphere by adjusting the number\n  of vertices of the sphere mesh. The default resolution is 30, which\n  creates a fairly detailed sphere definition with vertices every\n  360/30 = 12 degrees. If you're going to render a great number of\n  spheres per frame, it is advised to reduce the level of detail using\n  this function. The setting stays active until sphere-detail is\n  called again with a new parameter and so should not be called prior\n  to every sphere statement, unless you wish to render spheres with\n  different settings, e.g. using less detail for smaller spheres or\n  ones further away from the camera. To controla the detail of the\n  horizontal and vertical resolution independently, use the version of\n  the functions with two parameters."],"^R","1.0","^B","~$quil.core/sphere-detail","^15",false,"^S","3D Primitives","^T","resources/public/js/development/quil/core.cljc","^U",16,"^1D",["^ ","^15",false,"^19",2,"^16",["^10",[["^<="],["^<>","^<?"]]],"^[",["^10",[["^<="],["^<>","^<?"]]],"^18",["^10",[null,null]]],"^V","sphereDetail()","^16",["^10",[["^<="],["^<>","^<?"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",3943,"^Z",3949,"^19",2,"^1:",true,"^[",["^10",[["^<="],["^<>","^<?"]]],"^13","Controls the detail used to render a sphere by adjusting the number\n  of vertices of the sphere mesh. The default resolution is 30, which\n  creates a fairly detailed sphere definition with vertices every\n  360/30 = 12 degrees. If you're going to render a great number of\n  spheres per frame, it is advised to reduce the level of detail using\n  this function. The setting stays active until sphere-detail is\n  called again with a new parameter and so should not be called prior\n  to every sphere statement, unless you wish to render spheres with\n  different settings, e.g. using less detail for smaller spheres or\n  ones further away from the camera. To controla the detail of the\n  horizontal and vertical resolution independently, use the version of\n  the functions with two parameters."],"~$vertex",["^ ","^O","Shape","^P",null,"^Q",["^ ","^O","Shape","^R","1.0","^S","Vertex","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",9,"^1D",["^ ","^15",false,"^19",5,"^16",["^10",[["~$x","~$y"],["~$x","~$y","~$z"],["~$x","~$y","~$u","~$v"],["~$x","~$y","~$z","~$u","~$v"]]],"^[",["^10",[["~$x","~$y"],["~$x","~$y","~$z"],["~$x","~$y","~$u","~$v"],["~$x","~$y","~$z","~$u","~$v"]]],"^18",["^10",[null,null,null,null]]],"^V","vertex()","^W",3,"^X",true,"^Y",4596,"^Z",4596,"^[",["^10",["^11",["^10",[["~$x","~$y"],["~$x","~$y","~$z"],["~$x","~$y","~$u","~$v"],["~$x","~$y","~$z","~$u","~$v"]]]]],"^13","All shapes are constructed by connecting a series of\n  vertices. vertex is used to specify the vertex coordinates for\n  points, lines, triangles, quads, and polygons and is used\n  exclusively within the begin-shape and end-shape fns.\n\n  Drawing a vertex in 3D using the z parameter requires the :p3d or\n  :opengl renderers to be used.\n\n  This function is also used to map a texture onto the geometry. The\n  texture fn declares the texture to apply to the geometry and the u\n  and v coordinates set define the mapping of this texture to the\n  form. By default, the coordinates used for u and v are specified in\n  relation to the image's size in pixels, but this relation can be\n  changed with texture-mode."],"^R","1.0","^B","~$quil.core/vertex","^15",false,"^S","Vertex","^T","resources/public/js/development/quil/core.cljc","^U",9,"^1D",["^ ","^15",false,"^19",5,"^16",["^10",[["~$x","~$y"],["~$x","~$y","~$z"],["~$x","~$y","~$u","~$v"],["~$x","~$y","~$z","~$u","~$v"]]],"^[",["^10",[["~$x","~$y"],["~$x","~$y","~$z"],["~$x","~$y","~$u","~$v"],["~$x","~$y","~$z","~$u","~$v"]]],"^18",["^10",[null,null,null,null]]],"^V","vertex()","^16",["^10",[["~$x","~$y"],["~$x","~$y","~$z"],["~$x","~$y","~$u","~$v"],["~$x","~$y","~$z","~$u","~$v"]]],"^17",null,"^18",["^10",[null,null,null,null]],"^W",1,"^X",true,"^Y",4590,"^Z",4596,"^19",5,"^1:",true,"^[",["^10",[["~$x","~$y"],["~$x","~$y","~$z"],["~$x","~$y","~$u","~$v"],["~$x","~$y","~$z","~$u","~$v"]]],"^13","All shapes are constructed by connecting a series of\n  vertices. vertex is used to specify the vertex coordinates for\n  points, lines, triangles, quads, and polygons and is used\n  exclusively within the begin-shape and end-shape fns.\n\n  Drawing a vertex in 3D using the z parameter requires the :p3d or\n  :opengl renderers to be used.\n\n  This function is also used to map a texture onto the geometry. The\n  texture fn declares the texture to apply to the geometry and the u\n  and v coordinates set define the mapping of this texture to the\n  form. By default, the coordinates used for u and v are specified in\n  relation to the image's size in pixels, but this relation can be\n  changed with texture-mode."],"~$delay-frame",["^ ","^O","Structure","^P",null,"^Q",["^ ","^O","Structure","^R","1.0","^S",null,"^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",14,"^V","delay()","^W",3,"^4=",null,"^X",true,"^Y",1456,"^Z",1456,"^[",["^10",["^11",["^10",[["~$freeze-ms"]]]]],"^13","Forces the program to stop running for a specified time. Delay\n  times are specified in thousandths of a second, therefore the\n  function call (delay 3000) will stop the program for three\n  seconds. Because the screen is updated only at the end of draw,\n  the program may appear to 'freeze', because the screen will not\n  update when the delay fn is used. This function has no affect\n  inside setup."],"^R","1.0","^B","~$quil.core/delay-frame","^15",false,"^S",null,"^T","resources/public/js/development/quil/core.cljc","^U",14,"^V","delay()","^16",["^10",[["^<D"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^4=",null,"^X",true,"^Y",1449,"^Z",1456,"^19",1,"^1:",true,"^[",["^10",["^11",["^10",[["^<D"]]]]],"^13","Forces the program to stop running for a specified time. Delay\n  times are specified in thousandths of a second, therefore the\n  function call (delay 3000) will stop the program for three\n  seconds. Because the screen is updated only at the end of draw,\n  the program may appear to 'freeze', because the screen will not\n  update when the delay fn is used. This function has no affect\n  inside setup."],"~$horizontal-alignment-modes",["^ ","^B","~$quil.core/horizontal-alignment-modes","^T","resources/public/js/development/quil/core.cljc","^Y",45,"^W",1,"^Z",68,"^U",28,"^Q",["^ ","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^Y",68,"^W",2,"^Z",68,"^U",28],"^1=","^1>"],"~$spot-light",["^ ","^O","Lights, Camera","^P",null,"^Q",["^ ","^O","Lights, Camera","^R","1.0","^S","Lights","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",13,"^1D",["^ ","^15",false,"^19",11,"^16",["^10",[["~$r","~$g","~$b","~$x","~$y","~$z","^5Y","^5Z","^5[","^12","~$concentration"],[["~$r","~$g","~$b"],["~$x","~$y","~$z"],["^5Y","^5Z","^5["],"^12","^<I"]]],"^[",["^10",[["~$r","~$g","~$b","~$x","~$y","~$z","^5Y","^5Z","^5[","^12","^<I"],[["~$r","~$g","~$b"],["~$x","~$y","~$z"],["^5Y","^5Z","^5["],"^12","^<I"]]],"^18",["^10",[null,null]]],"^V","spotLight()","^W",3,"^X",true,"^Y",3971,"^Z",3971,"^[",["^10",["^11",["^10",[["~$r","~$g","~$b","~$x","~$y","~$z","^5Y","^5Z","^5[","^12","^<I"],[["~$r","~$g","~$b"],["~$x","~$y","~$z"],["^5Y","^5Z","^5["],"^12","^<I"]]]]],"^13","Adds a spot light. Lights need to be included in the draw to\n  remain persistent in a looping program. Placing them in the setup\n  of a looping program will cause them to only have an effect the\n  first time through the loop. The affect of the r, g, and b\n  parameters is determined by the current color mode. The x, y, and z\n  parameters specify the position of the light and nx, ny, nz specify\n  the direction or light. The angle parameter affects angle of the\n  spotlight cone."],"^R","1.0","^B","~$quil.core/spot-light","^15",false,"^S","Lights","^T","resources/public/js/development/quil/core.cljc","^U",13,"^1D",["^ ","^15",false,"^19",11,"^16",["^10",[["~$r","~$g","~$b","~$x","~$y","~$z","^5Y","^5Z","^5[","^12","^<I"],[["~$r","~$g","~$b"],["~$x","~$y","~$z"],["^5Y","^5Z","^5["],"^12","^<I"]]],"^[",["^10",[["~$r","~$g","~$b","~$x","~$y","~$z","^5Y","^5Z","^5[","^12","^<I"],[["~$r","~$g","~$b"],["~$x","~$y","~$z"],["^5Y","^5Z","^5["],"^12","^<I"]]],"^18",["^10",[null,null]]],"^V","spotLight()","^16",["^10",[["~$r","~$g","~$b","~$x","~$y","~$z","^5Y","^5Z","^5[","^12","^<I"],[["~$r","~$g","~$b"],["~$x","~$y","~$z"],["^5Y","^5Z","^5["],"^12","^<I"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",3965,"^Z",3971,"^19",11,"^1:",true,"^[",["^10",[["~$r","~$g","~$b","~$x","~$y","~$z","^5Y","^5Z","^5[","^12","^<I"],[["~$r","~$g","~$b"],["~$x","~$y","~$z"],["^5Y","^5Z","^5["],"^12","^<I"]]],"^13","Adds a spot light. Lights need to be included in the draw to\n  remain persistent in a looping program. Placing them in the setup\n  of a looping program will cause them to only have an effect the\n  first time through the loop. The affect of the r, g, and b\n  parameters is determined by the current color mode. The x, y, and z\n  parameters specify the position of the light and nx, ny, nz specify\n  the direction or light. The angle parameter affects angle of the\n  spotlight cone."],"~$target-frame-rate",["^ ","^O","Environment","^P",null,"^Q",["^ ","^O","Environment","^R","1.5.0","^S",null,"^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",20,"^W",3,"^X",true,"^Y",4142,"^Z",4142,"^[",["^10",["^11",["^10",[[]]]]],"^13","Returns the target framerate specified with the fn frame-rate"],"^R","1.5.0","^B","~$quil.core/target-frame-rate","^15",false,"^S",null,"^T","resources/public/js/development/quil/core.cljc","^U",20,"^16",["^10",[[]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",4137,"^Z",4142,"^19",0,"^1:",true,"^[",["^10",["^11",["^10",[[]]]]],"^13","Returns the target framerate specified with the fn frame-rate"],"~$tint",["^ ","^O","Image","^P",null,"^Q",["^ ","^O","Image","^R","1.0","^S","Loading & Displaying","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",7,"^1D",["^ ","^15",false,"^19",4,"^16",["^10",[["^3I"],["^3I","^2N"],["~$r","~$g","~$b"],["~$r","~$g","~$b","~$a"]]],"^[",["^10",[["^3I"],["^3I","^2N"],["~$r","~$g","~$b"],["~$r","~$g","~$b","~$a"]]],"^18",["^10",[null,null,null,null]]],"^V","tint()","^W",3,"^X",true,"^Y",4477,"^Z",4477,"^[",["^10",["^11",["^10",[["^3I"],["^3I","^2N"],["~$r","~$g","~$b"],["~$r","~$g","~$b","~$a"]]]]],"^13","Sets the fill value for displaying images. Images can be tinted to\n  specified colors or made transparent by setting the alpha.\n\n  To make an image transparent, but not change it's color, use white\n  as the tint color and specify an alpha value. For instance,\n  tint(255, 128) will make an image 50% transparent (unless\n  colorMode() has been used).\n\n  The value for the parameter gray must be less than or equal to the\n  current maximum value as specified by colorMode(). The default\n  maximum value is 255.\n\n  Also used to control the coloring of textures in 3D."],"^R","1.0","^B","~$quil.core/tint","^15",false,"^S","Loading & Displaying","^T","resources/public/js/development/quil/core.cljc","^U",7,"^1D",["^ ","^15",false,"^19",4,"^16",["^10",[["^3I"],["^3I","^2N"],["~$r","~$g","~$b"],["~$r","~$g","~$b","~$a"]]],"^[",["^10",[["^3I"],["^3I","^2N"],["~$r","~$g","~$b"],["~$r","~$g","~$b","~$a"]]],"^18",["^10",[null,null,null,null]]],"^V","tint()","^16",["^10",[["^3I"],["^3I","^2N"],["~$r","~$g","~$b"],["~$r","~$g","~$b","~$a"]]],"^17",null,"^18",["^10",[null,null,null,null]],"^W",1,"^X",true,"^Y",4471,"^Z",4477,"^19",4,"^1:",true,"^[",["^10",[["^3I"],["^3I","^2N"],["~$r","~$g","~$b"],["~$r","~$g","~$b","~$a"]]],"^13","Sets the fill value for displaying images. Images can be tinted to\n  specified colors or made transparent by setting the alpha.\n\n  To make an image transparent, but not change it's color, use white\n  as the tint color and specify an alpha value. For instance,\n  tint(255, 128) will make an image 50% transparent (unless\n  colorMode() has been used).\n\n  The value for the parameter gray must be less than or equal to the\n  current maximum value as specified by colorMode(). The default\n  maximum value is 255.\n\n  Also used to control the coloring of textures in 3D."],"~$bezier-tangent",["^ ","^O","Shape","^P",null,"^Q",["^ ","^O","Shape","^R","1.0","^S","Curves","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",17,"^V","bezierTangent()","^W",3,"^X",true,"^Y",723,"^Z",723,"^[",["^10",["^11",["^10",[["~$a","~$b","~$c","~$d","~$t"]]]]],"^13","Calculates the tangent of a point on a Bezier curve.\n  (See http://en.wikipedia.org/wiki/Tangent)"],"^R","1.0","^B","~$quil.core/bezier-tangent","^15",false,"^S","Curves","^T","resources/public/js/development/quil/core.cljc","^U",17,"^V","bezierTangent()","^16",["^10",[["~$a","~$b","~$c","~$d","~$t"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",717,"^Z",723,"^19",5,"^1:",true,"^[",["^10",["^11",["^10",[["~$a","~$b","~$c","~$d","~$t"]]]]],"^13","Calculates the tangent of a point on a Bezier curve.\n  (See http://en.wikipedia.org/wiki/Tangent)"],"~$asin",["^ ","^O","Math","^P",null,"^Q",["^ ","^O","Math","^R","1.0","^S","Trigonometry","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",7,"^V","asin()","^W",3,"^X",false,"^Y",445,"^Z",445,"^[",["^10",["^11",["^10",[["~$n"]]]]],"^13","The inverse of sin, returns the arc sine of a value. This function\n  expects the values in the range of -1 to 1 and values are returned\n  in the range -PI/2 to PI/2."],"^R","1.0","^B","~$quil.core/asin","^15",false,"^S","Trigonometry","^T","resources/public/js/development/quil/core.cljc","^U",7,"^V","asin()","^16",["^10",[["~$n"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",false,"^Y",439,"^Z",445,"^19",1,"^1:",true,"^[",["^10",["^11",["^10",[["~$n"]]]]],"^13","The inverse of sin, returns the arc sine of a value. This function\n  expects the values in the range of -1 to 1 and values are returned\n  in the range -PI/2 to PI/2."],"~$lerp",["^ ","^O","Math","^P",null,"^Q",["^ ","^O","Math","^R","1.0","^S","Calculation","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",7,"^V","lerp()","^W",3,"^X",false,"^Y",2264,"^Z",2264,"^[",["^10",["^11",["^10",[["^86","^87","^2Q"]]]]],"^13","Calculates a number between two numbers at a specific\n  increment. The amt parameter is the amount to interpolate between\n  the two values where 0.0 equal to the first point, 0.1 is very near\n  the first point, 0.5 is half-way in between, etc. The lerp function\n  is convenient for creating motion along a straight path and for\n  drawing dotted lines."],"^R","1.0","^B","~$quil.core/lerp","^15",false,"^S","Calculation","^T","resources/public/js/development/quil/core.cljc","^U",7,"^V","lerp()","^16",["^10",[["^86","^87","^2Q"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",false,"^Y",2258,"^Z",2264,"^19",3,"^1:",true,"^[",["^10",["^11",["^10",[["^86","^87","^2Q"]]]]],"^13","Calculates a number between two numbers at a specific\n  increment. The amt parameter is the amount to interpolate between\n  the two values where 0.0 equal to the first point, 0.1 is very near\n  the first point, 0.5 is half-way in between, etc. The lerp function\n  is convenient for creating motion along a straight path and for\n  drawing dotted lines."],"~$unhex",["^ ","^O","Data","^P",null,"^Q",["^ ","^O","Data","^4Q",false,"^S","Conversion","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",8,"^V","hex()","^W",3,"^Y",4554,"^Z",4554,"^[",["^10",["^11",["^10",[["~$hex-str"]]]]],"^13","Converts a String representation of a hexadecimal number to its\n  equivalent integer value."],"^4Q",false,"^B","~$quil.core/unhex","^15",false,"^S","Conversion","^T","resources/public/js/development/quil/core.cljc","^U",8,"^V","hex()","^16",["^10",[["^<V"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^Y",4549,"^Z",4554,"^19",1,"^1:",true,"^[",["^10",["^11",["^10",[["^<V"]]]]],"^13","Converts a String representation of a hexadecimal number to its\n  equivalent integer value."],"~$begin-camera",["^ ","^O","Lights, Camera","^P",null,"^Q",["^ ","^O","Lights, Camera","^R","1.0","^S","Camera","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",15,"^V","beginCamera()","^W",3,"^X",true,"^Y",586,"^Z",586,"^[",["^10",["^11",["^10",[[]]]]],"^13","Sets the matrix mode to the camera matrix so calls such as\n  translate, rotate, apply-matrix and reset-matrix affect the\n  camera. begin-camera should always be used with a following\n  end-camera and pairs of begin-camera and end-camera cannot be\n  nested.\n\n  For most situations the camera function will be sufficient."],"^R","1.0","^B","~$quil.core/begin-camera","^15",false,"^S","Camera","^T","resources/public/js/development/quil/core.cljc","^U",15,"^V","beginCamera()","^16",["^10",[[]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",580,"^Z",586,"^19",0,"^1:",true,"^[",["^10",["^11",["^10",[[]]]]],"^13","Sets the matrix mode to the camera matrix so calls such as\n  translate, rotate, apply-matrix and reset-matrix affect the\n  camera. begin-camera should always be used with a following\n  end-camera and pairs of begin-camera and end-camera cannot be\n  nested.\n\n  For most situations the camera function will be sufficient."],"~$text-num",["^ ","^O","Typography","^P",null,"^Q",["^ ","^O","Typography","^R","1.0","^S","Loading & Displaying","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",11,"^1D",["^ ","^15",false,"^19",4,"^16",["^10",[["^:4","~$x","~$y"],["^:4","~$x","~$y","~$z"]]],"^[",["^10",[["^:4","~$x","~$y"],["^:4","~$x","~$y","~$z"]]],"^18",["^10",[null,null]]],"^V","text()","^W",3,"^X",true,"^Y",4176,"^Z",4176,"^[",["^10",["^11",["^10",[["^:4","~$x","~$y"],["^:4","~$x","~$y","~$z"]]]]],"^13","Draws a number to the screen in the specified position. See text fn\n  for more details."],"^R","1.0","^B","~$quil.core/text-num","^15",false,"^S","Loading & Displaying","^T","resources/public/js/development/quil/core.cljc","^U",11,"^1D",["^ ","^15",false,"^19",4,"^16",["^10",[["^:4","~$x","~$y"],["^:4","~$x","~$y","~$z"]]],"^[",["^10",[["^:4","~$x","~$y"],["^:4","~$x","~$y","~$z"]]],"^18",["^10",[null,null]]],"^V","text()","^16",["^10",[["^:4","~$x","~$y"],["^:4","~$x","~$y","~$z"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",4170,"^Z",4176,"^19",4,"^1:",true,"^[",["^10",[["^:4","~$x","~$y"],["^:4","~$x","~$y","~$z"]]],"^13","Draws a number to the screen in the specified position. See text fn\n  for more details."],"~$round",["^ ","^O","Math","^P",null,"^Q",["^ ","^O","Math","^R","1.0","^S","Calculation","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",8,"^V","round()","^W",3,"^X",false,"^Y",3543,"^Z",3543,"^[",["^10",["^11",["^10",[["^34"]]]]],"^13","Calculates the integer closest to the value parameter. For example,\n  (round 9.2) returns the value 9."],"^R","1.0","^B","~$quil.core/round","^15",false,"^S","Calculation","^T","resources/public/js/development/quil/core.cljc","^U",8,"^V","round()","^16",["^10",[["^34"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",false,"^Y",3537,"^Z",3543,"^19",1,"^1:",true,"^[",["^10",["^11",["^10",[["^34"]]]]],"^13","Calculates the integer closest to the value parameter. For example,\n  (round 9.2) returns the value 9."],"~$background-image",["^ ","^O","Color","^P",null,"^Q",["^ ","^O","Color","^R","1.0","^S","Setting","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",19,"^V","background()","^W",3,"^X",true,"^Y",573,"^Z",573,"^[",["^10",["^11",["^10",[["^2="]]]]],"^13","Specify an image to be used as the background for a sketch. Its\n  width and height must be the same size as the sketch window. Images\n  used as background will ignore the current tint setting."],"^R","1.0","^B","~$quil.core/background-image","^15",false,"^S","Setting","^T","resources/public/js/development/quil/core.cljc","^U",19,"^V","background()","^16",["^10",[["^2="]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",567,"^Z",573,"^19",1,"^1:",true,"^[",["^10",["^11",["^10",[["^2="]]]]],"^13","Specify an image to be used as the background for a sketch. Its\n  width and height must be the same size as the sketch window. Images\n  used as background will ignore the current tint setting."],"~$load-shape",["^ ","^O","Shape","^P",null,"^Q",["^ ","^O","Shape","^R","1.0","^S","Loading & Displaying","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",13,"^V","loadShape()","^W",3,"^X",true,"^Y",2414,"^Z",2414,"^[",["^10",["^11",["^10",[["^54"]]]]],"^13","Load a geometry from a file as a PShape."],"^R","1.0","^B","~$quil.core/load-shape","^15",false,"^S","Loading & Displaying","^T","resources/public/js/development/quil/core.cljc","^U",13,"^V","loadShape()","^16",["^10",[["^54"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",2408,"^Z",2414,"^19",1,"^1:",true,"^[",["^10",["^11",["^10",[["^54"]]]]],"^13","Load a geometry from a file as a PShape."],"~$vertical-alignment-modes",["^ ","^B","~$quil.core/vertical-alignment-modes","^T","resources/public/js/development/quil/core.cljc","^Y",45,"^W",1,"^Z",69,"^U",26,"^Q",["^ ","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^Y",69,"^W",2,"^Z",69,"^U",26],"^1=","^1>"],"~$blend-color",["^ ","^O","Color","^P",null,"^Q",["^ ","^O","Color","^R","1.0","^S","Creating & Reading","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",14,"^V","blendColor()","^W",3,"^4=",null,"^X",false,"^Y",829,"^Z",829,"^[",["^10",["^11",["^10",[["^3T","^3U","^1G"]]]]],"^13","Blends two color values together based on the blending mode given specified\n  with the mode keyword.\n\n  Available blend modes are:\n\n  :blend      - linear interpolation of colours: C = A*factor + B\n  :add        - additive blending with white clip:\n                                            C = min(A*factor + B, 255)\n  :subtract   - subtractive blending with black clip:\n                                            C = max(B - A*factor, 0)\n  :darkest    - only the darkest colour succeeds:\n                                            C = min(A*factor, B)\n  :lightest   - only the lightest colour succeeds:\n                                            C = max(A*factor, B)\n  :difference - subtract colors from underlying image.\n  :exclusion  - similar to :difference, but less extreme.\n  :multiply   - Multiply the colors, result will always be darker.\n  :screen     - Opposite multiply, uses inverse values of the colors.\n  :overlay    - A mix of :multiply and :screen. Multiplies dark values\n                and screens light values.\n  :hard-light - :screen when greater than 50% gray, :multiply when\n                lower.\n  :soft-light - Mix of :darkest and :lightest. Works like :overlay,\n                but not as harsh.\n  :dodge      - Lightens light tones and increases contrast, ignores\n                darks.\n                Called \"Color Dodge\" in Illustrator and Photoshop.\n  :burn       - Darker areas are applied, increasing contrast, ignores\n                lights. Called \"Color Burn\" in Illustrator and\n                Photoshop."],"^R","1.0","^B","~$quil.core/blend-color","^15",false,"^S","Creating & Reading","^T","resources/public/js/development/quil/core.cljc","^U",14,"^V","blendColor()","^16",["^10",[["^3T","^3U","^1G"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^4=",null,"^X",false,"^Y",822,"^Z",829,"^19",3,"^1:",true,"^[",["^10",["^11",["^10",[["^3T","^3U","^1G"]]]]],"^13","Blends two color values together based on the blending mode given specified\n  with the mode keyword.\n\n  Available blend modes are:\n\n  :blend      - linear interpolation of colours: C = A*factor + B\n  :add        - additive blending with white clip:\n                                            C = min(A*factor + B, 255)\n  :subtract   - subtractive blending with black clip:\n                                            C = max(B - A*factor, 0)\n  :darkest    - only the darkest colour succeeds:\n                                            C = min(A*factor, B)\n  :lightest   - only the lightest colour succeeds:\n                                            C = max(A*factor, B)\n  :difference - subtract colors from underlying image.\n  :exclusion  - similar to :difference, but less extreme.\n  :multiply   - Multiply the colors, result will always be darker.\n  :screen     - Opposite multiply, uses inverse values of the colors.\n  :overlay    - A mix of :multiply and :screen. Multiplies dark values\n                and screens light values.\n  :hard-light - :screen when greater than 50% gray, :multiply when\n                lower.\n  :soft-light - Mix of :darkest and :lightest. Works like :overlay,\n                but not as harsh.\n  :dodge      - Lightens light tones and increases contrast, ignores\n                darks.\n                Called \"Color Dodge\" in Illustrator and Photoshop.\n  :burn       - Darker areas are applied, increasing contrast, ignores\n                lights. Called \"Color Burn\" in Illustrator and\n                Photoshop."],"~$QUARTER-PI",["^ ","^B","~$quil.core/QUARTER-PI","^T","resources/public/js/development/quil/core.cljc","^Y",81,"^W",1,"^Z",81,"^U",16,"^Q",["^ ","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^Y",81,"^W",6,"^Z",81,"^U",16],"^1=","^4O"],"~$stroke-cap",["^ ","^O","Shape","^P",null,"^Q",["^ ","^O","Shape","^R","1.0","^S","Attributes","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",13,"^V","strokeCap()","^W",3,"^X",true,"^Y",4080,"^Z",4080,"^[",["^10",["^11",["^10",[["~$cap-mode"]]]]],"^13","Sets the style for rendering line endings. These ends are either\n  squared, extended, or rounded and specified with the corresponding\n  parameters :square, :project, and :round. The default cap is :round."],"^R","1.0","^B","~$quil.core/stroke-cap","^15",false,"^S","Attributes","^T","resources/public/js/development/quil/core.cljc","^U",13,"^V","strokeCap()","^16",["^10",[["^=="]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",4074,"^Z",4080,"^19",1,"^1:",true,"^[",["^10",["^11",["^10",[["^=="]]]]],"^13","Sets the style for rendering line endings. These ends are either\n  squared, extended, or rounded and specified with the corresponding\n  parameters :square, :project, and :round. The default cap is :round."],"~$blend-modes",["^ ","^B","~$quil.core/blend-modes","^T","resources/public/js/development/quil/core.cljc","^Y",45,"^W",1,"^Z",49,"^U",13,"^Q",["^ ","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^Y",49,"^W",2,"^Z",49,"^U",13],"^1=","^1>"],"~$no-fill",["^ ","^O","Color","^P",null,"^Q",["^ ","^O","Color","^R","1.0","^S","Setting","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",10,"^V","noFill()","^W",3,"^X",true,"^Y",2662,"^Z",2662,"^[",["^10",["^11",["^10",[[]]]]],"^13","Disables filling geometry. If both no-stroke and no-fill are called,\n  nothing will be drawn to the screen."],"^R","1.0","^B","~$quil.core/no-fill","^15",false,"^S","Setting","^T","resources/public/js/development/quil/core.cljc","^U",10,"^V","noFill()","^16",["^10",[[]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",2656,"^Z",2662,"^19",0,"^1:",true,"^[",["^10",["^11",["^10",[[]]]]],"^13","Disables filling geometry. If both no-stroke and no-fill are called,\n  nothing will be drawn to the screen."],"~$resize-sketch",["^ ","^O","Environment","^P",null,"^Q",["^ ","^O","Environment","^R","2.7.0","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",16,"^W",3,"^8V",true,"^Y",3436,"^Z",3436,"^[",["^10",["^11",["^10",[["^1O","^1P"]]]]],"^13","Resizes sketch.\n  Note about ClojureScript version: if canvas element is resized by external\n  reasons (for example from js on a page then you still need to call this\n  method in order to tell Quil that size has changed. Currently there is no\n  good way to automatically detect that size of <canvas> element changed."],"^R","2.7.0","^B","~$quil.core/resize-sketch","^15",false,"^T","resources/public/js/development/quil/core.cljc","^U",16,"^16",["^10",[["^1O","^1P"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^8V",true,"^Y",3432,"^Z",3436,"^19",2,"^1:",true,"^[",["^10",["^11",["^10",[["^1O","^1P"]]]]],"^13","Resizes sketch.\n  Note about ClojureScript version: if canvas element is resized by external\n  reasons (for example from js on a page then you still need to call this\n  method in order to tell Quil that size has changed. Currently there is no\n  good way to automatically detect that size of <canvas> element changed."],"~$year",["^ ","^O","Input","^P",null,"^Q",["^ ","^O","Input","^R","1.0","^S","Time & Date","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",7,"^V","year()","^W",3,"^X",false,"^Y",4623,"^Z",4623,"^[",["^10",["^11",["^10",[[]]]]],"^13","Returns the current year as an integer (2003, 2004, 2005, etc)."],"^R","1.0","^B","~$quil.core/year","^15",false,"^S","Time & Date","^T","resources/public/js/development/quil/core.cljc","^U",7,"^V","year()","^16",["^10",[[]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",false,"^Y",4617,"^Z",4623,"^19",0,"^1:",true,"^[",["^10",["^11",["^10",[[]]]]],"^13","Returns the current year as an integer (2003, 2004, 2005, etc)."],"~$key-coded?",["^ ","^O","Input","^P",null,"^Q",["^ ","^O","Input","^R","1.6","^S","Keyboard","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",13,"^V",null,"^W",3,"^X",false,"^Y",4903,"^Z",4903,"^[",["^10",["^11",["^10",[["~$c"]]]]],"^13","Returns true if char c is a 'coded' char i.e. it is necessary to\n  fetch the key-code as an integer and use that to determine the\n  specific key pressed. See key-keyword."],"^R","1.6","^B","~$quil.core/key-coded?","^15",false,"^S","Keyboard","^T","resources/public/js/development/quil/core.cljc","^U",13,"^V",null,"^16",["^10",[["~$c"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",false,"^Y",4898,"^Z",4903,"^19",1,"^1:",true,"^[",["^10",["^11",["^10",[["~$c"]]]]],"^13","Returns true if char c is a 'coded' char i.e. it is necessary to\n  fetch the key-code as an integer and use that to determine the\n  specific key pressed. See key-keyword."],"~$curve-tangent",["^ ","^O","Shape","^P",null,"^Q",["^ ","^O","Shape","^R","1.0","^S","Curves","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",16,"^V","curveTangent()","^W",3,"^X",true,"^Y",1377,"^Z",1377,"^[",["^10",["^11",["^10",[["~$a","~$b","~$c","~$d","~$t"]]]]],"^13","Calculates the tangent of a point on a curve.\n  See: http://en.wikipedia.org/wiki/Tangent"],"^R","1.0","^B","~$quil.core/curve-tangent","^15",false,"^S","Curves","^T","resources/public/js/development/quil/core.cljc","^U",16,"^V","curveTangent()","^16",["^10",[["~$a","~$b","~$c","~$d","~$t"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",1371,"^Z",1377,"^19",5,"^1:",true,"^[",["^10",["^11",["^10",[["~$a","~$b","~$c","~$d","~$t"]]]]],"^13","Calculates the tangent of a point on a curve.\n  See: http://en.wikipedia.org/wiki/Tangent"],"~$ellipse-modes",["^ ","^B","~$quil.core/ellipse-modes","^T","resources/public/js/development/quil/core.cljc","^Y",45,"^W",1,"^Z",53,"^U",15,"^Q",["^ ","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^Y",53,"^W",2,"^Z",53,"^U",15],"^1=","^1>"],"~$pmouse-y",["^ ","^O","Input","^P",null,"^Q",["^ ","^O","Input","^R","1.0","^S","Mouse","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",11,"^V","pmouseY","^W",3,"^X",true,"^Y",2954,"^Z",2954,"^[",["^10",["^11",["^10",[[]]]]],"^13","Vertical coordinate of the mouse in the previous frame"],"^R","1.0","^B","~$quil.core/pmouse-y","^15",false,"^S","Mouse","^T","resources/public/js/development/quil/core.cljc","^U",11,"^V","pmouseY","^16",["^10",[[]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",2948,"^Z",2954,"^19",0,"^1:",true,"^[",["^10",["^11",["^10",[[]]]]],"^13","Vertical coordinate of the mouse in the previous frame"],"~$hex",["^ ","^O","Data","^P",null,"^Q",["^ ","^O","Data","^4Q",false,"^S","Conversion","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",6,"^1D",["^ ","^15",false,"^19",2,"^16",["^10",[["^34"],["^34","^4R"]]],"^[",["^10",[["^34"],["^34","^4R"]]],"^18",["^10",[null,null]]],"^V","hex()","^W",3,"^Y",1948,"^Z",1948,"^[",["^10",["^11",["^10",[["^34"],["^34","^4R"]]]]],"^13","Converts a byte, char, int, or color to a String containing the\n  equivalent hexadecimal notation. For example color(0, 102, 153) will\n  convert to the String \"FF006699\". This function can help make your\n  geeky debugging sessions much happier. "],"^4Q",false,"^B","~$quil.core/hex","^15",false,"^S","Conversion","^T","resources/public/js/development/quil/core.cljc","^U",6,"^1D",["^ ","^15",false,"^19",2,"^16",["^10",[["^34"],["^34","^4R"]]],"^[",["^10",[["^34"],["^34","^4R"]]],"^18",["^10",[null,null]]],"^V","hex()","^16",["^10",[["^34"],["^34","^4R"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^Y",1943,"^Z",1948,"^19",2,"^1:",true,"^[",["^10",[["^34"],["^34","^4R"]]],"^13","Converts a byte, char, int, or color to a String containing the\n  equivalent hexadecimal notation. For example color(0, 102, 153) will\n  convert to the String \"FF006699\". This function can help make your\n  geeky debugging sessions much happier. "],"~$with-fill",["^ ","^O","Color","^P",null,"^Q",["^ ","^O","Color","^R","1.7","^S","Utility Macros","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",12,"^1D",["^ ","^15",true,"^19",3,"^16",[["^10",["^1[","^20","~$fill-args","^22"]]],"^[",["^10",[["^1[","^20","^=R","~$&","^22"]]],"^18",["^10",[null]]],"^V",null,"^W",3,"^X",true,"^Y",4648,"^23",true,"^Z",4648,"^[",["^10",["^11",["^10",[["^=R","~$&","^22"]]]]],"^13","Temporarily set the fill color for the body of this macro.\n   The code outside of with-fill form will have the previous fill color set.\n\n   The fill color has to be in a vector!\n   Example: (with-fill [255] ...)\n            (with-fill [10 80 98] ...)"],"^R","1.7","^B","~$quil.core/with-fill","^15",true,"^S","Utility Macros","^T","resources/public/js/development/quil/core.cljc","^U",12,"^1D",["^ ","^15",true,"^19",3,"^16",[["^10",["^1[","^20","^=R","^22"]]],"^[",["^10",[["^1[","^20","^=R","~$&","^22"]]],"^18",["^10",[null]]],"^V",null,"^16",[["^10",["^1[","^20","^=R","^22"]]],"^17",null,"^18",["^10",[null]],"^W",1,"^X",true,"^Y",4642,"^23",true,"^Z",4648,"^19",3,"^1:",false,"^[",["^10",[["^1[","^20","^=R","~$&","^22"]]],"^13","Temporarily set the fill color for the body of this macro.\n   The code outside of with-fill form will have the previous fill color set.\n\n   The fill color has to be in a vector!\n   Example: (with-fill [255] ...)\n            (with-fill [10 80 98] ...)"],"~$no-cursor",["^ ","^O","Environment","^P",null,"^Q",["^ ","^O","Environment","^R","1.0","^S",null,"^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",12,"^V","noCursor()","^W",3,"^X",true,"^Y",2650,"^Z",2650,"^[",["^10",["^11",["^10",[[]]]]],"^13","Hides the cursor from view. Will not work when running the in full\n  screen (Present) mode."],"^R","1.0","^B","~$quil.core/no-cursor","^15",false,"^S",null,"^T","resources/public/js/development/quil/core.cljc","^U",12,"^V","noCursor()","^16",["^10",[[]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",2644,"^Z",2650,"^19",0,"^1:",true,"^[",["^10",["^11",["^10",[[]]]]],"^13","Hides the cursor from view. Will not work when running the in full\n  screen (Present) mode."],"~$create-font",["^ ","^O","Typography","^P",null,"^Q",["^ ","^O","Typography","^R","1.0","^S","Loading & Displaying","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",14,"^1D",["^ ","^15",false,"^19",4,"^16",["^10",[["^;:","^2H"],["^;:","^2H","^5O"],["^;:","^2H","^5O","~$charset"]]],"^[",["^10",[["^;:","^2H"],["^;:","^2H","^5O"],["^;:","^2H","^5O","^=W"]]],"^18",["^10",[null,null,null]]],"^V","createFont()","^W",3,"^X",true,"^Y",1167,"^Z",1167,"^[",["^10",["^11",["^10",[["^;:","^2H"],["^;:","^2H","^5O"],["^;:","^2H","^5O","^=W"]]]]],"^13","Dynamically converts a font to the format used by Processing (a\n  PFont) from either a font name that's installed on the computer, or\n  from a .ttf or .otf file inside the sketches 'data' folder. This\n  function is an advanced feature for precise control.\n\n  Use available-fonts to obtain the names for the fonts recognized by\n  the computer and are compatible with this function.\n\n  The size parameter states the font size you want to generate. The\n  smooth parameter specifies if the font should be antialiased or not,\n  and the charset parameter is an array of chars that specifies the\n  characters to generate.\n\n  This function creates a bitmapped version of a font It loads a font\n  by name, and converts it to a series of images based on the size of\n  the font. When possible, the text function will use a native font\n  rather than the bitmapped version created behind the scenes with\n  create-font. For instance, when using the default renderer\n  setting (JAVA2D), the actual native version of the font will be\n  employed by the sketch, improving drawing quality and\n  performance. With the :p2d, :p3d, and :opengl renderer settings, the\n  bitmapped version will be used. While this can drastically improve\n  speed and appearance, results are poor when exporting if the sketch\n  does not include the .otf or .ttf file, and the requested font is\n  not available on the machine running the sketch."],"^R","1.0","^B","~$quil.core/create-font","^15",false,"^S","Loading & Displaying","^T","resources/public/js/development/quil/core.cljc","^U",14,"^1D",["^ ","^15",false,"^19",4,"^16",["^10",[["^;:","^2H"],["^;:","^2H","^5O"],["^;:","^2H","^5O","^=W"]]],"^[",["^10",[["^;:","^2H"],["^;:","^2H","^5O"],["^;:","^2H","^5O","^=W"]]],"^18",["^10",[null,null,null]]],"^V","createFont()","^16",["^10",[["^;:","^2H"],["^;:","^2H","^5O"],["^;:","^2H","^5O","^=W"]]],"^17",null,"^18",["^10",[null,null,null]],"^W",1,"^X",true,"^Y",1161,"^Z",1167,"^19",4,"^1:",true,"^[",["^10",[["^;:","^2H"],["^;:","^2H","^5O"],["^;:","^2H","^5O","^=W"]]],"^13","Dynamically converts a font to the format used by Processing (a\n  PFont) from either a font name that's installed on the computer, or\n  from a .ttf or .otf file inside the sketches 'data' folder. This\n  function is an advanced feature for precise control.\n\n  Use available-fonts to obtain the names for the fonts recognized by\n  the computer and are compatible with this function.\n\n  The size parameter states the font size you want to generate. The\n  smooth parameter specifies if the font should be antialiased or not,\n  and the charset parameter is an array of chars that specifies the\n  characters to generate.\n\n  This function creates a bitmapped version of a font It loads a font\n  by name, and converts it to a series of images based on the size of\n  the font. When possible, the text function will use a native font\n  rather than the bitmapped version created behind the scenes with\n  create-font. For instance, when using the default renderer\n  setting (JAVA2D), the actual native version of the font will be\n  employed by the sketch, improving drawing quality and\n  performance. With the :p2d, :p3d, and :opengl renderer settings, the\n  bitmapped version will be used. While this can drastically improve\n  speed and appearance, results are poor when exporting if the sketch\n  does not include the .otf or .ttf file, and the requested font is\n  not available on the machine running the sketch."],"~$current-graphics",["^ ","^O","Environment","^P",null,"^Q",["^ ","^O","Environment","^R","2.0","^S",null,"^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",19,"^W",3,"^X",true,"^Y",32,"^Z",32,"^1=","~$PGraphics","^[",["^10",["^11",["^10",[[]]]]],"^13","Graphics currently used for drawing. By default it is sketch graphics,\n  but if called inside with-graphics macro - graphics passed to the macro\n  is returned. This method should be used if you need to call some methods\n  that are not implemented by quil. Example:\n  (.beginDraw (current-graphics))."],"^R","2.0","^B","~$quil.core/current-graphics","^15",false,"^S",null,"^T","resources/public/js/development/quil/core.cljc","^U",19,"^16",["^10",[[]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",26,"~:ret-tag","^=Z","^Z",32,"^19",0,"^1=","^=Z","^1:",true,"^[",["^10",["^11",["^10",[[]]]]],"^13","Graphics currently used for drawing. By default it is sketch graphics,\n  but if called inside with-graphics macro - graphics passed to the macro\n  is returned. This method should be used if you need to call some methods\n  that are not implemented by quil. Example:\n  (.beginDraw (current-graphics))."],"~$abs",["^ ","^O","Math","^P",null,"^Q",["^ ","^O","Math","^R","1.0","^S","Calculation","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",6,"^V","abs()","^W",3,"^X",false,"^Y",282,"^Z",282,"^[",["^10",["^11",["^10",[["~$n"]]]]],"^13","Calculates the absolute value (magnitude) of a number. The\n  absolute value of a number is always positive. Dynamically casts to\n  an int or float appropriately"],"^R","1.0","^B","~$quil.core/abs","^15",false,"^S","Calculation","^T","resources/public/js/development/quil/core.cljc","^U",6,"^V","abs()","^16",["^10",[["~$n"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",false,"^Y",276,"^Z",282,"^19",1,"^1:",true,"^[",["^10",["^11",["^10",[["~$n"]]]]],"^13","Calculates the absolute value (magnitude) of a number. The\n  absolute value of a number is always positive. Dynamically casts to\n  an int or float appropriately"],"~$pop-style",["^ ","^O","Structure","^P",null,"^Q",["^ ","^O","Structure","^R","1.0","^S",null,"^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",12,"^V","popStyle()","^W",3,"^X",true,"^Y",3014,"^Z",3014,"^[",["^10",["^11",["^10",[[]]]]],"^13","Restores the prior settings on the 'style stack'. Used in\n  conjunction with push-style. Together they allow you to change the\n  style settings and later return to what you had. When a new style is\n  started with push-style, it builds on the current style information.\n  The push-style and pop-style functions can be nested to provide more\n  control"],"^R","1.0","^B","~$quil.core/pop-style","^15",false,"^S",null,"^T","resources/public/js/development/quil/core.cljc","^U",12,"^V","popStyle()","^16",["^10",[[]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",3008,"^Z",3014,"^19",0,"^1:",true,"^[",["^10",["^11",["^10",[[]]]]],"^13","Restores the prior settings on the 'style stack'. Used in\n  conjunction with push-style. Together they allow you to change the\n  style settings and later return to what you had. When a new style is\n  started with push-style, it builds on the current style information.\n  The push-style and pop-style functions can be nested to provide more\n  control"],"~$focused",["^ ","^O","Environment","^P",null,"^Q",["^ ","^O","Environment","^R","1.0","^S",null,"^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",10,"^V","focused","^W",3,"^X",true,"^Y",1840,"^Z",1840,"^[",["^10",["^11",["^10",[[]]]]],"^13","Returns a boolean value representing whether the applet has focus."],"^R","1.0","^B","~$quil.core/focused","^15",false,"^S",null,"^T","resources/public/js/development/quil/core.cljc","^U",10,"^V","focused","^16",["^10",[[]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",1834,"^Z",1840,"^19",0,"^1:",true,"^[",["^10",["^11",["^10",[[]]]]],"^13","Returns a boolean value representing whether the applet has focus."],"~$background-float",["^ ","^O","Color","^P",null,"^Q",["^ ","^O","Color","^R","1.0","^S","Setting","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",19,"^1D",["^ ","^15",false,"^19",4,"^16",["^10",[["^2M"],["^2M","^2N"],["~$r","~$g","~$b"],["~$r","~$g","~$b","~$a"]]],"^[",["^10",[["^2M"],["^2M","^2N"],["~$r","~$g","~$b"],["~$r","~$g","~$b","~$a"]]],"^18",["^10",[null,null,null,null]]],"^V","background()","^W",3,"^X",true,"^Y",513,"^Z",513,"^[",["^10",["^11",["^10",[["^2M"],["^2M","^2N"],["~$r","~$g","~$b"],["~$r","~$g","~$b","~$a"]]]]],"^13","Sets the color used for the background of the Processing\n  window. The default background is light gray. In the draw function,\n  the background color is used to clear the display window at the\n  beginning of each frame.\n\n  It is not possible to use transparency (alpha) in background colors\n  with the main drawing surface, however they will work properly with\n  create-graphics. Converts args to floats."],"^R","1.0","^B","~$quil.core/background-float","^15",false,"^S","Setting","^T","resources/public/js/development/quil/core.cljc","^U",19,"^1D",["^ ","^15",false,"^19",4,"^16",["^10",[["^2M"],["^2M","^2N"],["~$r","~$g","~$b"],["~$r","~$g","~$b","~$a"]]],"^[",["^10",[["^2M"],["^2M","^2N"],["~$r","~$g","~$b"],["~$r","~$g","~$b","~$a"]]],"^18",["^10",[null,null,null,null]]],"^V","background()","^16",["^10",[["^2M"],["^2M","^2N"],["~$r","~$g","~$b"],["~$r","~$g","~$b","~$a"]]],"^17",null,"^18",["^10",[null,null,null,null]],"^W",1,"^X",true,"^Y",507,"^Z",513,"^19",4,"^1:",true,"^[",["^10",[["^2M"],["^2M","^2N"],["~$r","~$g","~$b"],["~$r","~$g","~$b","~$a"]]],"^13","Sets the color used for the background of the Processing\n  window. The default background is light gray. In the draw function,\n  the background color is used to clear the display window at the\n  beginning of each frame.\n\n  It is not possible to use transparency (alpha) in background colors\n  with the main drawing surface, however they will work properly with\n  create-graphics. Converts args to floats."],"~$text-mode",["^ ","^O","Typography","^P",null,"^Q",["^ ","^O","Typography","^R","1.0","^S","Attributes","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",12,"^V","textMode()","^W",3,"^X",true,"^Y",4323,"^Z",4323,"^[",["^10",["^11",["^10",[["^1G"]]]]],"^13","Sets the way text draws to the screen - available modes\n  are :model and :shape\n\n  In the default configuration (the :model mode), it's possible to\n  rotate, scale, and place letters in two and three dimensional space.\n\n  The :shape mode draws text using the glyph outlines of individual\n  characters rather than as textures. This mode is only supported with\n  the PDF and OPENGL renderer settings. With the PDF renderer, you\n  must specify the :shape text-mode before any other drawing occurs.\n  If the outlines are not available, then :shape will be ignored and\n  :model will be used instead.\n\n  The :shape option in OPENGL mode can be combined with begin-raw to\n  write vector-accurate text to 2D and 3D output files, for instance\n  DXF or PDF. :shape is not currently optimized for OPENGL, so if\n  recording shape data, use :model until you're ready to capture the\n  geometry with begin-raw."],"^R","1.0","^B","~$quil.core/text-mode","^15",false,"^S","Attributes","^T","resources/public/js/development/quil/core.cljc","^U",12,"^V","textMode()","^16",["^10",[["^1G"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",4317,"^Z",4323,"^19",1,"^1:",true,"^[",["^10",["^11",["^10",[["^1G"]]]]],"^13","Sets the way text draws to the screen - available modes\n  are :model and :shape\n\n  In the default configuration (the :model mode), it's possible to\n  rotate, scale, and place letters in two and three dimensional space.\n\n  The :shape mode draws text using the glyph outlines of individual\n  characters rather than as textures. This mode is only supported with\n  the PDF and OPENGL renderer settings. With the PDF renderer, you\n  must specify the :shape text-mode before any other drawing occurs.\n  If the outlines are not available, then :shape will be ignored and\n  :model will be used instead.\n\n  The :shape option in OPENGL mode can be combined with begin-raw to\n  write vector-accurate text to 2D and 3D output files, for instance\n  DXF or PDF. :shape is not currently optimized for OPENGL, so if\n  recording shape data, use :model until you're ready to capture the\n  geometry with begin-raw."],"~$image-mode",["^ ","^O","Image","^P",null,"^Q",["^ ","^O","Image","^R","1.0","^S","Loading & Displaying","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",13,"^V","imageMode()","^W",3,"^X",true,"^Y",2141,"^Z",2141,"^[",["^10",["^11",["^10",[["^1G"]]]]],"^13","Modifies the location from which images draw. The default mode is :corner.\n   Available modes are:\n\n  :corner  - specifies the location to be the upper left corner and\n             uses the fourth and fifth parameters of image to set the\n             image's width and height.\n\n  :corners - uses the second and third parameters of image to set the\n             location of one corner of the image and uses the fourth\n             and fifth parameters to set the opposite corner.\n\n  :center  - draw images centered at the given x and y position."],"^R","1.0","^B","~$quil.core/image-mode","^15",false,"^S","Loading & Displaying","^T","resources/public/js/development/quil/core.cljc","^U",13,"^V","imageMode()","^16",["^10",[["^1G"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",2135,"^Z",2141,"^19",1,"^1:",true,"^[",["^10",["^11",["^10",[["^1G"]]]]],"^13","Modifies the location from which images draw. The default mode is :corner.\n   Available modes are:\n\n  :corner  - specifies the location to be the upper left corner and\n             uses the fourth and fifth parameters of image to set the\n             image's width and height.\n\n  :corners - uses the second and third parameters of image to set the\n             location of one corner of the image and uses the fourth\n             and fifth parameters to set the opposite corner.\n\n  :center  - draw images centered at the given x and y position."],"~$line",["^ ","^O","Shape","^P",null,"^Q",["^ ","^O","Shape","^R","1.0","^S","2D Primitives","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",7,"^1D",["^ ","^15",false,"^19",6,"^16",["^10",[["~$p1","~$p2"],["^4D","^4E","^4F","^4G"],["^4D","^4E","^5J","^4F","^4G","^5M"]]],"^[",["^10",[["^>>","^>?"],["^4D","^4E","^4F","^4G"],["^4D","^4E","^5J","^4F","^4G","^5M"]]],"^18",["^10",[null,null,null]]],"^V","line()","^W",3,"^X",true,"^Y",2320,"^Z",2320,"^[",["^10",["^11",["^10",[["^>>","^>?"],["^4D","^4E","^4F","^4G"],["^4D","^4E","^5J","^4F","^4G","^5M"]]]]],"^13","Draws a line (a direct path between two points) to the screen. The\n  version of line with four parameters draws the line in 2D. To color\n  a line, use the stroke function. A line cannot be filled, therefore\n  the fill method will not affect the color of a line. 2D lines are\n  drawn with a width of one pixel by default, but this can be changed\n  with the stroke-weight function. The version with six parameters\n  allows the line to be placed anywhere within XYZ space. "],"^R","1.0","^B","~$quil.core/line","^15",false,"^S","2D Primitives","^T","resources/public/js/development/quil/core.cljc","^U",7,"^1D",["^ ","^15",false,"^19",6,"^16",["^10",[["^>>","^>?"],["^4D","^4E","^4F","^4G"],["^4D","^4E","^5J","^4F","^4G","^5M"]]],"^[",["^10",[["^>>","^>?"],["^4D","^4E","^4F","^4G"],["^4D","^4E","^5J","^4F","^4G","^5M"]]],"^18",["^10",[null,null,null]]],"^V","line()","^16",["^10",[["^>>","^>?"],["^4D","^4E","^4F","^4G"],["^4D","^4E","^5J","^4F","^4G","^5M"]]],"^17",null,"^18",["^10",[null,null,null]],"^W",1,"^X",true,"^Y",2314,"^Z",2320,"^19",6,"^1:",true,"^[",["^10",[["^>>","^>?"],["^4D","^4E","^4F","^4G"],["^4D","^4E","^5J","^4F","^4G","^5M"]]],"^13","Draws a line (a direct path between two points) to the screen. The\n  version of line with four parameters draws the line in 2D. To color\n  a line, use the stroke function. A line cannot be filled, therefore\n  the fill method will not affect the color of a line. 2D lines are\n  drawn with a width of one pixel by default, but this can be changed\n  with the stroke-weight function. The version with six parameters\n  allows the line to be placed anywhere within XYZ space. "],"~$do-record",["^ ","^O","Output","^P",null,"^Q",["^ ","^O","Output","^R","2.5","^S","Files","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",12,"^1D",["^ ","^15",true,"^19",3,"^16",[["^10",["^1[","^20","^21","^22"]]],"^[",["^10",[["^1[","^20","^21","~$&","^22"]]],"^18",["^10",[null]]],"^V",null,"^W",3,"^X",true,"^Y",1510,"^23",true,"^Z",1510,"^[",["^10",["^11",["^10",[["^21","~$&","^22"]]]]],"^13","Macro for drawing on graphics which saves result in the file at the end.\n  Similar to 'with-graphics' macro. do-record assumed to be used with :pdf\n  graphics. Example:\n\n  (q/do-record (q/create-graphics 200 200 :pdf \"output.pdf\")\n    (q/fill 250 0 0)\n    (q/ellipse 100 100 150 150))\n  "],"^R","2.5","^B","~$quil.core/do-record","^15",true,"^S","Files","^T","resources/public/js/development/quil/core.cljc","^U",12,"^1D",["^ ","^15",true,"^19",3,"^16",[["^10",["^1[","^20","^21","^22"]]],"^[",["^10",[["^1[","^20","^21","~$&","^22"]]],"^18",["^10",[null]]],"^V",null,"^16",[["^10",["^1[","^20","^21","^22"]]],"^17",null,"^18",["^10",[null]],"^W",1,"^X",true,"^Y",1504,"^23",true,"^Z",1510,"^19",3,"^1:",false,"^[",["^10",[["^1[","^20","^21","~$&","^22"]]],"^13","Macro for drawing on graphics which saves result in the file at the end.\n  Similar to 'with-graphics' macro. do-record assumed to be used with :pdf\n  graphics. Example:\n\n  (q/do-record (q/create-graphics 200 200 :pdf \"output.pdf\")\n    (q/fill 250 0 0)\n    (q/ellipse 100 100 150 150))\n  "],"~$red",["^ ","^O","Color","^P",null,"^Q",["^ ","^O","Color","^R","1.0","^S","Creating & Reading","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",6,"^V","red()","^W",3,"^X",true,"^Y",3333,"^Z",3333,"^[",["^10",["^11",["^10",[["~$c"]]]]],"^13","Extracts the red value from a color, scaled to match current color-mode."],"^R","1.0","^B","~$quil.core/red","^15",false,"^S","Creating & Reading","^T","resources/public/js/development/quil/core.cljc","^U",6,"^V","red()","^16",["^10",[["~$c"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",3327,"^Z",3333,"^19",1,"^1:",true,"^[",["^10",["^11",["^10",[["~$c"]]]]],"^13","Extracts the red value from a color, scaled to match current color-mode."],"~$current-fill",["^ ","^O","Color","^P",null,"^Q",["^ ","^O","Color","^S","Creating & Reading","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",15,"^V","PGraphics.fillColor","^W",3,"^4=","http://processing.github.io/processing-javadocs/core/processing/core/PGraphics.html#fillColor","^X",true,"^Y",1264,"^Z",1264,"^[",["^10",["^11",["^10",[[]]]]],"^13","Return the current fill color."],"^B","~$quil.core/current-fill","^15",false,"^S","Creating & Reading","^T","resources/public/js/development/quil/core.cljc","^U",15,"^V","PGraphics.fillColor","^16",["^10",[[]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^4=","http://processing.github.io/processing-javadocs/core/processing/core/PGraphics.html#fillColor","^X",true,"^Y",1258,"^Z",1264,"^19",0,"^1:",true,"^[",["^10",["^11",["^10",[[]]]]],"^13","Return the current fill color."],"~$color-modes",["^ ","^B","~$quil.core/color-modes","^T","resources/public/js/development/quil/core.cljc","^Y",45,"^W",1,"^Z",51,"^U",13,"^Q",["^ ","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^Y",51,"^W",2,"^Z",51,"^U",13],"^1=","^1>"],"~$blue",["^ ","^O","Color","^P",null,"^Q",["^ ","^O","Color","^R","1.0","^S","Creating & Reading","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",7,"^V","blue()","^W",3,"^X",true,"^Y",906,"^Z",906,"^[",["^10",["^11",["^10",[["^83"]]]]],"^13","Extracts the blue value from a color, scaled to match current color-mode.\n  Returns a float."],"^R","1.0","^B","~$quil.core/blue","^15",false,"^S","Creating & Reading","^T","resources/public/js/development/quil/core.cljc","^U",7,"^V","blue()","^16",["^10",[["^83"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",900,"^Z",906,"^19",1,"^1:",true,"^[",["^10",["^11",["^10",[["^83"]]]]],"^13","Extracts the blue value from a color, scaled to match current color-mode.\n  Returns a float."],"~$frustum",["^ ","^O","Lights, Camera","^P",null,"^Q",["^ ","^O","Lights, Camera","^R","1.0","^S","Camera","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",10,"^V","frustum()","^W",3,"^X",true,"^Y",1894,"^Z",1894,"^[",["^10",["^11",["^10",[["^:T","^:U","^:V","^:W","^:X","^:Y"]]]]],"^13","Sets a perspective matrix defined through the parameters. Works\n  like glFrustum, except it wipes out the current perspective matrix\n  rather than muliplying itself with it."],"^R","1.0","^B","~$quil.core/frustum","^15",false,"^S","Camera","^T","resources/public/js/development/quil/core.cljc","^U",10,"^V","frustum()","^16",["^10",[["^:T","^:U","^:V","^:W","^:X","^:Y"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",1888,"^Z",1894,"^19",6,"^1:",true,"^[",["^10",["^11",["^10",[["^:T","^:U","^:V","^:W","^:X","^:Y"]]]]],"^13","Sets a perspective matrix defined through the parameters. Works\n  like glFrustum, except it wipes out the current perspective matrix\n  rather than muliplying itself with it."],"~$with-rotation",["^ ","^O","Transform","^P",null,"^Q",["^ ","^O","Transform","^R","1.0","^S","Utility Macros","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",16,"^1D",["^ ","^15",true,"^19",3,"^16",[["^10",["^1[","^20","~$rotation","^22"]]],"^[",["^10",[["^1[","^20","^>N","~$&","^22"]]],"^18",["^10",[null]]],"^V",null,"^W",3,"^X",true,"^Y",4704,"^23",true,"^Z",4704,"^[",["^10",["^11",["^10",[["^>N","~$&","^22"]]]]],"^13","Performs body with rotation, restores current transformation on exit.\n  Accepts a vector [angle] or [angle x-axis y-axis z-axis].\n\n  Example:\n    (with-rotation [angle]\n      (vertex 1 2))"],"^R","1.0","^B","~$quil.core/with-rotation","^15",true,"^S","Utility Macros","^T","resources/public/js/development/quil/core.cljc","^U",16,"^1D",["^ ","^15",true,"^19",3,"^16",[["^10",["^1[","^20","^>N","^22"]]],"^[",["^10",[["^1[","^20","^>N","~$&","^22"]]],"^18",["^10",[null]]],"^V",null,"^16",[["^10",["^1[","^20","^>N","^22"]]],"^17",null,"^18",["^10",[null]],"^W",1,"^X",true,"^Y",4698,"^23",true,"^Z",4704,"^19",3,"^1:",false,"^[",["^10",[["^1[","^20","^>N","~$&","^22"]]],"^13","Performs body with rotation, restores current transformation on exit.\n  Accepts a vector [angle] or [angle x-axis y-axis z-axis].\n\n  Example:\n    (with-rotation [angle]\n      (vertex 1 2))"],"~$print-matrix",["^ ","^O","Transform","^P",null,"^Q",["^ ","^O","Transform","^R","1.0","^S",null,"^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",15,"^V","printMatrix()","^W",3,"^X",true,"^Y",3057,"^Z",3057,"^[",["^10",["^11",["^10",[[]]]]],"^13","Prints the current matrix to std out. Useful for debugging."],"^R","1.0","^B","~$quil.core/print-matrix","^15",false,"^S",null,"^T","resources/public/js/development/quil/core.cljc","^U",15,"^V","printMatrix()","^16",["^10",[[]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",3051,"^Z",3057,"^19",0,"^1:",true,"^[",["^10",["^11",["^10",[[]]]]],"^13","Prints the current matrix to std out. Useful for debugging."],"~$ambient-light",["^ ","^O","Lights, Camera","^P",null,"^Q",["^ ","^O","Lights, Camera","^R","1.0","^S","Lights","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",16,"^1D",["^ ","^15",false,"^19",6,"^16",["^10",[["^>C","^9W","^>I"],["^>C","^9W","^>I","~$x","~$y","~$z"]]],"^[",["^10",[["^>C","^9W","^>I"],["^>C","^9W","^>I","~$x","~$y","~$z"]]],"^18",["^10",[null,null]]],"^V","ambientLight()","^W",3,"^X",true,"^Y",376,"^Z",376,"^[",["^10",["^11",["^10",[["^>C","^9W","^>I"],["^>C","^9W","^>I","~$x","~$y","~$z"]]]]],"^13","Adds an ambient light. Ambient light doesn't come from a specific direction,\n  the rays have light have bounced around so much that objects are\n  evenly lit from all sides. Ambient lights are almost always used in\n  combination with other types of lights. Lights need to be included\n  in the draw to remain persistent in a looping program. Placing them\n  in the setup of a looping program will cause them to only have an\n  effect the first time through the loop. The effect of the\n  parameters is determined by the current color mode."],"^R","1.0","^B","~$quil.core/ambient-light","^15",false,"^S","Lights","^T","resources/public/js/development/quil/core.cljc","^U",16,"^1D",["^ ","^15",false,"^19",6,"^16",["^10",[["^>C","^9W","^>I"],["^>C","^9W","^>I","~$x","~$y","~$z"]]],"^[",["^10",[["^>C","^9W","^>I"],["^>C","^9W","^>I","~$x","~$y","~$z"]]],"^18",["^10",[null,null]]],"^V","ambientLight()","^16",["^10",[["^>C","^9W","^>I"],["^>C","^9W","^>I","~$x","~$y","~$z"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",370,"^Z",376,"^19",6,"^1:",true,"^[",["^10",[["^>C","^9W","^>I"],["^>C","^9W","^>I","~$x","~$y","~$z"]]],"^13","Adds an ambient light. Ambient light doesn't come from a specific direction,\n  the rays have light have bounced around so much that objects are\n  evenly lit from all sides. Ambient lights are almost always used in\n  combination with other types of lights. Lights need to be included\n  in the draw to remain persistent in a looping program. Placing them\n  in the setup of a looping program will cause them to only have an\n  effect the first time through the loop. The effect of the\n  parameters is determined by the current color mode."],"~$bezier-point",["^ ","^O","Shape","^P",null,"^Q",["^ ","^O","Shape","^R","1.0","^S","Curves","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",15,"^V","bezierPoint()","^W",3,"^X",true,"^Y",707,"^Z",707,"^[",["^10",["^11",["^10",[["~$a","~$b","~$c","~$d","~$t"]]]]],"^13","Evaluates the Bezier at point t for points a, b, c, d. The\n  parameter t varies between 0 and 1, a and d are points on the curve,\n  and b and c are the control points. This can be done once with the x\n  coordinates and a second time with the y coordinates to get the\n  location of a bezier curve at t."],"^R","1.0","^B","~$quil.core/bezier-point","^15",false,"^S","Curves","^T","resources/public/js/development/quil/core.cljc","^U",15,"^V","bezierPoint()","^16",["^10",[["~$a","~$b","~$c","~$d","~$t"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",701,"^Z",707,"^19",5,"^1:",true,"^[",["^10",["^11",["^10",[["~$a","~$b","~$c","~$d","~$t"]]]]],"^13","Evaluates the Bezier at point t for points a, b, c, d. The\n  parameter t varies between 0 and 1, a and d are points on the curve,\n  and b and c are the control points. This can be done once with the x\n  coordinates and a second time with the y coordinates to get the\n  location of a bezier curve at t."],"~$stroke-cap-modes",["^ ","^B","~$quil.core/stroke-cap-modes","^T","resources/public/js/development/quil/core.cljc","^Y",45,"^W",1,"^Z",66,"^U",18,"^Q",["^ ","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^Y",66,"^W",2,"^Z",66,"^U",18],"^1=","^1>"],"~$quad",["^ ","^O","Shape","^P",null,"^Q",["^ ","^O","Shape","^R","1.0","^S","2D Primitives","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",7,"^V","quad()","^W",3,"^X",true,"^Y",3121,"^Z",3121,"^[",["^10",["^11",["^10",[["^4D","^4E","^4F","^4G","^6P","^6Q","~$x4","~$y4"]]]]],"^13","A quad is a quadrilateral, a four sided polygon. It is similar to a\n  rectangle, but the angles between its edges are not constrained to\n  be ninety degrees. The first pair of parameters (x1,y1) sets the\n  first vertex and the subsequent pairs should proceed clockwise or\n  counter-clockwise around the defined shape."],"^R","1.0","^B","~$quil.core/quad","^15",false,"^S","2D Primitives","^T","resources/public/js/development/quil/core.cljc","^U",7,"^V","quad()","^16",["^10",[["^4D","^4E","^4F","^4G","^6P","^6Q","^>Y","^>Z"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",3115,"^Z",3121,"^19",8,"^1:",true,"^[",["^10",["^11",["^10",[["^4D","^4E","^4F","^4G","^6P","^6Q","^>Y","^>Z"]]]]],"^13","A quad is a quadrilateral, a four sided polygon. It is similar to a\n  rectangle, but the angles between its edges are not constrained to\n  be ninety degrees. The first pair of parameters (x1,y1) sets the\n  first vertex and the subsequent pairs should proceed clockwise or\n  counter-clockwise around the defined shape."],"~$screen-x",["^ ","^O","Lights, Camera","^P",null,"^Q",["^ ","^O","Lights, Camera","^R","1.0","^S","Coordinates","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",11,"^1D",["^ ","^15",false,"^19",3,"^16",["^10",[["~$x","~$y"],["~$x","~$y","~$z"]]],"^[",["^10",[["~$x","~$y"],["~$x","~$y","~$z"]]],"^18",["^10",[null,null]]],"^V","screenX()","^W",3,"^X",true,"^Y",3658,"^Z",3658,"^[",["^10",["^11",["^10",[["~$x","~$y"],["~$x","~$y","~$z"]]]]],"^13","Takes a three-dimensional x, y, z position and returns the x value\n  for where it will appear on a (two-dimensional) screen, once\n  affected by translate, scale or any other transformations"],"^R","1.0","^B","~$quil.core/screen-x","^15",false,"^S","Coordinates","^T","resources/public/js/development/quil/core.cljc","^U",11,"^1D",["^ ","^15",false,"^19",3,"^16",["^10",[["~$x","~$y"],["~$x","~$y","~$z"]]],"^[",["^10",[["~$x","~$y"],["~$x","~$y","~$z"]]],"^18",["^10",[null,null]]],"^V","screenX()","^16",["^10",[["~$x","~$y"],["~$x","~$y","~$z"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",3652,"^Z",3658,"^19",3,"^1:",true,"^[",["^10",[["~$x","~$y"],["~$x","~$y","~$z"]]],"^13","Takes a three-dimensional x, y, z position and returns the x value\n  for where it will appear on a (two-dimensional) screen, once\n  affected by translate, scale or any other transformations"],"~$lights",["^ ","^O","Lights, Camera","^P",null,"^Q",["^ ","^O","Lights, Camera","^R","1.0","^S","Lights","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",9,"^V","lights()","^W",3,"^X",true,"^Y",2281,"^Z",2281,"^[",["^10",["^11",["^10",[[]]]]],"^13","Sets the default ambient light, directional light, falloff, and\n  specular values. The defaults are:\n\n  (ambient-light 128 128 128)\n  (directional-light 128 128 128 0 0 -1)\n  (light-falloff 1 0 0)\n  (light-specular 0 0 0).\n\n  Lights need to be included in the draw to remain persistent in a\n  looping program. Placing them in the setup of a looping program\n  will cause them to only have an effect the first time through the\n  loop."],"^R","1.0","^B","~$quil.core/lights","^15",false,"^S","Lights","^T","resources/public/js/development/quil/core.cljc","^U",9,"^V","lights()","^16",["^10",[[]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",2275,"^Z",2281,"^19",0,"^1:",true,"^[",["^10",["^11",["^10",[[]]]]],"^13","Sets the default ambient light, directional light, falloff, and\n  specular values. The defaults are:\n\n  (ambient-light 128 128 128)\n  (directional-light 128 128 128 0 0 -1)\n  (light-falloff 1 0 0)\n  (light-specular 0 0 0).\n\n  Lights need to be included in the draw to remain persistent in a\n  looping program. Placing them in the setup of a looping program\n  will cause them to only have an effect the first time through the\n  loop."],"~$*graphics*",["^ ","^Q",["^ ","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^Y",22,"^W",3,"^Z",22,"^U",13,"~:dynamic",true,"^3[",true],"^3[",true,"^B","~$quil.core/*graphics*","^T","resources/public/js/development/quil/core.cljc","^U",13,"^W",1,"^?5",true,"^Y",20,"^Z",22,"^1=","~$clj-nil"],"~$KEY-CODES",["^ ","^B","~$quil.core/KEY-CODES","^T","resources/public/js/development/quil/core.cljc","^Y",124,"^W",4,"^Z",125,"^U",15,"^3[",true,"^Q",["^ ","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^Y",125,"^W",6,"^Z",125,"^U",15,"^3[",true],"^1=","^1>"],"~$curve-detail",["^ ","^O","Shape","^P",null,"^Q",["^ ","^O","Shape","^R","1.0","^S","Curves","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",15,"^V","curveDetail()","^W",3,"^X",true,"^Y",1348,"^Z",1348,"^[",["^10",["^11",["^10",[["^3D"]]]]],"^13","Sets the resolution at which curves display. The default value is\n  20. This function is only useful when using the :p3d or :opengl\n  renderer as the default (:java2d) renderer does not use this\n  information."],"^R","1.0","^B","~$quil.core/curve-detail","^15",false,"^S","Curves","^T","resources/public/js/development/quil/core.cljc","^U",15,"^V","curveDetail()","^16",["^10",[["^3D"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",1342,"^Z",1348,"^19",1,"^1:",true,"^[",["^10",["^11",["^10",[["^3D"]]]]],"^13","Sets the resolution at which curves display. The default value is\n  20. This function is only useful when using the :p3d or :opengl\n  renderer as the default (:java2d) renderer does not use this\n  information."],"~$current-frame-rate",["^ ","^O","Environment","^P",null,"^Q",["^ ","^O","Environment","^R","1.0","^S",null,"^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",21,"^V","frameRate","^W",3,"^X",true,"^Y",1864,"^Z",1864,"^[",["^10",["^11",["^10",[[]]]]],"^13","Returns the current framerate"],"^R","1.0","^B","~$quil.core/current-frame-rate","^15",false,"^S",null,"^T","resources/public/js/development/quil/core.cljc","^U",21,"^V","frameRate","^16",["^10",[[]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",1858,"^Z",1864,"^19",0,"^1:",true,"^[",["^10",["^11",["^10",[[]]]]],"^13","Returns the current framerate"],"~$end-contour",["^ ","^O","Shape","^P",null,"^Q",["^ ","^O","Shape","^R","2.0","^S","Vertex","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",14,"^V","endContour()","^W",3,"^X",true,"^Y",1622,"^Z",1622,"^[",["^10",["^11",["^10",[[]]]]],"^13","Use the begin-contour and end-contour function to create negative\n  shapes within shapes. These functions can only be within a\n  begin-shape/end-shape pair and they only work with the :p2d and :p3d\n  renderers."],"^R","2.0","^B","~$quil.core/end-contour","^15",false,"^S","Vertex","^T","resources/public/js/development/quil/core.cljc","^U",14,"^V","endContour()","^16",["^10",[[]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",1616,"^Z",1622,"^19",0,"^1:",true,"^[",["^10",["^11",["^10",[[]]]]],"^13","Use the begin-contour and end-contour function to create negative\n  shapes within shapes. These functions can only be within a\n  begin-shape/end-shape pair and they only work with the :p2d and :p3d\n  renderers."],"~$sin",["^ ","^O","Math","^P",null,"^Q",["^ ","^O","Math","^R","1.0","^S","Trigonometry","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",6,"^V","sin()","^W",3,"^X",false,"^Y",3879,"^Z",3879,"^[",["^10",["^11",["^10",[["^12"]]]]],"^13","Calculates the sine of an angle. This function expects the values\n  of the angle parameter to be provided in radians (values from 0 to\n  6.28). A float within the range -1 to 1 is returned."],"^R","1.0","^B","~$quil.core/sin","^15",false,"^S","Trigonometry","^T","resources/public/js/development/quil/core.cljc","^U",6,"^V","sin()","^16",["^10",[["^12"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",false,"^Y",3873,"^Z",3879,"^19",1,"^1:",true,"^[",["^10",["^11",["^10",[["^12"]]]]],"^13","Calculates the sine of an angle. This function expects the values\n  of the angle parameter to be provided in radians (values from 0 to\n  6.28). A float within the range -1 to 1 is returned."],"~$current-stroke",["^ ","^O","Color","^P",null,"^Q",["^ ","^O","Color","^S","Creating & Reading","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",17,"^V","PGraphics.strokeColor","^W",3,"^4=","http://processing.github.io/processing-javadocs/core/processing/core/PGraphics.html#strokeColor","^X",true,"^Y",1275,"^Z",1275,"^[",["^10",["^11",["^10",[[]]]]],"^13","Return the current stroke color."],"^B","~$quil.core/current-stroke","^15",false,"^S","Creating & Reading","^T","resources/public/js/development/quil/core.cljc","^U",17,"^V","PGraphics.strokeColor","^16",["^10",[[]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^4=","http://processing.github.io/processing-javadocs/core/processing/core/PGraphics.html#strokeColor","^X",true,"^Y",1269,"^Z",1275,"^19",0,"^1:",true,"^[",["^10",["^11",["^10",[[]]]]],"^13","Return the current stroke color."],"~$curve",["^ ","^O","Shape","^P",null,"^Q",["^ ","^O","Shape","^R","1.0","^S","Curves","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",8,"^1D",["^ ","^15",false,"^19",12,"^16",["^10",[["^4D","^4E","^4F","^4G","^6P","^6Q","^>Y","^>Z"],["^4D","^4E","^5J","^4F","^4G","^5M","^6P","^6Q","^6S","^>Y","^>Z","~$z4"]]],"^[",["^10",[["^4D","^4E","^4F","^4G","^6P","^6Q","^>Y","^>Z"],["^4D","^4E","^5J","^4F","^4G","^5M","^6P","^6Q","^6S","^>Y","^>Z","^?E"]]],"^18",["^10",[null,null]]],"^V","curve()","^W",3,"^X",true,"^Y",1320,"^Z",1320,"^[",["^10",["^11",["^10",[["^4D","^4E","^4F","^4G","^6P","^6Q","^>Y","^>Z"],["^4D","^4E","^5J","^4F","^4G","^5M","^6P","^6Q","^6S","^>Y","^>Z","^?E"]]]]],"^13","Draws a curved line on the screen. The first and second parameters\n  specify the beginning control point and the last two parameters\n  specify the ending control point. The middle parameters specify the\n  start and stop of the curve. Longer curves can be created by putting\n  a series of curve fns together or using curve-vertex. An additional\n  fn called curve-tightness provides control for the visual quality of\n  the curve. The curve fn is an implementation of Catmull-Rom\n  splines."],"^R","1.0","^B","~$quil.core/curve","^15",false,"^S","Curves","^T","resources/public/js/development/quil/core.cljc","^U",8,"^1D",["^ ","^15",false,"^19",12,"^16",["^10",[["^4D","^4E","^4F","^4G","^6P","^6Q","^>Y","^>Z"],["^4D","^4E","^5J","^4F","^4G","^5M","^6P","^6Q","^6S","^>Y","^>Z","^?E"]]],"^[",["^10",[["^4D","^4E","^4F","^4G","^6P","^6Q","^>Y","^>Z"],["^4D","^4E","^5J","^4F","^4G","^5M","^6P","^6Q","^6S","^>Y","^>Z","^?E"]]],"^18",["^10",[null,null]]],"^V","curve()","^16",["^10",[["^4D","^4E","^4F","^4G","^6P","^6Q","^>Y","^>Z"],["^4D","^4E","^5J","^4F","^4G","^5M","^6P","^6Q","^6S","^>Y","^>Z","^?E"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",1314,"^Z",1320,"^19",12,"^1:",true,"^[",["^10",[["^4D","^4E","^4F","^4G","^6P","^6Q","^>Y","^>Z"],["^4D","^4E","^5J","^4F","^4G","^5M","^6P","^6Q","^6S","^>Y","^>Z","^?E"]]],"^13","Draws a curved line on the screen. The first and second parameters\n  specify the beginning control point and the last two parameters\n  specify the ending control point. The middle parameters specify the\n  start and stop of the curve. Longer curves can be created by putting\n  a series of curve fns together or using curve-vertex. An additional\n  fn called curve-tightness provides control for the visual quality of\n  the curve. The curve fn is an implementation of Catmull-Rom\n  splines."],"~$shape",["^ ","^O","Shape","^P",null,"^Q",["^ ","^O","Shape","^R","1.0","^S","Loading & Displaying","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",8,"^1D",["^ ","^15",false,"^19",5,"^16",["^10",[["~$sh"],["^?H","~$x","~$y"],["^?H","~$x","~$y","^1O","^1P"]]],"^[",["^10",[["^?H"],["^?H","~$x","~$y"],["^?H","~$x","~$y","^1O","^1P"]]],"^18",["^10",[null,null,null]]],"^V","shape()","^W",3,"^X",true,"^Y",3767,"^Z",3767,"^[",["^10",["^11",["^10",[["^?H"],["^?H","~$x","~$y"],["^?H","~$x","~$y","^1O","^1P"]]]]],"^13","Displays shapes to the screen. The shapes must have been loaded\n  with load-shape. Processing currently works with SVG shapes\n  only. The sh parameter specifies the shape to display and the x and\n  y parameters define the location of the shape from its upper-left\n  corner. The shape is displayed at its original size unless the width\n  and height parameters specify a different size. The shape-mode\n  fn changes the way the parameters work. A call to\n  (shape-mode :corners), for example, will change the width and height\n  parameters to define the x and y values of the opposite corner of\n  the shape.\n\n  Note complex shapes may draw awkwardly with the renderers :p2d, :p3d, and\n  :opengl. Those renderers do not yet support shapes that have holes\n  or complicated breaks."],"^R","1.0","^B","~$quil.core/shape","^15",false,"^S","Loading & Displaying","^T","resources/public/js/development/quil/core.cljc","^U",8,"^1D",["^ ","^15",false,"^19",5,"^16",["^10",[["^?H"],["^?H","~$x","~$y"],["^?H","~$x","~$y","^1O","^1P"]]],"^[",["^10",[["^?H"],["^?H","~$x","~$y"],["^?H","~$x","~$y","^1O","^1P"]]],"^18",["^10",[null,null,null]]],"^V","shape()","^16",["^10",[["^?H"],["^?H","~$x","~$y"],["^?H","~$x","~$y","^1O","^1P"]]],"^17",null,"^18",["^10",[null,null,null]],"^W",1,"^X",true,"^Y",3761,"^Z",3767,"^19",5,"^1:",true,"^[",["^10",[["^?H"],["^?H","~$x","~$y"],["^?H","~$x","~$y","^1O","^1P"]]],"^13","Displays shapes to the screen. The shapes must have been loaded\n  with load-shape. Processing currently works with SVG shapes\n  only. The sh parameter specifies the shape to display and the x and\n  y parameters define the location of the shape from its upper-left\n  corner. The shape is displayed at its original size unless the width\n  and height parameters specify a different size. The shape-mode\n  fn changes the way the parameters work. A call to\n  (shape-mode :corners), for example, will change the width and height\n  parameters to define the x and y values of the opposite corner of\n  the shape.\n\n  Note complex shapes may draw awkwardly with the renderers :p2d, :p3d, and\n  :opengl. Those renderers do not yet support shapes that have holes\n  or complicated breaks."],"~$image-formats",["^ ","^B","~$quil.core/image-formats","^T","resources/public/js/development/quil/core.cljc","^Y",45,"^W",1,"^Z",52,"^U",15,"^Q",["^ ","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^Y",52,"^W",2,"^Z",52,"^U",15],"^1=","^1>"],"~$text-descent",["^ ","^O","Typography","^P",null,"^Q",["^ ","^O","Typography","^R","1.0","^S","Metrics","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",15,"^V","textDescent()","^W",3,"^X",true,"^Y",4271,"^Z",4271,"^[",["^10",["^11",["^10",[[]]]]],"^13","Returns descent of the current font at its current size. This\n  information is useful for determining the height of the font below\n  the baseline. For example, adding the text-ascent and text-descent\n  values will give you the total height of the line."],"^R","1.0","^B","~$quil.core/text-descent","^15",false,"^S","Metrics","^T","resources/public/js/development/quil/core.cljc","^U",15,"^V","textDescent()","^16",["^10",[[]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",4265,"^Z",4271,"^19",0,"^1:",true,"^[",["^10",["^11",["^10",[[]]]]],"^13","Returns descent of the current font at its current size. This\n  information is useful for determining the height of the font below\n  the baseline. For example, adding the text-ascent and text-descent\n  values will give you the total height of the line."],"~$screen-z",["^ ","^O","Lights, Camera","^P",null,"^Q",["^ ","^O","Lights, Camera","^R","1.0","^S","Coordinates","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",11,"^V","screenZ()","^W",3,"^X",true,"^Y",3684,"^Z",3684,"^[",["^10",["^11",["^10",[["~$x","~$y","~$z"]]]]],"^13","Given an x, y, z coordinate, returns its z value.\n   This value can be used to determine if an x, y, z coordinate is in\n   front or in back of another (x, y, z) coordinate. The units are\n   based on how the zbuffer is set up, and don't relate to anything\n   'real'. They're only useful for in comparison to another value\n   obtained from screen-z, or directly out of the zbuffer"],"^R","1.0","^B","~$quil.core/screen-z","^15",false,"^S","Coordinates","^T","resources/public/js/development/quil/core.cljc","^U",11,"^V","screenZ()","^16",["^10",[["~$x","~$y","~$z"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",3678,"^Z",3684,"^19",3,"^1:",true,"^[",["^10",["^11",["^10",[["~$x","~$y","~$z"]]]]],"^13","Given an x, y, z coordinate, returns its z value.\n   This value can be used to determine if an x, y, z coordinate is in\n   front or in back of another (x, y, z) coordinate. The units are\n   based on how the zbuffer is set up, and don't relate to anything\n   'real'. They're only useful for in comparison to another value\n   obtained from screen-z, or directly out of the zbuffer"],"~$ambient-int",["^ ","^O","Lights, Camera","^P",null,"^Q",["^ ","^O","Lights, Camera","^R","1.0","^S","Material Properties","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",14,"^V","ambient()","^W",3,"^X",true,"^Y",342,"^Z",342,"^[",["^10",["^11",["^10",[["^3I"]]]]],"^13","Sets the ambient reflectance for shapes drawn to the screen. This\n  is combined with the ambient light component of environment. The rgb\n  color components set define the reflectance. Used in combination\n  with emissive, specular, and shininess in setting the material\n  properties of shapes."],"^R","1.0","^B","~$quil.core/ambient-int","^15",false,"^S","Material Properties","^T","resources/public/js/development/quil/core.cljc","^U",14,"^V","ambient()","^16",["^10",[["^3I"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",336,"^Z",342,"^19",1,"^1:",true,"^[",["^10",["^11",["^10",[["^3I"]]]]],"^13","Sets the ambient reflectance for shapes drawn to the screen. This\n  is combined with the ambient light component of environment. The rgb\n  color components set define the reflectance. Used in combination\n  with emissive, specular, and shininess in setting the material\n  properties of shapes."],"~$ellipse",["^ ","^O","Shape","^P",null,"^Q",["^ ","^O","Shape","^R","1.0","^S","2D Primitives","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",10,"^V","ellipse()","^W",3,"^X",true,"^Y",1531,"^Z",1531,"^[",["^10",["^11",["^10",[["~$x","~$y","^1O","^1P"]]]]],"^13","Draws an ellipse (oval) in the display window. An ellipse with an\n  equal width and height is a circle.  The origin may be changed with\n  the ellipse-mode function"],"^R","1.0","^B","~$quil.core/ellipse","^15",false,"^S","2D Primitives","^T","resources/public/js/development/quil/core.cljc","^U",10,"^V","ellipse()","^16",["^10",[["~$x","~$y","^1O","^1P"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",1525,"^Z",1531,"^19",4,"^1:",true,"^[",["^10",["^11",["^10",[["~$x","~$y","^1O","^1P"]]]]],"^13","Draws an ellipse (oval) in the display window. An ellipse with an\n  equal width and height is a circle.  The origin may be changed with\n  the ellipse-mode function"],"~$text-leading",["^ ","^O","Typography","^P",null,"^Q",["^ ","^O","Typography","^R","1.0","^S","Attributes","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",15,"^V","textLeading()","^W",3,"^X",true,"^Y",4311,"^Z",4311,"^[",["^10",["^11",["^10",[["~$leading"]]]]],"^13","Sets the spacing between lines of text in units of pixels. This\n  setting will be used in all subsequent calls to the text function."],"^R","1.0","^B","~$quil.core/text-leading","^15",false,"^S","Attributes","^T","resources/public/js/development/quil/core.cljc","^U",15,"^V","textLeading()","^16",["^10",[["^?U"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",4305,"^Z",4311,"^19",1,"^1:",true,"^[",["^10",["^11",["^10",[["^?U"]]]]],"^13","Sets the spacing between lines of text in units of pixels. This\n  setting will be used in all subsequent calls to the text function."],"~$image-filter",["^ ","^O","Image","^P",null,"^Q",["^ ","^O","Image","^R","2.0","^S","Pixels","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",15,"^1D",["^ ","^15",false,"^19",3,"^16",["^10",[["^2=","^1G"],["^2=","^1G","^1H"]]],"^[",["^10",[["^2=","^1G"],["^2=","^1G","^1H"]]],"^18",["^10",[null,null]]],"^V","PImage.filter()","^W",3,"^X",true,"^Y",2101,"^Z",2101,"^[",["^10",["^11",["^10",[["^2=","^1G"],["^2=","^1G","^1H"]]]]],"^13","Originally named filter in Processing Language.\n  Filters given image with the specified mode and level.\n  Level defines the quality of the filter and mode may be one of\n  the following keywords:\n\n  :threshold - converts the image to black and white pixels depending\n               if they are above or below the threshold defined by\n               the level parameter. The level must be between\n               0.0 (black) and 1.0 (white). If no level is specified,\n               0.5 is used.\n  :gray      - converts any colors in the image to grayscale\n               equivalents. Doesn't work with level.\n  :invert    - sets each pixel to its inverse value. Doesn't work with\n               level.\n  :posterize - limits each channel of the image to the number of\n               colors specified as the level parameter. The parameter can\n               be set to values between 2 and 255, but results are most\n               noticeable in the lower ranges.\n  :blur      - executes a Guassian blur with the level parameter\n               specifying the extent of the blurring. If no level\n               parameter is used, the blur is equivalent to Guassian\n               blur of radius 1.\n  :opaque    - sets the alpha channel to entirely opaque. Doesn't work\n               with level.\n  :erode     - reduces the light areas. Doesn't work with level.\n  :dilate    - increases the light areas.  Doesn't work with level."],"^R","2.0","^B","~$quil.core/image-filter","^15",false,"^S","Pixels","^T","resources/public/js/development/quil/core.cljc","^U",15,"^1D",["^ ","^15",false,"^19",3,"^16",["^10",[["^2=","^1G"],["^2=","^1G","^1H"]]],"^[",["^10",[["^2=","^1G"],["^2=","^1G","^1H"]]],"^18",["^10",[null,null]]],"^V","PImage.filter()","^16",["^10",[["^2=","^1G"],["^2=","^1G","^1H"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",2095,"^Z",2101,"^19",3,"^1:",true,"^[",["^10",[["^2=","^1G"],["^2=","^1G","^1H"]]],"^13","Originally named filter in Processing Language.\n  Filters given image with the specified mode and level.\n  Level defines the quality of the filter and mode may be one of\n  the following keywords:\n\n  :threshold - converts the image to black and white pixels depending\n               if they are above or below the threshold defined by\n               the level parameter. The level must be between\n               0.0 (black) and 1.0 (white). If no level is specified,\n               0.5 is used.\n  :gray      - converts any colors in the image to grayscale\n               equivalents. Doesn't work with level.\n  :invert    - sets each pixel to its inverse value. Doesn't work with\n               level.\n  :posterize - limits each channel of the image to the number of\n               colors specified as the level parameter. The parameter can\n               be set to values between 2 and 255, but results are most\n               noticeable in the lower ranges.\n  :blur      - executes a Guassian blur with the level parameter\n               specifying the extent of the blurring. If no level\n               parameter is used, the blur is equivalent to Guassian\n               blur of radius 1.\n  :opaque    - sets the alpha channel to entirely opaque. Doesn't work\n               with level.\n  :erode     - reduces the light areas. Doesn't work with level.\n  :dilate    - increases the light areas.  Doesn't work with level."],"~$random",["^ ","^O","Math","^P",null,"^Q",["^ ","^O","Math","^R","1.0","^S","Random","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",9,"^1D",["^ ","^15",false,"^19",2,"^16",["^10",[["^42"],["~$min","^42"]]],"^[",["^10",[["^42"],["^?Z","^42"]]],"^18",["^10",[null,null]]],"^V","random()","^W",3,"^X",true,"^Y",3177,"^Z",3177,"^[",["^10",["^11",["^10",[["^42"],["^?Z","^42"]]]]],"^13","Generates random numbers. Each time the random function is called,\n  it returns an unexpected value within the specified range. If one\n  parameter is passed to the function it will return a float between\n  zero and the value of the high parameter. The function call (random\n  5) returns values between 0 and 5 (starting at zero, up to but not\n  including 5). If two parameters are passed, it will return a float\n  with a value between the parameters. The function call\n  (random -5 10.2) returns values starting at -5 up to (but not\n  including) 10.2."],"^R","1.0","^B","~$quil.core/random","^15",false,"^S","Random","^T","resources/public/js/development/quil/core.cljc","^U",9,"^1D",["^ ","^15",false,"^19",2,"^16",["^10",[["^42"],["^?Z","^42"]]],"^[",["^10",[["^42"],["^?Z","^42"]]],"^18",["^10",[null,null]]],"^V","random()","^16",["^10",[["^42"],["^?Z","^42"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",3171,"^Z",3177,"^19",2,"^1:",true,"^[",["^10",[["^42"],["^?Z","^42"]]],"^13","Generates random numbers. Each time the random function is called,\n  it returns an unexpected value within the specified range. If one\n  parameter is passed to the function it will return a float between\n  zero and the value of the high parameter. The function call (random\n  5) returns values between 0 and 5 (starting at zero, up to but not\n  including 5). If two parameters are passed, it will return a float\n  with a value between the parameters. The function call\n  (random -5 10.2) returns values starting at -5 up to (but not\n  including) 10.2."],"~$texture-mode",["^ ","^O","Shape","^P",null,"^Q",["^ ","^O","Shape","^R","1.0","^S","Vertex","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",15,"^V","textureMode()","^W",3,"^X",true,"^Y",4383,"^Z",4383,"^[",["^10",["^11",["^10",[["^1G"]]]]],"^13","Sets the coordinate space for texture mapping. There are two\n  options, :image and :normal.\n\n  :image refers to the actual coordinates of the image and :normal\n  refers to a normalized space of values ranging from 0 to 1. The\n  default mode is :image. In :image, if an image is 100 x 200 pixels,\n  mapping the image onto the entire size of a quad would require the\n  points (0,0) (0,100) (100,200) (0,200). The same mapping in\n  NORMAL_SPACE is (0,0) (0,1) (1,1) (0,1)."],"^R","1.0","^B","~$quil.core/texture-mode","^15",false,"^S","Vertex","^T","resources/public/js/development/quil/core.cljc","^U",15,"^V","textureMode()","^16",["^10",[["^1G"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",4377,"^Z",4383,"^19",1,"^1:",true,"^[",["^10",["^11",["^10",[["^1G"]]]]],"^13","Sets the coordinate space for texture mapping. There are two\n  options, :image and :normal.\n\n  :image refers to the actual coordinates of the image and :normal\n  refers to a normalized space of values ranging from 0 to 1. The\n  default mode is :image. In :image, if an image is 100 x 200 pixels,\n  mapping the image onto the entire size of a quad would require the\n  points (0,0) (0,100) (100,200) (0,200). The same mapping in\n  NORMAL_SPACE is (0,0) (0,1) (1,1) (0,1)."],"~$redraw",["^ ","^O","Structure","^P",null,"^Q",["^ ","^O","Structure","^R","1.0","^S",null,"^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",9,"^V","redraw()","^W",3,"^X",true,"^Y",3344,"^Z",3344,"^[",["^10",["^11",["^10",[[]]]]],"^13","Executes the code within the draw fn one time. This functions\n  allows the program to update the display window only when necessary,\n  for example when an event registered by mouse-pressed or\n  key-pressed occurs.\n\n  In structuring a program, it only makes sense to call redraw\n  within events such as mouse-pressed. This is because redraw does\n  not run draw immediately (it only sets a flag that indicates an\n  update is needed).\n\n  Calling redraw within draw has no effect because draw is\n  continuously called anyway."],"^R","1.0","^B","~$quil.core/redraw","^15",false,"^S",null,"^T","resources/public/js/development/quil/core.cljc","^U",9,"^V","redraw()","^16",["^10",[[]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",3338,"^Z",3344,"^19",0,"^1:",true,"^[",["^10",["^11",["^10",[[]]]]],"^13","Executes the code within the draw fn one time. This functions\n  allows the program to update the display window only when necessary,\n  for example when an event registered by mouse-pressed or\n  key-pressed occurs.\n\n  In structuring a program, it only makes sense to call redraw\n  within events such as mouse-pressed. This is because redraw does\n  not run draw immediately (it only sets a flag that indicates an\n  update is needed).\n\n  Calling redraw within draw has no effect because draw is\n  continuously called anyway."],"~$RAD-TO-DEG",["^ ","^B","~$quil.core/RAD-TO-DEG","^T","resources/public/js/development/quil/core.cljc","^Y",85,"^W",1,"^Z",85,"^U",16,"^Q",["^ ","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^Y",85,"^W",6,"^Z",85,"^U",16],"^1=","^4O"],"~$get-pixel",["^ ","^O","Image","^P",null,"^Q",["^ ","^O","Image","^R","1.0","^S","Pixels","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",12,"^1D",["^ ","^15",false,"^19",5,"^16",["^10",[[],["^2="],["~$x","~$y"],["^2=","~$x","~$y"],["~$x","~$y","~$w","~$h"],["^2=","~$x","~$y","~$w","~$h"]]],"^[",["^10",[[],["^2="],["~$x","~$y"],["^2=","~$x","~$y"],["~$x","~$y","~$w","~$h"],["^2=","~$x","~$y","~$w","~$h"]]],"^18",["^10",[null,null,null,null,null,null]]],"^V","get()","^W",3,"^X",true,"^Y",1908,"^Z",1908,"^[",["^10",["^11",["^10",[[],["^2="],["~$x","~$y"],["^2=","~$x","~$y"],["~$x","~$y","~$w","~$h"],["^2=","~$x","~$y","~$w","~$h"]]]]],"^13","Reads the color of any pixel or grabs a section of an image. If no\n  parameters are specified, a copy of entire image is returned. Get the\n  value of one pixel by specifying an x,y coordinate. Get a section of\n  the image by specifying an additional width and height parameter.\n  If the pixel requested is outside of the image window, black is returned.\n  The numbers returned are scaled according to the current color ranges,\n  but only RGB values are returned by this function. For example, even though\n  you may have drawn a shape with (color-mode :hsb), the numbers returned\n  will be in RGB.\n\n  Getting the color of a single pixel with (get x y) is easy, but not\n  as fast as grabbing the data directly using the pixels fn.\n\n  If no img specified - current-graphics is used."],"^R","1.0","^B","~$quil.core/get-pixel","^15",false,"^S","Pixels","^T","resources/public/js/development/quil/core.cljc","^U",12,"^1D",["^ ","^15",false,"^19",5,"^16",["^10",[[],["^2="],["~$x","~$y"],["^2=","~$x","~$y"],["~$x","~$y","~$w","~$h"],["^2=","~$x","~$y","~$w","~$h"]]],"^[",["^10",[[],["^2="],["~$x","~$y"],["^2=","~$x","~$y"],["~$x","~$y","~$w","~$h"],["^2=","~$x","~$y","~$w","~$h"]]],"^18",["^10",[null,null,null,null,null,null]]],"^V","get()","^16",["^10",[[],["^2="],["~$x","~$y"],["^2=","~$x","~$y"],["~$x","~$y","~$w","~$h"],["^2=","~$x","~$y","~$w","~$h"]]],"^17",null,"^18",["^10",[null,null,null,null,null,null]],"^W",1,"^X",true,"^Y",1902,"^Z",1908,"^19",5,"^1:",true,"^[",["^10",[[],["^2="],["~$x","~$y"],["^2=","~$x","~$y"],["~$x","~$y","~$w","~$h"],["^2=","~$x","~$y","~$w","~$h"]]],"^13","Reads the color of any pixel or grabs a section of an image. If no\n  parameters are specified, a copy of entire image is returned. Get the\n  value of one pixel by specifying an x,y coordinate. Get a section of\n  the image by specifying an additional width and height parameter.\n  If the pixel requested is outside of the image window, black is returned.\n  The numbers returned are scaled according to the current color ranges,\n  but only RGB values are returned by this function. For example, even though\n  you may have drawn a shape with (color-mode :hsb), the numbers returned\n  will be in RGB.\n\n  Getting the color of a single pixel with (get x y) is easy, but not\n  as fast as grabbing the data directly using the pixels fn.\n\n  If no img specified - current-graphics is used."],"~$rotate",["^ ","^O","Transform","^P",null,"^Q",["^ ","^O","Transform","^R","1.0","^S",null,"^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",9,"^1D",["^ ","^15",false,"^19",4,"^16",["^10",[["^12"],["^12","~$vx","~$vy","~$vz"]]],"^[",["^10",[["^12"],["^12","^@9","^@:","^@;"]]],"^18",["^10",[null,null]]],"^V","rotate()","^W",3,"^X",true,"^Y",3454,"^Z",3454,"^[",["^10",["^11",["^10",[["^12"],["^12","^@9","^@:","^@;"]]]]],"^13","Rotates a shape the amount specified by the angle parameter. Angles\n  should be specified in radians (values from 0 to TWO-PI) or\n  converted to radians with the radians function.\n\n  Objects are always rotated around their relative position to the\n  origin and positive numbers rotate objects in a clockwise\n  direction. Transformations apply to everything that happens after\n  and subsequent calls to the function accumulates the effect. For\n  example, calling (rotate HALF-PI) and then (rotate HALF-PI) is the\n  same as (rotate PI). All tranformations are reset when draw begins\n  again.\n\n  Technically, rotate multiplies the current transformation matrix by\n  a rotation matrix. This function can be further controlled by the\n  push-matrix and pop-matrix."],"^R","1.0","^B","~$quil.core/rotate","^15",false,"^S",null,"^T","resources/public/js/development/quil/core.cljc","^U",9,"^1D",["^ ","^15",false,"^19",4,"^16",["^10",[["^12"],["^12","^@9","^@:","^@;"]]],"^[",["^10",[["^12"],["^12","^@9","^@:","^@;"]]],"^18",["^10",[null,null]]],"^V","rotate()","^16",["^10",[["^12"],["^12","^@9","^@:","^@;"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",3448,"^Z",3454,"^19",4,"^1:",true,"^[",["^10",[["^12"],["^12","^@9","^@:","^@;"]]],"^13","Rotates a shape the amount specified by the angle parameter. Angles\n  should be specified in radians (values from 0 to TWO-PI) or\n  converted to radians with the radians function.\n\n  Objects are always rotated around their relative position to the\n  origin and positive numbers rotate objects in a clockwise\n  direction. Transformations apply to everything that happens after\n  and subsequent calls to the function accumulates the effect. For\n  example, calling (rotate HALF-PI) and then (rotate HALF-PI) is the\n  same as (rotate PI). All tranformations are reset when draw begins\n  again.\n\n  Technically, rotate multiplies the current transformation matrix by\n  a rotation matrix. This function can be further controlled by the\n  push-matrix and pop-matrix."],"~$set-pixel",["^ ","^O","Image","^P",null,"^Q",["^ ","^O","Image","^R","1.0","^S","Pixels","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",12,"^1D",["^ ","^15",false,"^19",4,"^16",["^10",[["~$x","~$y","~$c"],["^2=","~$x","~$y","~$c"]]],"^[",["^10",[["~$x","~$y","~$c"],["^2=","~$x","~$y","~$c"]]],"^18",["^10",[null,null]]],"^V","set()","^W",3,"^X",true,"^Y",3712,"^Z",3712,"^[",["^10",["^11",["^10",[["~$x","~$y","~$c"],["^2=","~$x","~$y","~$c"]]]]],"^13","Changes the color of any pixel in the display window. The x and y\n  parameters specify the pixel to change and the color parameter\n  specifies the color value. The color parameter is affected by the\n  current color mode (the default is RGB values from 0 to 255).\n\n  Setting the color of a single pixel with (set x, y) is easy, but not\n  as fast as putting the data directly into pixels[].\n\n  This function ignores imageMode().\n\n  Due to what appears to be a bug in Apple's Java implementation, the\n  point() and set() methods are extremely slow in some circumstances\n  when used with the default renderer. Using :p2d or :p3d will fix the\n  problem. Grouping many calls to point or set-pixel together can also\n  help. (Bug 1094)"],"^R","1.0","^B","~$quil.core/set-pixel","^15",false,"^S","Pixels","^T","resources/public/js/development/quil/core.cljc","^U",12,"^1D",["^ ","^15",false,"^19",4,"^16",["^10",[["~$x","~$y","~$c"],["^2=","~$x","~$y","~$c"]]],"^[",["^10",[["~$x","~$y","~$c"],["^2=","~$x","~$y","~$c"]]],"^18",["^10",[null,null]]],"^V","set()","^16",["^10",[["~$x","~$y","~$c"],["^2=","~$x","~$y","~$c"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",3706,"^Z",3712,"^19",4,"^1:",true,"^[",["^10",[["~$x","~$y","~$c"],["^2=","~$x","~$y","~$c"]]],"^13","Changes the color of any pixel in the display window. The x and y\n  parameters specify the pixel to change and the color parameter\n  specifies the color value. The color parameter is affected by the\n  current color mode (the default is RGB values from 0 to 255).\n\n  Setting the color of a single pixel with (set x, y) is easy, but not\n  as fast as putting the data directly into pixels[].\n\n  This function ignores imageMode().\n\n  Due to what appears to be a bug in Apple's Java implementation, the\n  point() and set() methods are extremely slow in some circumstances\n  when used with the default renderer. Using :p2d or :p3d will fix the\n  problem. Grouping many calls to point or set-pixel together can also\n  help. (Bug 1094)"],"~$push-matrix",["^ ","^O","Transform","^P",null,"^Q",["^ ","^O","Transform","^R","1.0","^S",null,"^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",14,"^V","pushMatrix()","^W",3,"^X",true,"^Y",3080,"^Z",3080,"^[",["^10",["^11",["^10",[[]]]]],"^13","Pushes the current transformation matrix onto the matrix\n  stack. Understanding push-matrix and pop-matrix requires\n  understanding the concept of a matrix stack. The push-matrix\n  function saves the current coordinate system to the stack and\n  pop-matrix restores the prior coordinate system. push-matrix and\n  pop-matrix are used in conjuction with the other transformation\n  methods and may be embedded to control the scope of the\n  transformations."],"^R","1.0","^B","~$quil.core/push-matrix","^15",false,"^S",null,"^T","resources/public/js/development/quil/core.cljc","^U",14,"^V","pushMatrix()","^16",["^10",[[]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",3074,"^Z",3080,"^19",0,"^1:",true,"^[",["^10",["^11",["^10",[[]]]]],"^13","Pushes the current transformation matrix onto the matrix\n  stack. Understanding push-matrix and pop-matrix requires\n  understanding the concept of a matrix stack. The push-matrix\n  function saves the current coordinate system to the stack and\n  pop-matrix restores the prior coordinate system. push-matrix and\n  pop-matrix are used in conjuction with the other transformation\n  methods and may be embedded to control the scope of the\n  transformations."],"~$no-smooth",["^ ","^O","Shape","^P",null,"^Q",["^ ","^O","Shape","^R","1.0","^S","Attributes","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",12,"^V","noSmooth()","^W",3,"^X",true,"^Y",2823,"^Z",2823,"^[",["^10",["^11",["^10",[[]]]]],"^13","Draws all geometry with jagged (aliased) edges. Must be called inside\n  :settings handler."],"^R","1.0","^B","~$quil.core/no-smooth","^15",false,"^S","Attributes","^T","resources/public/js/development/quil/core.cljc","^U",12,"^V","noSmooth()","^16",["^10",[[]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",2817,"^Z",2823,"^19",0,"^1:",true,"^[",["^10",["^11",["^10",[[]]]]],"^13","Draws all geometry with jagged (aliased) edges. Must be called inside\n  :settings handler."],"^2N",["^ ","^O","Color","^P",null,"^Q",["^ ","^O","Color","^R","1.0","^S","Creating & Reading","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",8,"^V","alpha()","^W",3,"^X",true,"^Y",314,"^Z",314,"^[",["^10",["^11",["^10",[["^83"]]]]],"^13","Extracts the alpha value from a color."],"^R","1.0","^B","~$quil.core/alpha","^15",false,"^S","Creating & Reading","^T","resources/public/js/development/quil/core.cljc","^U",8,"^V","alpha()","^16",["^10",[["^83"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",308,"^Z",314,"^19",1,"^1:",true,"^[",["^10",["^11",["^10",[["^83"]]]]],"^13","Extracts the alpha value from a color."],"~$camera",["^ ","^O","Lights, Camera","^P",null,"^Q",["^ ","^O","Lights, Camera","^R","1.0","^S","Camera","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",9,"^1D",["^ ","^15",false,"^19",9,"^16",["^10",[[],["~$eyeX","~$eyeY","~$eyeZ","~$centerX","~$centerY","~$centerZ","~$upX","~$upY","~$upZ"]]],"^[",["^10",[[],["^@E","^@F","^@G","^@H","^@I","^@J","^@K","^@L","^@M"]]],"^18",["^10",[null,null]]],"^V","camera()","^W",3,"^X",true,"^Y",940,"^Z",940,"^[",["^10",["^11",["^10",[[],["^@E","^@F","^@G","^@H","^@I","^@J","^@K","^@L","^@M"]]]]],"^13","Sets the position of the camera through setting the eye position,\n  the center of the scene, and which axis is facing upward. Moving the\n  eye position and the direction it is pointing (the center of the\n  scene) allows the images to be seen from different angles. The\n  version without any parameters sets the camera to the default\n  position, pointing to the center of the display window with the Y\n  axis as up. The default values are:\n\n  eyeX:     (/ (width) 2.0)\n  eyeY:     (/ (height) 2.0)\n  eyeZ:     (/ (/ (height) 2.0) (tan (/ (* Math/PI 60.0) 360.0)))\n  centerX:  (/ (width) 2.0)\n  centerY:  (/ (height) 2.0)\n  centerZ:  0\n  upX:      0\n  upY:      1\n  upZ:      0\n\n  Similar imilar to gluLookAt() in OpenGL, but it first clears the\n  current camera settings."],"^R","1.0","^B","~$quil.core/camera","^15",false,"^S","Camera","^T","resources/public/js/development/quil/core.cljc","^U",9,"^1D",["^ ","^15",false,"^19",9,"^16",["^10",[[],["^@E","^@F","^@G","^@H","^@I","^@J","^@K","^@L","^@M"]]],"^[",["^10",[[],["^@E","^@F","^@G","^@H","^@I","^@J","^@K","^@L","^@M"]]],"^18",["^10",[null,null]]],"^V","camera()","^16",["^10",[[],["^@E","^@F","^@G","^@H","^@I","^@J","^@K","^@L","^@M"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",934,"^Z",940,"^19",9,"^1:",true,"^[",["^10",[[],["^@E","^@F","^@G","^@H","^@I","^@J","^@K","^@L","^@M"]]],"^13","Sets the position of the camera through setting the eye position,\n  the center of the scene, and which axis is facing upward. Moving the\n  eye position and the direction it is pointing (the center of the\n  scene) allows the images to be seen from different angles. The\n  version without any parameters sets the camera to the default\n  position, pointing to the center of the display window with the Y\n  axis as up. The default values are:\n\n  eyeX:     (/ (width) 2.0)\n  eyeY:     (/ (height) 2.0)\n  eyeZ:     (/ (/ (height) 2.0) (tan (/ (* Math/PI 60.0) 360.0)))\n  centerX:  (/ (width) 2.0)\n  centerY:  (/ (height) 2.0)\n  centerZ:  0\n  upX:      0\n  upY:      1\n  upZ:      0\n\n  Similar imilar to gluLookAt() in OpenGL, but it first clears the\n  current camera settings."],"~$translate",["^ ","^O","Transform","^P",null,"^Q",["^ ","^O","Transform","^R","1.0","^S",null,"^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",12,"^1D",["^ ","^15",false,"^19",3,"^16",["^10",[["~$v"],["~$tx","~$ty"],["^@P","^@Q","~$tz"]]],"^[",["^10",[["~$v"],["^@P","^@Q"],["^@P","^@Q","^@R"]]],"^18",["^10",[null,null,null]]],"^V","translate()","^W",3,"^X",true,"^Y",4504,"^Z",4504,"^[",["^10",["^11",["^10",[["~$v"],["^@P","^@Q"],["^@P","^@Q","^@R"]]]]],"^13","Specifies an amount to displace objects within the display\n  window. The x parameter specifies left/right translation, the y\n  parameter specifies up/down translation, and the z parameter\n  specifies translations toward/away from the screen.  Transformations\n  apply to everything that happens after and subsequent calls to the\n  function accumulates the effect. For example, calling (translate 50\n  0) and then (translate 20, 0) is the same as (translate 70, 0). If\n  translate is called within draw, the transformation is reset when\n  the loop begins again. This function can be further controlled by\n  the push-matrix and pop-matrix."],"^R","1.0","^B","~$quil.core/translate","^15",false,"^S",null,"^T","resources/public/js/development/quil/core.cljc","^U",12,"^1D",["^ ","^15",false,"^19",3,"^16",["^10",[["~$v"],["^@P","^@Q"],["^@P","^@Q","^@R"]]],"^[",["^10",[["~$v"],["^@P","^@Q"],["^@P","^@Q","^@R"]]],"^18",["^10",[null,null,null]]],"^V","translate()","^16",["^10",[["~$v"],["^@P","^@Q"],["^@P","^@Q","^@R"]]],"^17",null,"^18",["^10",[null,null,null]],"^W",1,"^X",true,"^Y",4498,"^Z",4504,"^19",3,"^1:",true,"^[",["^10",[["~$v"],["^@P","^@Q"],["^@P","^@Q","^@R"]]],"^13","Specifies an amount to displace objects within the display\n  window. The x parameter specifies left/right translation, the y\n  parameter specifies up/down translation, and the z parameter\n  specifies translations toward/away from the screen.  Transformations\n  apply to everything that happens after and subsequent calls to the\n  function accumulates the effect. For example, calling (translate 50\n  0) and then (translate 20, 0) is the same as (translate 70, 0). If\n  translate is called within draw, the transformation is reset when\n  the loop begins again. This function can be further controlled by\n  the push-matrix and pop-matrix."],"~$load-font",["^ ","^O","Typography","^P",null,"^Q",["^ ","^O","Typography","^R","1.0","^S","Loading & Displaying","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",12,"^V","loadFont()","^W",3,"^X",true,"^Y",2340,"^Z",2340,"^[",["^10",["^11",["^10",[["^54"]]]]],"^13","Loads a font into a variable of type PFont. To load correctly,\n  fonts must be located in the data directory of the current sketch.\n  To create a font to use with Processing use the create-font fn.\n\n  Like load-image and other methods that load data, the load-font fn\n  should not be used inside draw, because it will slow down the sketch\n  considerably, as the font will be re-loaded from the disk (or\n  network) on each frame.\n\n  For most renderers, Processing displays fonts using the .vlw font\n  format, which uses images for each letter, rather than defining them\n  through vector data. When hint :enable-native-fonts is used with the\n  JAVA2D renderer, the native version of a font will be used if it is\n  installed on the user's machine.\n\n  Using create-font (instead of load-font) enables vector data to be\n  used with the JAVA2D (default) renderer setting. This can be helpful\n  when many font sizes are needed, or when using any renderer based on\n  JAVA2D, such as the PDF library."],"^R","1.0","^B","~$quil.core/load-font","^15",false,"^S","Loading & Displaying","^T","resources/public/js/development/quil/core.cljc","^U",12,"^V","loadFont()","^16",["^10",[["^54"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",2334,"^Z",2340,"^19",1,"^1:",true,"^[",["^10",["^11",["^10",[["^54"]]]]],"^13","Loads a font into a variable of type PFont. To load correctly,\n  fonts must be located in the data directory of the current sketch.\n  To create a font to use with Processing use the create-font fn.\n\n  Like load-image and other methods that load data, the load-font fn\n  should not be used inside draw, because it will slow down the sketch\n  considerably, as the font will be re-loaded from the disk (or\n  network) on each frame.\n\n  For most renderers, Processing displays fonts using the .vlw font\n  format, which uses images for each letter, rather than defining them\n  through vector data. When hint :enable-native-fonts is used with the\n  JAVA2D renderer, the native version of a font will be used if it is\n  installed on the user's machine.\n\n  Using create-font (instead of load-font) enables vector data to be\n  used with the JAVA2D (default) renderer setting. This can be helpful\n  when many font sizes are needed, or when using any renderer based on\n  JAVA2D, such as the PDF library."],"~$ambient",["^ ","^O","Lights, Camera","^P",null,"^Q",["^ ","^O","Lights, Camera","^R","1.0","^S","Material Properties","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",10,"^1D",["^ ","^15",false,"^19",3,"^16",["^10",[["^3I"],["~$x","~$y","~$z"]]],"^[",["^10",[["^3I"],["~$x","~$y","~$z"]]],"^18",["^10",[null,null]]],"^V","ambient()","^W",3,"^X",true,"^Y",357,"^Z",357,"^[",["^10",["^11",["^10",[["^3I"],["~$x","~$y","~$z"]]]]],"^13","Sets the ambient reflectance for shapes drawn to the screen. This\n  is combined with the ambient light component of environment. The\n  color components set through the parameters define the\n  reflectance. For example in the default color mode, setting x=255,\n  y=126, z=0, would cause all the red light to reflect and half of the\n  green light to reflect. Used in combination with emissive, specular,\n  and shininess in setting the material properties of shapes."],"^R","1.0","^B","~$quil.core/ambient","^15",false,"^S","Material Properties","^T","resources/public/js/development/quil/core.cljc","^U",10,"^1D",["^ ","^15",false,"^19",3,"^16",["^10",[["^3I"],["~$x","~$y","~$z"]]],"^[",["^10",[["^3I"],["~$x","~$y","~$z"]]],"^18",["^10",[null,null]]],"^V","ambient()","^16",["^10",[["^3I"],["~$x","~$y","~$z"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",351,"^Z",357,"^19",3,"^1:",true,"^[",["^10",[["^3I"],["~$x","~$y","~$z"]]],"^13","Sets the ambient reflectance for shapes drawn to the screen. This\n  is combined with the ambient light component of environment. The\n  color components set through the parameters define the\n  reflectance. For example in the default color mode, setting x=255,\n  y=126, z=0, would cause all the red light to reflect and half of the\n  green light to reflect. Used in combination with emissive, specular,\n  and shininess in setting the material properties of shapes."],"~$shear-y",["^ ","^O","Transform","^P",null,"^Q",["^ ","^O","Transform","^R","1.0","^S",null,"^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",10,"^V","shearY()","^W",3,"^X",true,"^Y",3817,"^Z",3817,"^[",["^10",["^11",["^10",[["^12"]]]]],"^13","Shears a shape around the y-axis the amount specified by the angle\n  parameter. Angles should be specified in radians (values from 0 to\n  PI*2) or converted to radians with the radians() function. Objects\n  are always sheared around their relative position to the origin and\n  positive numbers shear objects in a clockwise direction.\n  Transformations apply to everything that happens after and\n  subsequent calls to the function accumulates the effect. For\n  example, calling (shear-y (/ PI 2)) and then (shear-y (/ PI 2)) is\n  the same as (shear-y PI). If shear-y is called within the draw fn,\n  the transformation is reset when the loop begins again. This\n  function works in P2D or JAVA2D mode.\n\n  Technically, shear-y multiplies the current transformation matrix\n  by a rotation matrix. This function can be further controlled by the\n  push-matrix and pop-matrix fns."],"^R","1.0","^B","~$quil.core/shear-y","^15",false,"^S",null,"^T","resources/public/js/development/quil/core.cljc","^U",10,"^V","shearY()","^16",["^10",[["^12"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",3811,"^Z",3817,"^19",1,"^1:",true,"^[",["^10",["^11",["^10",[["^12"]]]]],"^13","Shears a shape around the y-axis the amount specified by the angle\n  parameter. Angles should be specified in radians (values from 0 to\n  PI*2) or converted to radians with the radians() function. Objects\n  are always sheared around their relative position to the origin and\n  positive numbers shear objects in a clockwise direction.\n  Transformations apply to everything that happens after and\n  subsequent calls to the function accumulates the effect. For\n  example, calling (shear-y (/ PI 2)) and then (shear-y (/ PI 2)) is\n  the same as (shear-y PI). If shear-y is called within the draw fn,\n  the transformation is reset when the loop begins again. This\n  function works in P2D or JAVA2D mode.\n\n  Technically, shear-y multiplies the current transformation matrix\n  by a rotation matrix. This function can be further controlled by the\n  push-matrix and pop-matrix fns."],"~$cursor-modes",["^ ","^B","~$quil.core/cursor-modes","^T","resources/public/js/development/quil/core.cljc","^Y",45,"^W",1,"^Z",74,"^U",14,"^Q",["^ ","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^Y",74,"^W",2,"^Z",74,"^U",14],"^1=","^1>"],"~$mouse-y",["^ ","^O","Input","^P",null,"^Q",["^ ","^O","Input","^R","1.0","^S","Mouse","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",10,"^V","mouseY","^W",3,"^X",true,"^Y",2627,"^Z",2627,"^[",["^10",["^11",["^10",[[]]]]],"^13","Current vertical coordinate of the mouse."],"^R","1.0","^B","~$quil.core/mouse-y","^15",false,"^S","Mouse","^T","resources/public/js/development/quil/core.cljc","^U",10,"^V","mouseY","^16",["^10",[[]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",2621,"^Z",2627,"^19",0,"^1:",true,"^[",["^10",["^11",["^10",[[]]]]],"^13","Current vertical coordinate of the mouse."],"~$mouse-button",["^ ","^O","Input","^P",null,"^Q",["^ ","^O","Input","^R","1.0","^S","Mouse","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",15,"^V","mouseButton","^W",3,"^X",true,"^Y",2577,"^Z",2577,"^[",["^10",["^11",["^10",[[]]]]],"^13","The value of the system variable mouseButton is either :left, :right,\n  or :center depending on which button is pressed. nil if no button pressed"],"^R","1.0","^B","~$quil.core/mouse-button","^15",false,"^S","Mouse","^T","resources/public/js/development/quil/core.cljc","^U",15,"^V","mouseButton","^16",["^10",[[]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",2571,"^Z",2577,"^19",0,"^1:",true,"^[",["^10",["^11",["^10",[[]]]]],"^13","The value of the system variable mouseButton is either :left, :right,\n  or :center depending on which button is pressed. nil if no button pressed"],"~$p-shape-modes",["^ ","^B","~$quil.core/p-shape-modes","^T","resources/public/js/development/quil/core.cljc","^Y",45,"^W",1,"^Z",65,"^U",15,"^Q",["^ ","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^Y",65,"^W",2,"^Z",65,"^U",15],"^1=","^1>"],"~$image",["^ ","^O","Image","^P",null,"^Q",["^ ","^O","Image","^R","1.0","^S","Loading & Displaying","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",8,"^1D",["^ ","^15",false,"^19",5,"^16",["^10",[["^2=","~$x","~$y"],["^2=","~$x","~$y","~$c","~$d"]]],"^[",["^10",[["^2=","~$x","~$y"],["^2=","~$x","~$y","~$c","~$d"]]],"^18",["^10",[null,null]]],"^V","image()","^W",3,"^X",true,"^Y",2072,"^Z",2072,"^[",["^10",["^11",["^10",[["^2=","~$x","~$y"],["^2=","~$x","~$y","~$c","~$d"]]]]],"^13","Displays images to the screen. Processing currently works with GIF,\n  JPEG, and Targa images. The color of an image may be modified with\n  the tint function and if a GIF has transparency, it will maintain\n  its transparency. The img parameter specifies the image to display\n  and the x and y parameters define the location of the image from its\n  upper-left corner. The image is displayed at its original size\n  unless the width and height parameters specify a different size. The\n  image-mode fn changes the way the parameters work. A call to\n  (image-mode :corners) will change the width and height parameters to\n  define the x and y values of the opposite corner of the image.\n\n  Starting with release 0124, when using the default (JAVA2D)\n  renderer, smooth will also improve image quality of resized\n  images."],"^R","1.0","^B","~$quil.core/image","^15",false,"^S","Loading & Displaying","^T","resources/public/js/development/quil/core.cljc","^U",8,"^1D",["^ ","^15",false,"^19",5,"^16",["^10",[["^2=","~$x","~$y"],["^2=","~$x","~$y","~$c","~$d"]]],"^[",["^10",[["^2=","~$x","~$y"],["^2=","~$x","~$y","~$c","~$d"]]],"^18",["^10",[null,null]]],"^V","image()","^16",["^10",[["^2=","~$x","~$y"],["^2=","~$x","~$y","~$c","~$d"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",2066,"^Z",2072,"^19",5,"^1:",true,"^[",["^10",[["^2=","~$x","~$y"],["^2=","~$x","~$y","~$c","~$d"]]],"^13","Displays images to the screen. Processing currently works with GIF,\n  JPEG, and Targa images. The color of an image may be modified with\n  the tint function and if a GIF has transparency, it will maintain\n  its transparency. The img parameter specifies the image to display\n  and the x and y parameters define the location of the image from its\n  upper-left corner. The image is displayed at its original size\n  unless the width and height parameters specify a different size. The\n  image-mode fn changes the way the parameters work. A call to\n  (image-mode :corners) will change the width and height parameters to\n  define the x and y values of the opposite corner of the image.\n\n  Starting with release 0124, when using the default (JAVA2D)\n  renderer, smooth will also improve image quality of resized\n  images."],"~$unbinary",["^ ","^O","Data","^P",null,"^Q",["^ ","^O","Data","^4Q",false,"^R","1.0","^S","Conversion","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",11,"^V","unbinary()","^W",3,"^Y",4542,"^Z",4542,"^[",["^10",["^11",["^10",[["~$str-val"]]]]],"^13","Unpack a binary string to an integer. See binary for converting\n  integers to strings."],"^4Q",false,"^R","1.0","^B","~$quil.core/unbinary","^15",false,"^S","Conversion","^T","resources/public/js/development/quil/core.cljc","^U",11,"^V","unbinary()","^16",["^10",[["^A9"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^Y",4536,"^Z",4542,"^19",1,"^1:",true,"^[",["^10",["^11",["^10",[["^A9"]]]]],"^13","Unpack a binary string to an integer. See binary for converting\n  integers to strings."],"~$no-tint",["^ ","^O","Image","^P",null,"^Q",["^ ","^O","Image","^R","1.0","^S","Loading & Displaying","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",10,"^V","noTint()","^W",3,"^X",true,"^Y",2846,"^Z",2846,"^[",["^10",["^11",["^10",[[]]]]],"^13","Removes the current fill value for displaying images and reverts to\n  displaying images with their original hues."],"^R","1.0","^B","~$quil.core/no-tint","^15",false,"^S","Loading & Displaying","^T","resources/public/js/development/quil/core.cljc","^U",10,"^V","noTint()","^16",["^10",[[]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",2840,"^Z",2846,"^19",0,"^1:",true,"^[",["^10",["^11",["^10",[[]]]]],"^13","Removes the current fill value for displaying images and reverts to\n  displaying images with their original hues."],"~$no-lights",["^ ","^O","Lights, Camera","^P",null,"^Q",["^ ","^O","Lights, Camera","^R","1.0","^S","Lights","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",12,"^V","noLights()","^W",3,"^X",true,"^Y",2755,"^Z",2755,"^[",["^10",["^11",["^10",[[]]]]],"^13","Disable all lighting. Lighting is turned off by default and enabled\n  with the lights fn. This function can be used to disable lighting so\n  that 2D geometry (which does not require lighting) can be drawn\n  after a set of lighted 3D geometry."],"^R","1.0","^B","~$quil.core/no-lights","^15",false,"^S","Lights","^T","resources/public/js/development/quil/core.cljc","^U",12,"^V","noLights()","^16",["^10",[[]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",2749,"^Z",2755,"^19",0,"^1:",true,"^[",["^10",["^11",["^10",[[]]]]],"^13","Disable all lighting. Lighting is turned off by default and enabled\n  with the lights fn. This function can be used to disable lighting so\n  that 2D geometry (which does not require lighting) can be drawn\n  after a set of lighted 3D geometry."],"~$emissive-int",["^ ","^O","Lights, Camera","^P",null,"^Q",["^ ","^O","Lights, Camera","^R","1.0","^S","Material Properties","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",15,"^V","emissive()","^W",3,"^X",true,"^Y",1580,"^Z",1580,"^[",["^10",["^11",["^10",[["~$int-val"]]]]],"^13","Sets the emissive color of the material used for drawing shapes\n  drawn to the screen. Used in combination with ambient, specular, and\n  shininess in setting the material properties of shapes. Converts all\n  args to ints"],"^R","1.0","^B","~$quil.core/emissive-int","^15",false,"^S","Material Properties","^T","resources/public/js/development/quil/core.cljc","^U",15,"^V","emissive()","^16",["^10",[["^A@"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",1574,"^Z",1580,"^19",1,"^1:",true,"^[",["^10",["^11",["^10",[["^A@"]]]]],"^13","Sets the emissive color of the material used for drawing shapes\n  drawn to the screen. Used in combination with ambient, specular, and\n  shininess in setting the material properties of shapes. Converts all\n  args to ints"],"~$point",["^ ","^O","Shape","^P",null,"^Q",["^ ","^O","Shape","^R","1.0","^S","2D Primitives","^T","/Users/brmaass/dv/circles/resources/public/js/development/quil/core.cljc","^U",8,"^1D",["^ ","^15",false,"^19",3,"^16",["^10",[["~$x","~$y"],["~$x","~$y","~$z"]]],"^[",["^10",[["~$x","~$y"],["~$x","~$y","~$z"]]],"^18",["^10",[null,null]]],"^V","point()","^W",3,"^X",true,"^Y",2965,"^Z",2965,"^[",["^10",["^11",["^10",[["~$x","~$y"],["~$x","~$y","~$z"]]]]],"^13","Draws a point, a coordinate in space at the dimension of one\n  pixel. The first parameter is the horizontal value for the point,\n  the second value is the vertical value for the point, and the\n  optional third value is the depth value. Drawing this shape in 3D\n  using the z parameter requires the :P3D or :opengl renderer to be\n  used."],"^R","1.0","^B","~$quil.core/point","^15",false,"^S","2D Primitives","^T","resources/public/js/development/quil/core.cljc","^U",8,"^1D",["^ ","^15",false,"^19",3,"^16",["^10",[["~$x","~$y"],["~$x","~$y","~$z"]]],"^[",["^10",[["~$x","~$y"],["~$x","~$y","~$z"]]],"^18",["^10",[null,null]]],"^V","point()","^16",["^10",[["~$x","~$y"],["~$x","~$y","~$z"]]],"^17",null,"^18",["^10",[null,null]],"^W",1,"^X",true,"^Y",2959,"^Z",2965,"^19",3,"^1:",true,"^[",["^10",[["~$x","~$y"],["~$x","~$y","~$z"]]],"^13","Draws a point, a coordinate in space at the dimension of one\n  pixel. The first parameter is the horizontal value for the point,\n  the second value is the vertical value for the point, and the\n  optional third value is the depth value. Drawing this shape in 3D\n  using the z parameter requires the :P3D or :opengl renderer to be\n  used."]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^H","^I","^I","^I","~$u","^J","^J","^J"],"~:cljs.analyzer/constants",["^ ","~:seen",["^A",["~:shift","~$.endDraw","~:open","~$gr__22137__auto__","~:baseline","~:disable-stroke-perspective","~:hsb","~:quads","~:arrow","~:dilate","^>F","~$try","^?6","~:quad-strip","~:down","~:disable-depth-mask","~$cljs.core/binding","~:burn","~:posterize","~$quil.sketch/with-sketch","~:f8","^@S","~:screen","~:enable-depth-test","~:gray","~:enable-depth-sort","~:f1","~:corner","~$old-stroke__22110__auto__","~:disable-texture-mipmaps","~:darkest","~:f10","~:dodge","~:bottom","~:bevel","~:disable-stroke-pure","~:replace","~:alt","~:top","~$cljs.core/apply","~:disable-depth-test","~$finally","~:pie","^4W","~:enable-stroke-perspective","~:chord","~:rgb","~$.dispose","~:lines","~:argb","~:move","~:f5","~:command","~$tr__22119__auto__","^6H","~:miter","~:points","~:hand","~:close","~:radius","~:normal","~:threshold","~:up","~:center","~:round","~:disable-optimized-stroke","~$cljs.core/let","~:corners","~:f11","~:opaque","~:overlay","~:enable-opengl-errors","~:enable-stroke-pure","~:blur","~:enable-async-saveframe","~:project","~:triangle-fan","~:f3","~:enable-depth-mask","~:f2","~:control","~:difference","^@@","~:square","~:enable-optimized-stroke","~$tr__22128__auto__","~:p2d","~:shape","~:f12","~:exclusion","^9L","~:disable-opengl-errors","~:unknown-key","~:alpha","~:wait","~:right","^?C","~:repeat","~:hard-light","~$quil.sketch$macros/defsketch","~:image","~:disable-async-saveframe","~:multiply","~:lightest","^@<","~:f7","~:blend","~:disable-depth-sort","~$old-fill__22101__auto__","~:f9","~:erode","~:add","~:soft-light","^24","~:subtract","~:clamp","~:f6","~:f4","~:triangle-strip","~:cross","~$gr__21931__auto__","~:triangles","~$.beginDraw","~:left","~:invert","~:text","~:enable-texture-mipmaps","~:model"]],"~:orderrappers and extensions around the core Processing.org API."]